{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Keycloak Provider The Keycloak provider can be used to interact with Keycloak . Keycloak Setup This Terraform provider can be configured to use the client credentials or password grant types. If you aren't sure which to use, the client credentials grant is recommended, as it was designed for machine to machine authentication. Client Credentials Grant Setup (recommended) Create a new client using the openid-connect protocol. This client can be created in the master realm if you would like to manage your entire Keycloak instance, or in any other realm if you only want to manage that realm. Update the client you just created: Set \"Access Type\" to \"confidential\". Set \"Standard Flow Enabled\" to \"OFF\". Set \"Direct Access Grants Enabled\" to \"OFF\" Set \"Service Accounts Enabled\" to \"ON\". Grant required roles for managing Keycloak via the \"Service Account Roles\" tab in the client you created in step 1. Password Grant Setup These steps will assume that you are using the admin-cli client, which is already correctly configured for this type of authentication. Do not follow these steps if you have already followed the steps for the client credentials grant. Create or identify the user whose credentials will be used for authentication. Edit this user in the \"Users\" section of the management console and assign roles using the \"Role Mappings\" tab. Assigning Roles There are many ways that roles can be assigned to manage Keycloak. Here are a couple of common scenarios accompanied by suggested roles to assign. This is not an exhaustive list, and there is often more than one way to assign a particular set of permissions. Managing the entire Keycloak instance: Assign the admin role to a user or service account within the master realm. Managing the entire foo realm: Assign the realm-admin client role from the realm-management client to a user or service account within the foo realm. Managing clients for all realms within the entire Keycloak instance: Assign the create-client client role from each of the realm clients to a user or service account within the master realm. For example, given a Keycloak instance with realms master , foo , and bar , assign the create-client client role from the clients master-realm , foo-realm , and bar-realm . Example Usage (client credentials grant) provider \"keycloak\" { client_id = \"terraform\" client_secret = \"884e0f95-0f42-4a63-9b1f-94274655669e\" url = \"http://localhost:8080\" } Example Usage (password grant) provider \"keycloak\" { client_id = \"admin-cli\" username = \"keycloak\" password = \"password\" url = \"http://localhost:8080\" } Argument Reference The following arguments are supported: client_id - (Required) The client_id for the client that was created in the \"Keycloak Setup\" section. Use the admin-cli client if you are using the password grant. Defaults to the environment variable KEYCLOAK_CLIENT_ID . url - (Required) The URL of the Keycloak instance, before /auth/admin . Defaults to the environment variable KEYCLOAK_URL . client_secret - (Optional) The secret for the client used by the provider for authentication via the client credentials grant. This can be found or changed using the \"Credentials\" tab in the client settings. Defaults to the environment variable KEYCLOAK_CLIENT_SECRET . This attribute is required when using the client credentials grant, and cannot be set when using the password grant. username - (Optional) The username of the user used by the provider for authentication via the password grant. Defaults to environment variable KEYCLOAK_USER . This attribute is required when using the password grant, and cannot be set when using the client credentials grant. password - (Optional) The password of the user used by the provider for authentication via the password grant. Defaults to environment variable KEYCLOAK_PASSWORD . This attribute is required when using the password grant, and cannot be set when using the client credentials grant. realm - (Optional) The realm used by the provider for authentication. Defaults to environment variable KEYCLOAK_REALM , or master if the environment variable is not specified. initial_login - (Optional) Optionally avoid Keycloak login during provider setup, for when Keycloak itself is being provisioned by terraform. Defaults to true, which is the original method. client_timeout - (Optional) Sets the timeout of the client when addressing Keycloak, in seconds. Defaults to environment variable KEYCLOAK_CLIENT_TIMEOUT , or 5 is the environment variable is not specified. tls_insecure_skip_verify - (Optional) Allows ignoring insecure certificates when set to true. Defaults to false. Disabling security check is dangerous and should be avoided. root_ca_certificate - (Optional) Allows x509 calls using an unknown CA certificate (for development purposes) base_path - (Optional) The base path used for accessing the Keycloak REST API. Defaults to /auth","title":"Getting Started"},{"location":"#keycloak-provider","text":"The Keycloak provider can be used to interact with Keycloak .","title":"Keycloak Provider"},{"location":"#keycloak-setup","text":"This Terraform provider can be configured to use the client credentials or password grant types. If you aren't sure which to use, the client credentials grant is recommended, as it was designed for machine to machine authentication.","title":"Keycloak Setup"},{"location":"#client-credentials-grant-setup-recommended","text":"Create a new client using the openid-connect protocol. This client can be created in the master realm if you would like to manage your entire Keycloak instance, or in any other realm if you only want to manage that realm. Update the client you just created: Set \"Access Type\" to \"confidential\". Set \"Standard Flow Enabled\" to \"OFF\". Set \"Direct Access Grants Enabled\" to \"OFF\" Set \"Service Accounts Enabled\" to \"ON\". Grant required roles for managing Keycloak via the \"Service Account Roles\" tab in the client you created in step 1.","title":"Client Credentials Grant Setup (recommended)"},{"location":"#password-grant-setup","text":"These steps will assume that you are using the admin-cli client, which is already correctly configured for this type of authentication. Do not follow these steps if you have already followed the steps for the client credentials grant. Create or identify the user whose credentials will be used for authentication. Edit this user in the \"Users\" section of the management console and assign roles using the \"Role Mappings\" tab.","title":"Password Grant Setup"},{"location":"#assigning-roles","text":"There are many ways that roles can be assigned to manage Keycloak. Here are a couple of common scenarios accompanied by suggested roles to assign. This is not an exhaustive list, and there is often more than one way to assign a particular set of permissions. Managing the entire Keycloak instance: Assign the admin role to a user or service account within the master realm. Managing the entire foo realm: Assign the realm-admin client role from the realm-management client to a user or service account within the foo realm. Managing clients for all realms within the entire Keycloak instance: Assign the create-client client role from each of the realm clients to a user or service account within the master realm. For example, given a Keycloak instance with realms master , foo , and bar , assign the create-client client role from the clients master-realm , foo-realm , and bar-realm .","title":"Assigning Roles"},{"location":"#example-usage-client-credentials-grant","text":"provider \"keycloak\" { client_id = \"terraform\" client_secret = \"884e0f95-0f42-4a63-9b1f-94274655669e\" url = \"http://localhost:8080\" }","title":"Example Usage (client credentials grant)"},{"location":"#example-usage-password-grant","text":"provider \"keycloak\" { client_id = \"admin-cli\" username = \"keycloak\" password = \"password\" url = \"http://localhost:8080\" }","title":"Example Usage (password grant)"},{"location":"#argument-reference","text":"The following arguments are supported: client_id - (Required) The client_id for the client that was created in the \"Keycloak Setup\" section. Use the admin-cli client if you are using the password grant. Defaults to the environment variable KEYCLOAK_CLIENT_ID . url - (Required) The URL of the Keycloak instance, before /auth/admin . Defaults to the environment variable KEYCLOAK_URL . client_secret - (Optional) The secret for the client used by the provider for authentication via the client credentials grant. This can be found or changed using the \"Credentials\" tab in the client settings. Defaults to the environment variable KEYCLOAK_CLIENT_SECRET . This attribute is required when using the client credentials grant, and cannot be set when using the password grant. username - (Optional) The username of the user used by the provider for authentication via the password grant. Defaults to environment variable KEYCLOAK_USER . This attribute is required when using the password grant, and cannot be set when using the client credentials grant. password - (Optional) The password of the user used by the provider for authentication via the password grant. Defaults to environment variable KEYCLOAK_PASSWORD . This attribute is required when using the password grant, and cannot be set when using the client credentials grant. realm - (Optional) The realm used by the provider for authentication. Defaults to environment variable KEYCLOAK_REALM , or master if the environment variable is not specified. initial_login - (Optional) Optionally avoid Keycloak login during provider setup, for when Keycloak itself is being provisioned by terraform. Defaults to true, which is the original method. client_timeout - (Optional) Sets the timeout of the client when addressing Keycloak, in seconds. Defaults to environment variable KEYCLOAK_CLIENT_TIMEOUT , or 5 is the environment variable is not specified. tls_insecure_skip_verify - (Optional) Allows ignoring insecure certificates when set to true. Defaults to false. Disabling security check is dangerous and should be avoided. root_ca_certificate - (Optional) Allows x509 calls using an unknown CA certificate (for development purposes) base_path - (Optional) The base path used for accessing the Keycloak REST API. Defaults to /auth","title":"Argument Reference"},{"location":"data-sources/group/","text":"keycloak_group Data Source This data source can be used to fetch properties of a Keycloak group for usage with other resources, such as keycloak_group_roles . Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } data \"keycloak_role\" \"offline_access\" { realm_id = keycloak_realm.realm.id name = \"offline_access\" } data \"keycloak_group\" \"group\" { realm_id = keycloak_realm.realm.id name = \"group\" } resource \"keycloak_group_roles\" \"group_roles\" { realm_id = keycloak_realm.realm.id group_id = data.keycloak_group.group.id role_ids = [ data.keycloak_role.offline_access.id ] } Argument Reference realm_id - (Required) The realm this group exists within. name - (Required) The name of the group. If there are multiple groups match name , the first result will be returned. Attributes Reference id - (Computed) The unique ID of the group, which can be used as an argument to other resources supported by this provider.","title":"keycloak\\_group Data Source"},{"location":"data-sources/group/#keycloak_group-data-source","text":"This data source can be used to fetch properties of a Keycloak group for usage with other resources, such as keycloak_group_roles .","title":"keycloak_group Data Source"},{"location":"data-sources/group/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } data \"keycloak_role\" \"offline_access\" { realm_id = keycloak_realm.realm.id name = \"offline_access\" } data \"keycloak_group\" \"group\" { realm_id = keycloak_realm.realm.id name = \"group\" } resource \"keycloak_group_roles\" \"group_roles\" { realm_id = keycloak_realm.realm.id group_id = data.keycloak_group.group.id role_ids = [ data.keycloak_role.offline_access.id ] }","title":"Example Usage"},{"location":"data-sources/group/#argument-reference","text":"realm_id - (Required) The realm this group exists within. name - (Required) The name of the group. If there are multiple groups match name , the first result will be returned.","title":"Argument Reference"},{"location":"data-sources/group/#attributes-reference","text":"id - (Computed) The unique ID of the group, which can be used as an argument to other resources supported by this provider.","title":"Attributes Reference"},{"location":"data-sources/openid_client/","text":"keycloak_openid_client Data Source This data source can be used to fetch properties of a Keycloak OpenID client for usage with other resources. Example Usage data \"keycloak_openid_client\" \"realm_management\" { realm_id = \"my-realm\" client_id = \"realm-management\" } # use the data source data \"keycloak_role\" \"admin\" { realm_id = \"my-realm\" client_id = data.keycloak_openid_client.realm_management.id name = \"realm-admin\" } Argument Reference realm_id - (Required) The realm id. client_id - (Required) The client id (not its unique ID). Attributes Reference See the docs for the keycloak_openid_client resource for details on the exported attributes.","title":"keycloak\\_openid\\_client Data Source"},{"location":"data-sources/openid_client/#keycloak_openid_client-data-source","text":"This data source can be used to fetch properties of a Keycloak OpenID client for usage with other resources.","title":"keycloak_openid_client Data Source"},{"location":"data-sources/openid_client/#example-usage","text":"data \"keycloak_openid_client\" \"realm_management\" { realm_id = \"my-realm\" client_id = \"realm-management\" } # use the data source data \"keycloak_role\" \"admin\" { realm_id = \"my-realm\" client_id = data.keycloak_openid_client.realm_management.id name = \"realm-admin\" }","title":"Example Usage"},{"location":"data-sources/openid_client/#argument-reference","text":"realm_id - (Required) The realm id. client_id - (Required) The client id (not its unique ID).","title":"Argument Reference"},{"location":"data-sources/openid_client/#attributes-reference","text":"See the docs for the keycloak_openid_client resource for details on the exported attributes.","title":"Attributes Reference"},{"location":"data-sources/openid_client_authorization_policy/","text":"keycloak_openid_client_authorization_policy Data Source This data source can be used to fetch policy and permission information for an OpenID client that has authorization enabled. Example Usage In this example, we'll create a new OpenID client with authorization enabled. This will cause Keycloak to create a default permission for this client called \"Default Permission\". We'll use the keycloak_openid_client_authorization_policy data source to fetch information about this permission, so we can use it to create a new resource-based authorization permission. resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client_with_authz\" { client_id = \"client-with-authz\" name = \"client-with-authz\" realm_id = keycloak_realm.realm.id access_type = \"CONFIDENTIAL\" service_accounts_enabled = true authorization { policy_enforcement_mode = \"ENFORCING\" } } data \"keycloak_openid_client_authorization_policy\" \"default_permission\" { realm_id = keycloak_realm.test.id resource_server_id = keycloak_openid_client.client_with_authz.resource_server_id name = \"Default Permission\" } resource \"keycloak_openid_client_authorization_resource\" \"resource\" { resource_server_id = keycloak_openid_client.client_with_authz.resource_server_id name = \"authorization-resource\" realm_id = keycloak_realm.test.id uris = [ \"/endpoint/*\", ] attributes = { \"foo\" = \"bar\" } } resource \"keycloak_openid_client_authorization_permission\" \"permission\" { resource_server_id = keycloak_openid_client.client_with_authz.resource_server_id realm_id = keycloak_realm.test.id name = \"authorization-permission\" policies = [ data.keycloak_openid_client_authorization_policy.default_permission.id, ] resources = [ keycloak_openid_client_authorization_resource.resource.id, ] } Argument Reference realm_id - (Required) The realm this authorization policy exists within. name - (Required) The name of the authorization policy. resource_server_id - (Required) The ID of the resource server this authorization policy is attached to. Attributes Reference decision_strategy - (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of AFFIRMATIVE , CONSENSUS , or UNANIMOUS . Applies to permissions. owner - (Computed) The ID of the owning resource. Applies to resources. logic - (Computed) Dictates how the policy decision should be made. Can be either POSITIVE or NEGATIVE . Applies to policies. policies - (Computed) The IDs of the policies that must be applied to scopes/resources for this policy/permission. Applies to policies and permissions. resources - (Computed) The IDs of the resources that this permission applies to. Applies to resource-based permissions. scopes - (Computed) The IDs of the scopes that this permission applies to. Applies to scope-based permissions. type - (Computed) The type of this policy / permission. For permissions, this could be resource or scope . For policies, this could be any type of authorization policy, such as js .","title":"keycloak\\_openid\\_client\\_authorization\\_policy Data Source"},{"location":"data-sources/openid_client_authorization_policy/#keycloak_openid_client_authorization_policy-data-source","text":"This data source can be used to fetch policy and permission information for an OpenID client that has authorization enabled.","title":"keycloak_openid_client_authorization_policy Data Source"},{"location":"data-sources/openid_client_authorization_policy/#example-usage","text":"In this example, we'll create a new OpenID client with authorization enabled. This will cause Keycloak to create a default permission for this client called \"Default Permission\". We'll use the keycloak_openid_client_authorization_policy data source to fetch information about this permission, so we can use it to create a new resource-based authorization permission. resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client_with_authz\" { client_id = \"client-with-authz\" name = \"client-with-authz\" realm_id = keycloak_realm.realm.id access_type = \"CONFIDENTIAL\" service_accounts_enabled = true authorization { policy_enforcement_mode = \"ENFORCING\" } } data \"keycloak_openid_client_authorization_policy\" \"default_permission\" { realm_id = keycloak_realm.test.id resource_server_id = keycloak_openid_client.client_with_authz.resource_server_id name = \"Default Permission\" } resource \"keycloak_openid_client_authorization_resource\" \"resource\" { resource_server_id = keycloak_openid_client.client_with_authz.resource_server_id name = \"authorization-resource\" realm_id = keycloak_realm.test.id uris = [ \"/endpoint/*\", ] attributes = { \"foo\" = \"bar\" } } resource \"keycloak_openid_client_authorization_permission\" \"permission\" { resource_server_id = keycloak_openid_client.client_with_authz.resource_server_id realm_id = keycloak_realm.test.id name = \"authorization-permission\" policies = [ data.keycloak_openid_client_authorization_policy.default_permission.id, ] resources = [ keycloak_openid_client_authorization_resource.resource.id, ] }","title":"Example Usage"},{"location":"data-sources/openid_client_authorization_policy/#argument-reference","text":"realm_id - (Required) The realm this authorization policy exists within. name - (Required) The name of the authorization policy. resource_server_id - (Required) The ID of the resource server this authorization policy is attached to.","title":"Argument Reference"},{"location":"data-sources/openid_client_authorization_policy/#attributes-reference","text":"decision_strategy - (Computed) Dictates how the policies associated with a given permission are evaluated and how a final decision is obtained. Could be one of AFFIRMATIVE , CONSENSUS , or UNANIMOUS . Applies to permissions. owner - (Computed) The ID of the owning resource. Applies to resources. logic - (Computed) Dictates how the policy decision should be made. Can be either POSITIVE or NEGATIVE . Applies to policies. policies - (Computed) The IDs of the policies that must be applied to scopes/resources for this policy/permission. Applies to policies and permissions. resources - (Computed) The IDs of the resources that this permission applies to. Applies to resource-based permissions. scopes - (Computed) The IDs of the scopes that this permission applies to. Applies to scope-based permissions. type - (Computed) The type of this policy / permission. For permissions, this could be resource or scope . For policies, this could be any type of authorization policy, such as js .","title":"Attributes Reference"},{"location":"data-sources/openid_client_service_account_user/","text":"keycloak_openid_client_service_account_user Data Source This data source can be used to fetch information about the service account user that is associated with an OpenID client that has service accounts enabled. Example Usage In this example, we'll create an OpenID client with service accounts enabled. This causes Keycloak to create a special user that represents the service account. We'll use this data source to grab this user's ID in order to assign some roles to this user, using the keycloak_user_roles resource. resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id client_id = \"client\" name = \"client\" access_type = \"CONFIDENTIAL\" service_accounts_enabled = true } data \"keycloak_openid_client_service_account_user\" \"service_account_user\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client.id } data \"keycloak_role\" \"offline_access\" { realm_id = keycloak_realm.realm.id name = \"offline_access\" } resource \"keycloak_user_roles\" \"service_account_user_roles\" { realm_id = keycloak_realm.realm.id user_id = data.keycloak_openid_client_service_account_user.service_account_user.id role_ids = [ data.keycloak_role.offline_access.id ] } Argument Reference realm_id - (Required) The realm that the OpenID client exists within. client_id - (Required) The ID of the OpenID client with service accounts enabled. Attributes Reference username - (Computed) The service account user's username. email - (Computed) The service account user's email. first_name - (Computed) The service account user's first name. last_name - (Computed) The service account user's last name. enabled - (Computed) Whether or not the service account user is enabled. attributes - (Computed) The service account user's attributes. federated_identities - (Computed) This attribute exists in order to adhere to the spec of a Keycloak user, but a service account user will never have a federated identity, so this will always be null .","title":"keycloak\\_openid\\_client\\_service\\_account\\_user Data Source"},{"location":"data-sources/openid_client_service_account_user/#keycloak_openid_client_service_account_user-data-source","text":"This data source can be used to fetch information about the service account user that is associated with an OpenID client that has service accounts enabled.","title":"keycloak_openid_client_service_account_user Data Source"},{"location":"data-sources/openid_client_service_account_user/#example-usage","text":"In this example, we'll create an OpenID client with service accounts enabled. This causes Keycloak to create a special user that represents the service account. We'll use this data source to grab this user's ID in order to assign some roles to this user, using the keycloak_user_roles resource. resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id client_id = \"client\" name = \"client\" access_type = \"CONFIDENTIAL\" service_accounts_enabled = true } data \"keycloak_openid_client_service_account_user\" \"service_account_user\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client.id } data \"keycloak_role\" \"offline_access\" { realm_id = keycloak_realm.realm.id name = \"offline_access\" } resource \"keycloak_user_roles\" \"service_account_user_roles\" { realm_id = keycloak_realm.realm.id user_id = data.keycloak_openid_client_service_account_user.service_account_user.id role_ids = [ data.keycloak_role.offline_access.id ] }","title":"Example Usage"},{"location":"data-sources/openid_client_service_account_user/#argument-reference","text":"realm_id - (Required) The realm that the OpenID client exists within. client_id - (Required) The ID of the OpenID client with service accounts enabled.","title":"Argument Reference"},{"location":"data-sources/openid_client_service_account_user/#attributes-reference","text":"username - (Computed) The service account user's username. email - (Computed) The service account user's email. first_name - (Computed) The service account user's first name. last_name - (Computed) The service account user's last name. enabled - (Computed) Whether or not the service account user is enabled. attributes - (Computed) The service account user's attributes. federated_identities - (Computed) This attribute exists in order to adhere to the spec of a Keycloak user, but a service account user will never have a federated identity, so this will always be null .","title":"Attributes Reference"},{"location":"data-sources/realm/","text":"keycloak_realm Data Source This data source can be used to fetch properties of a Keycloak realm for usage with other resources. Example Usage data \"keycloak_realm\" \"realm\" { realm = \"my-realm\" } # use the data source resource \"keycloak_role\" \"group\" { realm_id = data.keycloak_realm.realm.id name = \"group\" } Argument Reference realm - (Required) The realm name. Attributes Reference See the docs for the keycloak_realm resource for details on the exported attributes.","title":"keycloak\\_realm Data Source"},{"location":"data-sources/realm/#keycloak_realm-data-source","text":"This data source can be used to fetch properties of a Keycloak realm for usage with other resources.","title":"keycloak_realm Data Source"},{"location":"data-sources/realm/#example-usage","text":"data \"keycloak_realm\" \"realm\" { realm = \"my-realm\" } # use the data source resource \"keycloak_role\" \"group\" { realm_id = data.keycloak_realm.realm.id name = \"group\" }","title":"Example Usage"},{"location":"data-sources/realm/#argument-reference","text":"realm - (Required) The realm name.","title":"Argument Reference"},{"location":"data-sources/realm/#attributes-reference","text":"See the docs for the keycloak_realm resource for details on the exported attributes.","title":"Attributes Reference"},{"location":"data-sources/realm_keys/","text":"keycloak_realm_keys Data Source Use this data source to get the keys of a realm. Keys can be filtered by algorithm and status. Remarks: A key must meet all filter criteria This data source may return more than one value. If no key matches the filter criteria, then an error will be returned. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } data \"keycloak_realm_keys\" \"realm_keys\" { realm_id = keycloak_realm.realm algorithms = [\"AES\", \"RS256\"] status = [\"ACTIVE\", \"PASSIVE\"] } # show certificate of first key: output \"certificate\" { value = data.keycloak_realm_keys.realm_keys.keys[0].certificate } Argument Reference realm_id - (Required) The realm from which the keys will be retrieved. algorithms - (Optional) When specified, keys will be filtered by algorithm. The algorithms can be any of HS256 , RS256 , AES , etc. status - (Optional) When specified, keys will be filtered by status. The statuses can be any of ACTIVE , DISABLED and PASSIVE . Attributes Reference keys - (Computed) A list of keys that match the filter criteria. Each key has the following attributes: algorithm - Key algorithm (string) certificate - Key certificate (string) provider_id - Key provider ID (string) provider_priority - Key provider priority (int64) kid - Key ID (string) public_key - Key public key (string) status - Key status (string) type - Key type (string)","title":"keycloak\\_realm\\_keys Data Source"},{"location":"data-sources/realm_keys/#keycloak_realm_keys-data-source","text":"Use this data source to get the keys of a realm. Keys can be filtered by algorithm and status. Remarks: A key must meet all filter criteria This data source may return more than one value. If no key matches the filter criteria, then an error will be returned.","title":"keycloak_realm_keys Data Source"},{"location":"data-sources/realm_keys/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } data \"keycloak_realm_keys\" \"realm_keys\" { realm_id = keycloak_realm.realm algorithms = [\"AES\", \"RS256\"] status = [\"ACTIVE\", \"PASSIVE\"] } # show certificate of first key: output \"certificate\" { value = data.keycloak_realm_keys.realm_keys.keys[0].certificate }","title":"Example Usage"},{"location":"data-sources/realm_keys/#argument-reference","text":"realm_id - (Required) The realm from which the keys will be retrieved. algorithms - (Optional) When specified, keys will be filtered by algorithm. The algorithms can be any of HS256 , RS256 , AES , etc. status - (Optional) When specified, keys will be filtered by status. The statuses can be any of ACTIVE , DISABLED and PASSIVE .","title":"Argument Reference"},{"location":"data-sources/realm_keys/#attributes-reference","text":"keys - (Computed) A list of keys that match the filter criteria. Each key has the following attributes: algorithm - Key algorithm (string) certificate - Key certificate (string) provider_id - Key provider ID (string) provider_priority - Key provider priority (int64) kid - Key ID (string) public_key - Key public key (string) status - Key status (string) type - Key type (string)","title":"Attributes Reference"},{"location":"data-sources/role/","text":"keycloak_role Data Source This data source can be used to fetch properties of a Keycloak role for usage with other resources, such as keycloak_group_roles . Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } data \"keycloak_role\" \"offline_access\" { realm_id = keycloak_realm.realm.id name = \"offline_access\" } # use the data source resource \"keycloak_group\" \"group\" { realm_id = keycloak_realm.realm.id name = \"group\" } resource \"keycloak_group_roles\" \"group_roles\" { realm_id = keycloak_realm.realm.id group_id = keycloak_group.group.id role_ids = [ data.keycloak_role.offline_access.id ] } Argument Reference realm_id - (Required) The realm this role exists within. client_id - (Optional) When specified, this role is assumed to be a client role belonging to the client with the provided ID. The id attribute of a keycloak_client resource should be used here. name - (Required) The name of the role. Attributes Reference id - (Computed) The unique ID of the role, which can be used as an argument to other resources supported by this provider. description - (Computed) The description of the role.","title":"keycloak\\_role Data Source"},{"location":"data-sources/role/#keycloak_role-data-source","text":"This data source can be used to fetch properties of a Keycloak role for usage with other resources, such as keycloak_group_roles .","title":"keycloak_role Data Source"},{"location":"data-sources/role/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } data \"keycloak_role\" \"offline_access\" { realm_id = keycloak_realm.realm.id name = \"offline_access\" } # use the data source resource \"keycloak_group\" \"group\" { realm_id = keycloak_realm.realm.id name = \"group\" } resource \"keycloak_group_roles\" \"group_roles\" { realm_id = keycloak_realm.realm.id group_id = keycloak_group.group.id role_ids = [ data.keycloak_role.offline_access.id ] }","title":"Example Usage"},{"location":"data-sources/role/#argument-reference","text":"realm_id - (Required) The realm this role exists within. client_id - (Optional) When specified, this role is assumed to be a client role belonging to the client with the provided ID. The id attribute of a keycloak_client resource should be used here. name - (Required) The name of the role.","title":"Argument Reference"},{"location":"data-sources/role/#attributes-reference","text":"id - (Computed) The unique ID of the role, which can be used as an argument to other resources supported by this provider. description - (Computed) The description of the role.","title":"Attributes Reference"},{"location":"data-sources/saml_client_installation_provider/","text":"keycloak_saml_client_installation_provider Data Source This data source can be used to retrieve Installation Provider of a SAML Client. Example Usage In the example below, we extract the SAML metadata IDPSSODescriptor to pass it to the AWS IAM SAML Provider. resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_saml_client\" \"saml_client\" { realm_id = keycloak_realm.realm.id client_id = \"test-saml-client\" name = \"test-saml-client\" sign_documents = false sign_assertions = true include_authn_statement = true signing_certificate = file(\"saml-cert.pem\") signing_private_key = file(\"saml-key.pem\") } data \"keycloak_saml_client_installation_provider\" \"saml_idp_descriptor\" { realm_id = keycloak_realm.realm.id client_id = keycloak_saml_client.saml_client.id provider_id = \"saml-idp-descriptor\" } resource \"aws_iam_saml_provider\" \"default\" { name = \"myprovider\" saml_metadata_document = data.keycloak_saml_client_installation_provider.saml_idp_descriptor.value } Argument Reference realm_id - (Required) The realm that the SAML client exists within. client_id - (Required) The ID of the SAML client. The id attribute of a keycloak_client resource should be used here. provider_id - (Required) The ID of the SAML installation provider. Could be one of saml-idp-descriptor , keycloak-saml , saml-sp-descriptor , keycloak-saml-subsystem , mod-auth-mellon , etc. Attributes Reference id - (Computed) The hash of the value. value - (Computed) The returned document needed for SAML installation.","title":"keycloak\\_saml\\_client\\_installation\\_provider Data Source"},{"location":"data-sources/saml_client_installation_provider/#keycloak_saml_client_installation_provider-data-source","text":"This data source can be used to retrieve Installation Provider of a SAML Client.","title":"keycloak_saml_client_installation_provider Data Source"},{"location":"data-sources/saml_client_installation_provider/#example-usage","text":"In the example below, we extract the SAML metadata IDPSSODescriptor to pass it to the AWS IAM SAML Provider. resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_saml_client\" \"saml_client\" { realm_id = keycloak_realm.realm.id client_id = \"test-saml-client\" name = \"test-saml-client\" sign_documents = false sign_assertions = true include_authn_statement = true signing_certificate = file(\"saml-cert.pem\") signing_private_key = file(\"saml-key.pem\") } data \"keycloak_saml_client_installation_provider\" \"saml_idp_descriptor\" { realm_id = keycloak_realm.realm.id client_id = keycloak_saml_client.saml_client.id provider_id = \"saml-idp-descriptor\" } resource \"aws_iam_saml_provider\" \"default\" { name = \"myprovider\" saml_metadata_document = data.keycloak_saml_client_installation_provider.saml_idp_descriptor.value }","title":"Example Usage"},{"location":"data-sources/saml_client_installation_provider/#argument-reference","text":"realm_id - (Required) The realm that the SAML client exists within. client_id - (Required) The ID of the SAML client. The id attribute of a keycloak_client resource should be used here. provider_id - (Required) The ID of the SAML installation provider. Could be one of saml-idp-descriptor , keycloak-saml , saml-sp-descriptor , keycloak-saml-subsystem , mod-auth-mellon , etc.","title":"Argument Reference"},{"location":"data-sources/saml_client_installation_provider/#attributes-reference","text":"id - (Computed) The hash of the value. value - (Computed) The returned document needed for SAML installation.","title":"Attributes Reference"},{"location":"resources/attribute_importer_identity_provider_mapper/","text":"keycloak_attribute_importer_identity_provider_mapper Resource Allows for creating and managing an attribute importer identity provider mapper within Keycloak. The attribute importer mapper can be used to map attributes from externally defined users to attributes or properties of the imported Keycloak user: - For the OIDC identity provider, this will map a claim on the ID or access token to an attribute for the imported Keycloak user. - For the SAML identity provider, this will map a SAML attribute found within the assertion to an attribute for the imported Keycloak user. - For social identity providers, this will map a JSON field from the user profile to an attribute for the imported Keycloak user. ~> If you are using Keycloak 10 or higher, you will need to specify the extra_config argument in order to define a syncMode for the mapper. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_oidc_identity_provider\" \"oidc\" { realm = keycloak_realm.realm.id alias = \"oidc\" authorization_url = \"https://example.com/auth\" token_url = \"https://example.com/token\" client_id = \"example_id\" client_secret = \"example_token\" default_scopes = \"openid random profile\" } resource \"keycloak_attribute_importer_identity_provider_mapper\" \"oidc\" { realm = keycloak_realm.realm.id name = \"email-attribute-importer\" claim_name = \"my-email-claim\" identity_provider_alias = keycloak_oidc_identity_provider.oidc.alias user_attribute = \"email\" # extra_config with syncMode is required in Keycloak 10+ extra_config = { syncMode = \"INHERIT\" } } Argument Reference The following arguments are supported: realm - (Required) The name of the realm. name - (Required) The name of the mapper. identity_provider_alias - (Required) The alias of the associated identity provider. user_attribute - (Required) The user attribute or property name to store the mapped result. attribute_name - (Optional) For SAML based providers, this is the name of the attribute to search for in the assertion. Conflicts with attribute_friendly_name . attribute_friendly_name - (Optional) For SAML based providers, this is the friendly name of the attribute to search for in the assertion. Conflicts with attribute_name . claim_name - (Optional) For OIDC based providers, this is the name of the claim to use. extra_config - (Optional) Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features. Import Identity provider mappers can be imported using the format {{realm_id}}/{{idp_alias}}/{{idp_mapper_id}} , where idp_alias is the identity provider alias, and idp_mapper_id is the unique ID that Keycloak assigns to the mapper upon creation. This value can be found in the URI when editing this mapper in the GUI, and is typically a GUID. Example: $ terraform import keycloak_attribute_importer_identity_provider_mapper.test_mapper my-realm/my-mapper/f446db98-7133-4e30-b18a-3d28fde7ca1b","title":"keycloak\\_attribute\\_importer\\_identity\\_provider\\_mapper Resource"},{"location":"resources/attribute_importer_identity_provider_mapper/#keycloak_attribute_importer_identity_provider_mapper-resource","text":"Allows for creating and managing an attribute importer identity provider mapper within Keycloak. The attribute importer mapper can be used to map attributes from externally defined users to attributes or properties of the imported Keycloak user: - For the OIDC identity provider, this will map a claim on the ID or access token to an attribute for the imported Keycloak user. - For the SAML identity provider, this will map a SAML attribute found within the assertion to an attribute for the imported Keycloak user. - For social identity providers, this will map a JSON field from the user profile to an attribute for the imported Keycloak user. ~> If you are using Keycloak 10 or higher, you will need to specify the extra_config argument in order to define a syncMode for the mapper.","title":"keycloak_attribute_importer_identity_provider_mapper Resource"},{"location":"resources/attribute_importer_identity_provider_mapper/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_oidc_identity_provider\" \"oidc\" { realm = keycloak_realm.realm.id alias = \"oidc\" authorization_url = \"https://example.com/auth\" token_url = \"https://example.com/token\" client_id = \"example_id\" client_secret = \"example_token\" default_scopes = \"openid random profile\" } resource \"keycloak_attribute_importer_identity_provider_mapper\" \"oidc\" { realm = keycloak_realm.realm.id name = \"email-attribute-importer\" claim_name = \"my-email-claim\" identity_provider_alias = keycloak_oidc_identity_provider.oidc.alias user_attribute = \"email\" # extra_config with syncMode is required in Keycloak 10+ extra_config = { syncMode = \"INHERIT\" } }","title":"Example Usage"},{"location":"resources/attribute_importer_identity_provider_mapper/#argument-reference","text":"The following arguments are supported: realm - (Required) The name of the realm. name - (Required) The name of the mapper. identity_provider_alias - (Required) The alias of the associated identity provider. user_attribute - (Required) The user attribute or property name to store the mapped result. attribute_name - (Optional) For SAML based providers, this is the name of the attribute to search for in the assertion. Conflicts with attribute_friendly_name . attribute_friendly_name - (Optional) For SAML based providers, this is the friendly name of the attribute to search for in the assertion. Conflicts with attribute_name . claim_name - (Optional) For OIDC based providers, this is the name of the claim to use. extra_config - (Optional) Key/value attributes to add to the identity provider mapper model that is persisted to Keycloak. This can be used to extend the base model with new Keycloak features.","title":"Argument Reference"},{"location":"resources/attribute_importer_identity_provider_mapper/#import","text":"Identity provider mappers can be imported using the format {{realm_id}}/{{idp_alias}}/{{idp_mapper_id}} , where idp_alias is the identity provider alias, and idp_mapper_id is the unique ID that Keycloak assigns to the mapper upon creation. This value can be found in the URI when editing this mapper in the GUI, and is typically a GUID. Example: $ terraform import keycloak_attribute_importer_identity_provider_mapper.test_mapper my-realm/my-mapper/f446db98-7133-4e30-b18a-3d28fde7ca1b","title":"Import"},{"location":"resources/authentication_execution/","text":"keycloak_authentication_execution Resource Allows for creating and managing an authentication execution within Keycloak. An authentication execution is an action that the user or service may or may not take when authenticating through an authentication flow. ~> Due to limitations in the Keycloak API, the ordering of authentication executions within a flow must be specified using depends_on . Authentication executions that are created first will appear first within the flow. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_authentication_flow\" \"flow\" { realm_id = keycloak_realm.realm.id alias = \"my-flow-alias\" } # first execution resource \"keycloak_authentication_execution\" \"execution_one\" { realm_id = \"${keycloak_realm.realm.id}\" parent_flow_alias = \"${keycloak_authentication_flow.flow.alias}\" authenticator = \"auth-cookie\" requirement = \"ALTERNATIVE\" } # second execution resource \"keycloak_authentication_execution\" \"execution_two\" { realm_id = \"${keycloak_realm.realm.id}\" parent_flow_alias = \"${keycloak_authentication_flow.flow.alias}\" authenticator = \"identity-provider-redirector\" requirement = \"ALTERNATIVE\" depends_on = [ keycloak_authentication_execution.execution_one ] } Argument Reference realm_id - (Required) The realm the authentication execution exists in. parent_flow_alias - (Required) The alias of the flow this execution is attached to. authenticator - (Required) The name of the authenticator. This can be found by experimenting with the GUI and looking at HTTP requests within the network tab of your browser's development tools. requirement - (Optional) The requirement setting, which can be one of REQUIRED , ALTERNATIVE , OPTIONAL , CONDITIONAL , or DISABLED . Defaults to DISABLED . Import Authentication executions can be imported using the formats: {{realmId}}/{{parentFlowAlias}}/{{authenticationExecutionId}} . Example: $ terraform import keycloak_authentication_execution my-realm/my-flow/30559fcf-6fb8-45ea-8c46-2b86f46ebc17","title":"keycloak\\_authentication\\_execution Resource"},{"location":"resources/authentication_execution/#keycloak_authentication_execution-resource","text":"Allows for creating and managing an authentication execution within Keycloak. An authentication execution is an action that the user or service may or may not take when authenticating through an authentication flow. ~> Due to limitations in the Keycloak API, the ordering of authentication executions within a flow must be specified using depends_on . Authentication executions that are created first will appear first within the flow.","title":"keycloak_authentication_execution Resource"},{"location":"resources/authentication_execution/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_authentication_flow\" \"flow\" { realm_id = keycloak_realm.realm.id alias = \"my-flow-alias\" } # first execution resource \"keycloak_authentication_execution\" \"execution_one\" { realm_id = \"${keycloak_realm.realm.id}\" parent_flow_alias = \"${keycloak_authentication_flow.flow.alias}\" authenticator = \"auth-cookie\" requirement = \"ALTERNATIVE\" } # second execution resource \"keycloak_authentication_execution\" \"execution_two\" { realm_id = \"${keycloak_realm.realm.id}\" parent_flow_alias = \"${keycloak_authentication_flow.flow.alias}\" authenticator = \"identity-provider-redirector\" requirement = \"ALTERNATIVE\" depends_on = [ keycloak_authentication_execution.execution_one ] }","title":"Example Usage"},{"location":"resources/authentication_execution/#argument-reference","text":"realm_id - (Required) The realm the authentication execution exists in. parent_flow_alias - (Required) The alias of the flow this execution is attached to. authenticator - (Required) The name of the authenticator. This can be found by experimenting with the GUI and looking at HTTP requests within the network tab of your browser's development tools. requirement - (Optional) The requirement setting, which can be one of REQUIRED , ALTERNATIVE , OPTIONAL , CONDITIONAL , or DISABLED . Defaults to DISABLED .","title":"Argument Reference"},{"location":"resources/authentication_execution/#import","text":"Authentication executions can be imported using the formats: {{realmId}}/{{parentFlowAlias}}/{{authenticationExecutionId}} . Example: $ terraform import keycloak_authentication_execution my-realm/my-flow/30559fcf-6fb8-45ea-8c46-2b86f46ebc17","title":"Import"},{"location":"resources/authentication_execution_config/","text":"keycloak_authentication_execution_config Resource Allows for managing an authentication execution's configuration. If a particular authentication execution supports additional configuration (such as with the identity-provider-redirector execution), this can be managed with this resource. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_authentication_flow\" \"flow\" { realm_id = keycloak_realm.realm.id alias = \"my-flow-alias\" } resource \"keycloak_authentication_execution\" \"execution\" { realm_id = keycloak_realm.realm.id parent_flow_alias = keycloak_authentication_flow.flow.alias authenticator = \"identity-provider-redirector\" } resource \"keycloak_authentication_execution_config\" \"config\" { realm_id = keycloak_realm.realm.id execution_id = keycloak_authentication_execution.execution.id alias = \"my-config-alias\" config = { defaultProvider = \"my-config-default-idp\" } } Argument Reference realm_id - (Required) The realm the authentication execution exists in. execution_id - (Required) The authentication execution this configuration is attached to. alias - (Required) The name of the configuration. config - (Optional) The configuration. Keys are specific to each configurable authentication execution and not checked when applying. Import Configurations can be imported using the format {{realm}}/{{authenticationExecutionId}}/{{authenticationExecutionConfigId}} . If the authenticationExecutionId is incorrect, the import will still be successful. A subsequent apply will change the authenticationExecutionId to the correct one, which causes the configuration to be replaced. Example: $ terraform import keycloak_authentication_execution_config.config my-realm/be081463-ddbf-4b42-9eff-9c97886f24ff/30559fcf-6fb8-45ea-8c46-2b86f46ebc17","title":"keycloak\\_authentication\\_execution\\_config Resource"},{"location":"resources/authentication_execution_config/#keycloak_authentication_execution_config-resource","text":"Allows for managing an authentication execution's configuration. If a particular authentication execution supports additional configuration (such as with the identity-provider-redirector execution), this can be managed with this resource.","title":"keycloak_authentication_execution_config Resource"},{"location":"resources/authentication_execution_config/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_authentication_flow\" \"flow\" { realm_id = keycloak_realm.realm.id alias = \"my-flow-alias\" } resource \"keycloak_authentication_execution\" \"execution\" { realm_id = keycloak_realm.realm.id parent_flow_alias = keycloak_authentication_flow.flow.alias authenticator = \"identity-provider-redirector\" } resource \"keycloak_authentication_execution_config\" \"config\" { realm_id = keycloak_realm.realm.id execution_id = keycloak_authentication_execution.execution.id alias = \"my-config-alias\" config = { defaultProvider = \"my-config-default-idp\" } }","title":"Example Usage"},{"location":"resources/authentication_execution_config/#argument-reference","text":"realm_id - (Required) The realm the authentication execution exists in. execution_id - (Required) The authentication execution this configuration is attached to. alias - (Required) The name of the configuration. config - (Optional) The configuration. Keys are specific to each configurable authentication execution and not checked when applying.","title":"Argument Reference"},{"location":"resources/authentication_execution_config/#import","text":"Configurations can be imported using the format {{realm}}/{{authenticationExecutionId}}/{{authenticationExecutionConfigId}} . If the authenticationExecutionId is incorrect, the import will still be successful. A subsequent apply will change the authenticationExecutionId to the correct one, which causes the configuration to be replaced. Example: $ terraform import keycloak_authentication_execution_config.config my-realm/be081463-ddbf-4b42-9eff-9c97886f24ff/30559fcf-6fb8-45ea-8c46-2b86f46ebc17","title":"Import"},{"location":"resources/authentication_flow/","text":"keycloak_authentication_flow Resource Allows for creating and managing an authentication flow within Keycloak. Authentication flows describe a sequence of actions that a user or service must perform in order to be authenticated to Keycloak. The authentication flow itself is a container for these actions, which are otherwise known as executions. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_authentication_flow\" \"flow\" { realm_id = keycloak_realm.realm.id alias = \"my-flow-alias\" } resource \"keycloak_authentication_execution\" \"execution\" { realm_id = keycloak_realm.realm.id parent_flow_alias = keycloak_authentication_flow.flow.alias authenticator = \"identity-provider-redirector\" requirement = \"REQUIRED\" } Argument Reference realm_id - (Required) The realm that the authentication flow exists in. alias - (Required) The alias for this authentication flow. description - (Optional) A description for the authentication flow. provider_id - (Optional) The type of authentication flow to create. Valid choices include basic-flow and client-flow . Defaults to basic-flow . Import Authentication flows can be imported using the format {{realmId}}/{{authenticationFlowId}} . The authentication flow ID is typically a GUID which is autogenerated when the flow is created via Keycloak. Unfortunately, it is not trivial to retrieve the authentication flow ID from the UI. The best way to do this is to visit the \"Authentication\" page in Keycloak, and use the network tab of your browser to view the response of the API call to /auth/admin/realms/${realm}/authentication/flows , which will be a list of authentication flows. Example: $ terraform import keycloak_authentication_flow.flow my-realm/e9a5641e-778c-4daf-89c0-f4ef617987d1","title":"keycloak\\_authentication\\_flow Resource"},{"location":"resources/authentication_flow/#keycloak_authentication_flow-resource","text":"Allows for creating and managing an authentication flow within Keycloak. Authentication flows describe a sequence of actions that a user or service must perform in order to be authenticated to Keycloak. The authentication flow itself is a container for these actions, which are otherwise known as executions.","title":"keycloak_authentication_flow Resource"},{"location":"resources/authentication_flow/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_authentication_flow\" \"flow\" { realm_id = keycloak_realm.realm.id alias = \"my-flow-alias\" } resource \"keycloak_authentication_execution\" \"execution\" { realm_id = keycloak_realm.realm.id parent_flow_alias = keycloak_authentication_flow.flow.alias authenticator = \"identity-provider-redirector\" requirement = \"REQUIRED\" }","title":"Example Usage"},{"location":"resources/authentication_flow/#argument-reference","text":"realm_id - (Required) The realm that the authentication flow exists in. alias - (Required) The alias for this authentication flow. description - (Optional) A description for the authentication flow. provider_id - (Optional) The type of authentication flow to create. Valid choices include basic-flow and client-flow . Defaults to basic-flow .","title":"Argument Reference"},{"location":"resources/authentication_flow/#import","text":"Authentication flows can be imported using the format {{realmId}}/{{authenticationFlowId}} . The authentication flow ID is typically a GUID which is autogenerated when the flow is created via Keycloak. Unfortunately, it is not trivial to retrieve the authentication flow ID from the UI. The best way to do this is to visit the \"Authentication\" page in Keycloak, and use the network tab of your browser to view the response of the API call to /auth/admin/realms/${realm}/authentication/flows , which will be a list of authentication flows. Example: $ terraform import keycloak_authentication_flow.flow my-realm/e9a5641e-778c-4daf-89c0-f4ef617987d1","title":"Import"},{"location":"resources/custom_user_federation/","text":"keycloak_custom_user_federation Resource Allows for creating and managing custom user federation providers within Keycloak. A custom user federation provider is an implementation of Keycloak's User Storage SPI . An example of this implementation can be found here . Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_custom_user_federation\" \"custom_user_federation\" { name = \"custom\" realm_id = keycloak_realm.realm.id provider_id = \"custom\" enabled = true config = { dummyString = \"foobar\" dummyBool = true } } Argument Reference realm_id - (Required) The realm that this provider will provide user federation for. name - (Required) Display name of the provider when displayed in the console. provider_id - (Required) The unique ID of the custom provider, specified in the getId implementation for the UserStorageProviderFactory interface. enabled - (Optional) When false , this provider will not be used when performing queries for users. Defaults to true . priority - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to 0 . cache_policy - (Optional) Can be one of DEFAULT , EVICT_DAILY , EVICT_WEEKLY , MAX_LIFESPAN , or NO_CACHE . Defaults to DEFAULT . parent_id - (Optional) Must be set to the realms' internal_id when it differs from the realm. This can happen when existing resources are imported into the state. config - (Optional) The provider configuration handed over to your custom user federation provider. Import Custom user federation providers can be imported using the format {{realm_id}}/{{custom_user_federation_id}} . The ID of the custom user federation provider can be found within the Keycloak GUI and is typically a GUID: $ terraform import keycloak_custom_user_federation.custom_user_federation my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860","title":"keycloak\\_custom\\_user\\_federation Resource"},{"location":"resources/custom_user_federation/#keycloak_custom_user_federation-resource","text":"Allows for creating and managing custom user federation providers within Keycloak. A custom user federation provider is an implementation of Keycloak's User Storage SPI . An example of this implementation can be found here .","title":"keycloak_custom_user_federation Resource"},{"location":"resources/custom_user_federation/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_custom_user_federation\" \"custom_user_federation\" { name = \"custom\" realm_id = keycloak_realm.realm.id provider_id = \"custom\" enabled = true config = { dummyString = \"foobar\" dummyBool = true } }","title":"Example Usage"},{"location":"resources/custom_user_federation/#argument-reference","text":"realm_id - (Required) The realm that this provider will provide user federation for. name - (Required) Display name of the provider when displayed in the console. provider_id - (Required) The unique ID of the custom provider, specified in the getId implementation for the UserStorageProviderFactory interface. enabled - (Optional) When false , this provider will not be used when performing queries for users. Defaults to true . priority - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to 0 . cache_policy - (Optional) Can be one of DEFAULT , EVICT_DAILY , EVICT_WEEKLY , MAX_LIFESPAN , or NO_CACHE . Defaults to DEFAULT . parent_id - (Optional) Must be set to the realms' internal_id when it differs from the realm. This can happen when existing resources are imported into the state. config - (Optional) The provider configuration handed over to your custom user federation provider.","title":"Argument Reference"},{"location":"resources/custom_user_federation/#import","text":"Custom user federation providers can be imported using the format {{realm_id}}/{{custom_user_federation_id}} . The ID of the custom user federation provider can be found within the Keycloak GUI and is typically a GUID: $ terraform import keycloak_custom_user_federation.custom_user_federation my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860","title":"Import"},{"location":"resources/default_groups/","text":"keycloak_default_groups Resource Allows for managing a realm's default groups. ~> You should not use keycloak_default_groups with a group whose members are managed by keycloak_group_memberships . Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_group\" \"group\" { realm_id = keycloak_realm.realm.id name = \"my-group\" } resource \"keycloak_default_groups\" \"default\" { realm_id = keycloak_realm.realm.id group_ids = [ keycloak_group.group.id ] } Argument Reference realm_id - (Required) The realm this group exists in. group_ids - (Required) A set of group ids that should be default groups on the realm referenced by realm_id . Import Default groups can be imported using the format {{realm_id}} where realm_id is the realm the group exists in. Example: $ terraform import keycloak_default_groups.default my-realm","title":"keycloak\\_default\\_groups Resource"},{"location":"resources/default_groups/#keycloak_default_groups-resource","text":"Allows for managing a realm's default groups. ~> You should not use keycloak_default_groups with a group whose members are managed by keycloak_group_memberships .","title":"keycloak_default_groups Resource"},{"location":"resources/default_groups/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_group\" \"group\" { realm_id = keycloak_realm.realm.id name = \"my-group\" } resource \"keycloak_default_groups\" \"default\" { realm_id = keycloak_realm.realm.id group_ids = [ keycloak_group.group.id ] }","title":"Example Usage"},{"location":"resources/default_groups/#argument-reference","text":"realm_id - (Required) The realm this group exists in. group_ids - (Required) A set of group ids that should be default groups on the realm referenced by realm_id .","title":"Argument Reference"},{"location":"resources/default_groups/#import","text":"Default groups can be imported using the format {{realm_id}} where realm_id is the realm the group exists in. Example: $ terraform import keycloak_default_groups.default my-realm","title":"Import"},{"location":"resources/generic_client_protocol_mapper/","text":"keycloak_generic_client_protocol_mapper Resource Allows for creating and managing protocol mappers for both types of clients (openid-connect and saml) within Keycloak. There are two uses cases for using this resource: * If you implemented a custom protocol mapper, this resource can be used to configure it * If the provider doesn't support a particular protocol mapper, this resource can be used instead. Due to the generic nature of this mapper, it is less user-friendly and more prone to configuration errors. Therefore, if possible, a specific mapper should be used. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_saml_client\" \"saml_client\" { realm_id = keycloak_realm.realm.id client_id = \"test-client\" } resource \"keycloak_generic_client_protocol_mapper\" \"saml_hardcode_attribute_mapper\" { realm_id = keycloak_realm.realm.id client_id = keycloak_saml_client.saml_client.id name = \"test-mapper\" protocol = \"saml\" protocol_mapper = \"saml-hardcode-attribute-mapper\" config = { \"attribute.name\" = \"name\" \"attribute.nameformat\" = \"Basic\" \"attribute.value\" = \"value\" \"friendly.name\" = \"display name\" } } Argument Reference realm_id - (Required) The realm this protocol mapper exists within. client_id - (Required) The client this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. protocol - (Required) The type of client (either openid-connect or saml ). The type must match the type of the client. protocol_mapper - (Required) The name of the protocol mapper. The protocol mapper must be compatible with the specified client. config - (Required) A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper. Import Protocol mappers can be imported using the following format: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_generic_client_protocol_mapper.saml_hardcode_attribute_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"keycloak\\_generic\\_client\\_protocol\\_mapper Resource"},{"location":"resources/generic_client_protocol_mapper/#keycloak_generic_client_protocol_mapper-resource","text":"Allows for creating and managing protocol mappers for both types of clients (openid-connect and saml) within Keycloak. There are two uses cases for using this resource: * If you implemented a custom protocol mapper, this resource can be used to configure it * If the provider doesn't support a particular protocol mapper, this resource can be used instead. Due to the generic nature of this mapper, it is less user-friendly and more prone to configuration errors. Therefore, if possible, a specific mapper should be used.","title":"keycloak_generic_client_protocol_mapper Resource"},{"location":"resources/generic_client_protocol_mapper/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_saml_client\" \"saml_client\" { realm_id = keycloak_realm.realm.id client_id = \"test-client\" } resource \"keycloak_generic_client_protocol_mapper\" \"saml_hardcode_attribute_mapper\" { realm_id = keycloak_realm.realm.id client_id = keycloak_saml_client.saml_client.id name = \"test-mapper\" protocol = \"saml\" protocol_mapper = \"saml-hardcode-attribute-mapper\" config = { \"attribute.name\" = \"name\" \"attribute.nameformat\" = \"Basic\" \"attribute.value\" = \"value\" \"friendly.name\" = \"display name\" } }","title":"Example Usage"},{"location":"resources/generic_client_protocol_mapper/#argument-reference","text":"realm_id - (Required) The realm this protocol mapper exists within. client_id - (Required) The client this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. protocol - (Required) The type of client (either openid-connect or saml ). The type must match the type of the client. protocol_mapper - (Required) The name of the protocol mapper. The protocol mapper must be compatible with the specified client. config - (Required) A map with key / value pairs for configuring the protocol mapper. The supported keys depends on the protocol mapper.","title":"Argument Reference"},{"location":"resources/generic_client_protocol_mapper/#import","text":"Protocol mappers can be imported using the following format: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_generic_client_protocol_mapper.saml_hardcode_attribute_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"Import"},{"location":"resources/generic_client_role_mapper/","text":"keycloak_generic_client_role_mapper Resource Allow for creating and managing a client's scope mappings within Keycloak. By default, all the user role mappings of the user are added as claims within the token (OIDC) or assertion (SAML). When full_scope_allowed is set to false for a client, role scope mapping allows you to limit the roles that get declared inside an access token for a client. Example Usage (Realm Role to Client) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id client_id = \"client\" name = \"client\" enabled = true access_type = \"BEARER-ONLY\" } resource \"keycloak_role\" \"realm_role\" { realm_id = keycloak_realm.realm.id name = \"my-realm-role\" description = \"My Realm Role\" } resource \"keycloak_generic_client_role_mapper\" \"client_role_mapper\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client.id role_id = keycloak_role.realm_role.id } Example Usage (Client Role to Client) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client_a\" { realm_id = keycloak_realm.realm.id client_id = \"client-a\" name = \"client-a\" enabled = true access_type = \"BEARER-ONLY\" // disable full scope, roles are assigned via keycloak_generic_client_role_mapper full_scope_allowed = false } resource \"keycloak_role\" \"client_role_a\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client_a.id name = \"my-client-role\" description = \"My Client Role\" } resource \"keycloak_openid_client\" \"client_b\" { realm_id = keycloak_realm.realm.id client_id = \"client-b\" name = \"client-b\" enabled = true access_type = \"BEARER-ONLY\" } resource \"keycloak_role\" \"client_role_b\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client_b.id name = \"my-client-role\" description = \"My Client Role\" } resource \"keycloak_generic_client_role_mapper\" \"client_b_role_mapper\" { realm_id = keycloak_realm.realm.id client_id = keycloak_client.client_b.id role_id = keycloak_role.client_role_a.id } Example Usage (Realm Role to Client Scope) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = keycloak_realm.realm.id name = \"my-client-scope\" } resource \"keycloak_role\" \"realm_role\" { realm_id = keycloak_realm.realm.id name = \"my-realm-role\" description = \"My Realm Role\" } resource \"keycloak_generic_client_role_mapper\" \"client_role_mapper\" { realm_id = keycloak_realm.realm.id client_scope_id = keycloak_openid_client_scope.client_scope.id role_id = keycloak_role.realm_role.id } Example Usage (Client Role to Client Scope) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id client_id = \"client\" name = \"client\" enabled = true access_type = \"BEARER-ONLY\" } resource \"keycloak_role\" \"client_role\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client.id name = \"my-client-role\" description = \"My Client Role\" } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = keycloak_realm.realm.id name = \"my-client-scope\" } resource \"keycloak_generic_client_role_mapper\" \"client_b_role_mapper\" { realm_id = keycloak_realm.realm.id client_scope_id = keycloak_client_scope.client_scope.id role_id = keycloak_role.client_role.id } Argument Reference realm_id - (Required) The realm this role mapper exists within. client_id - (Optional) The ID of the client this role mapper should be added to. Conflicts with client_scope_id . This argument is required if client_scope_id is not set. client_scope_id - (Optional) The ID of the client scope this role mapper should be added to. Conflicts with client_id . This argument is required if client_id is not set. role_id - (Required) The ID of the role to be added to this role mapper. Import Generic client role mappers can be imported using one of the following two formats: When mapping a role to a client, use the format {{realmId}}/client/{{clientId}}/{{roleId} When mapping a role to a client scope, use the format {{realmId}}/client-scope/{{clientScopeId}}/{{roleId}} Example: $ terraform import keycloak_generic_client_role_mapper.client_role_mapper my-realm/client/23888550-5dcd-41f6-85ba-554233021e9c/ce51f004-bdfb-4dd5-a963-c4487d2dec5b","title":"keycloak\\_generic\\_client\\_role\\_mapper Resource"},{"location":"resources/generic_client_role_mapper/#keycloak_generic_client_role_mapper-resource","text":"Allow for creating and managing a client's scope mappings within Keycloak. By default, all the user role mappings of the user are added as claims within the token (OIDC) or assertion (SAML). When full_scope_allowed is set to false for a client, role scope mapping allows you to limit the roles that get declared inside an access token for a client.","title":"keycloak_generic_client_role_mapper Resource"},{"location":"resources/generic_client_role_mapper/#example-usage-realm-role-to-client","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id client_id = \"client\" name = \"client\" enabled = true access_type = \"BEARER-ONLY\" } resource \"keycloak_role\" \"realm_role\" { realm_id = keycloak_realm.realm.id name = \"my-realm-role\" description = \"My Realm Role\" } resource \"keycloak_generic_client_role_mapper\" \"client_role_mapper\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client.id role_id = keycloak_role.realm_role.id }","title":"Example Usage (Realm Role to Client)"},{"location":"resources/generic_client_role_mapper/#example-usage-client-role-to-client","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client_a\" { realm_id = keycloak_realm.realm.id client_id = \"client-a\" name = \"client-a\" enabled = true access_type = \"BEARER-ONLY\" // disable full scope, roles are assigned via keycloak_generic_client_role_mapper full_scope_allowed = false } resource \"keycloak_role\" \"client_role_a\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client_a.id name = \"my-client-role\" description = \"My Client Role\" } resource \"keycloak_openid_client\" \"client_b\" { realm_id = keycloak_realm.realm.id client_id = \"client-b\" name = \"client-b\" enabled = true access_type = \"BEARER-ONLY\" } resource \"keycloak_role\" \"client_role_b\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client_b.id name = \"my-client-role\" description = \"My Client Role\" } resource \"keycloak_generic_client_role_mapper\" \"client_b_role_mapper\" { realm_id = keycloak_realm.realm.id client_id = keycloak_client.client_b.id role_id = keycloak_role.client_role_a.id }","title":"Example Usage (Client Role to Client)"},{"location":"resources/generic_client_role_mapper/#example-usage-realm-role-to-client-scope","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = keycloak_realm.realm.id name = \"my-client-scope\" } resource \"keycloak_role\" \"realm_role\" { realm_id = keycloak_realm.realm.id name = \"my-realm-role\" description = \"My Realm Role\" } resource \"keycloak_generic_client_role_mapper\" \"client_role_mapper\" { realm_id = keycloak_realm.realm.id client_scope_id = keycloak_openid_client_scope.client_scope.id role_id = keycloak_role.realm_role.id }","title":"Example Usage (Realm Role to Client Scope)"},{"location":"resources/generic_client_role_mapper/#example-usage-client-role-to-client-scope","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id client_id = \"client\" name = \"client\" enabled = true access_type = \"BEARER-ONLY\" } resource \"keycloak_role\" \"client_role\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client.id name = \"my-client-role\" description = \"My Client Role\" } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = keycloak_realm.realm.id name = \"my-client-scope\" } resource \"keycloak_generic_client_role_mapper\" \"client_b_role_mapper\" { realm_id = keycloak_realm.realm.id client_scope_id = keycloak_client_scope.client_scope.id role_id = keycloak_role.client_role.id }","title":"Example Usage (Client Role to Client Scope)"},{"location":"resources/generic_client_role_mapper/#argument-reference","text":"realm_id - (Required) The realm this role mapper exists within. client_id - (Optional) The ID of the client this role mapper should be added to. Conflicts with client_scope_id . This argument is required if client_scope_id is not set. client_scope_id - (Optional) The ID of the client scope this role mapper should be added to. Conflicts with client_id . This argument is required if client_id is not set. role_id - (Required) The ID of the role to be added to this role mapper.","title":"Argument Reference"},{"location":"resources/generic_client_role_mapper/#import","text":"Generic client role mappers can be imported using one of the following two formats: When mapping a role to a client, use the format {{realmId}}/client/{{clientId}}/{{roleId} When mapping a role to a client scope, use the format {{realmId}}/client-scope/{{clientScopeId}}/{{roleId}} Example: $ terraform import keycloak_generic_client_role_mapper.client_role_mapper my-realm/client/23888550-5dcd-41f6-85ba-554233021e9c/ce51f004-bdfb-4dd5-a963-c4487d2dec5b","title":"Import"},{"location":"resources/group/","text":"keycloak_group Resource Allows for creating and managing Groups within Keycloak. Groups provide a logical wrapping for users within Keycloak. Users within a group can share attributes and roles, and group membership can be mapped to a claim. Attributes can also be defined on Groups. Groups can also be federated from external data sources, such as LDAP or Active Directory. This resource should not be used to manage groups that were created this way. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_group\" \"parent_group\" { realm_id = keycloak_realm.realm.id name = \"parent-group\" } resource \"keycloak_group\" \"child_group\" { realm_id = keycloak_realm.realm.id parent_id = keycloak_group.parent_group.id name = \"child-group\" } resource \"keycloak_group\" \"child_group_with_optional_attributes\" { realm_id = keycloak_realm.realm.id parent_id = keycloak_group.parent_group.id name = \"child-group-with-optional-attributes\" attributes = { \"key1\" = \"value1\" \"key2\" = \"value2\" } } Argument Reference realm_id - (Required) The realm this group exists in. parent_id - (Optional) The ID of this group's parent. If omitted, this group will be defined at the root level. name - (Required) The name of the group. attributes - (Optional) A map of key/value pairs to set as custom attributes for the group. Attributes Reference path - (Computed) The complete path of the group. For example, the child group's path in the example configuration would be /parent-group/child-group . Import Groups can be imported using the format {{realm_id}}/{{group_id}} , where group_id is the unique ID that Keycloak assigns to the group upon creation. This value can be found in the URI when editing this group in the GUI, and is typically a GUID. Example: $ terraform import keycloak_group.child_group my-realm/934a4a4e-28bd-4703-a0fa-332df153aabd","title":"keycloak\\_group Resource"},{"location":"resources/group/#keycloak_group-resource","text":"Allows for creating and managing Groups within Keycloak. Groups provide a logical wrapping for users within Keycloak. Users within a group can share attributes and roles, and group membership can be mapped to a claim. Attributes can also be defined on Groups. Groups can also be federated from external data sources, such as LDAP or Active Directory. This resource should not be used to manage groups that were created this way.","title":"keycloak_group Resource"},{"location":"resources/group/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_group\" \"parent_group\" { realm_id = keycloak_realm.realm.id name = \"parent-group\" } resource \"keycloak_group\" \"child_group\" { realm_id = keycloak_realm.realm.id parent_id = keycloak_group.parent_group.id name = \"child-group\" } resource \"keycloak_group\" \"child_group_with_optional_attributes\" { realm_id = keycloak_realm.realm.id parent_id = keycloak_group.parent_group.id name = \"child-group-with-optional-attributes\" attributes = { \"key1\" = \"value1\" \"key2\" = \"value2\" } }","title":"Example Usage"},{"location":"resources/group/#argument-reference","text":"realm_id - (Required) The realm this group exists in. parent_id - (Optional) The ID of this group's parent. If omitted, this group will be defined at the root level. name - (Required) The name of the group. attributes - (Optional) A map of key/value pairs to set as custom attributes for the group.","title":"Argument Reference"},{"location":"resources/group/#attributes-reference","text":"path - (Computed) The complete path of the group. For example, the child group's path in the example configuration would be /parent-group/child-group .","title":"Attributes Reference"},{"location":"resources/group/#import","text":"Groups can be imported using the format {{realm_id}}/{{group_id}} , where group_id is the unique ID that Keycloak assigns to the group upon creation. This value can be found in the URI when editing this group in the GUI, and is typically a GUID. Example: $ terraform import keycloak_group.child_group my-realm/934a4a4e-28bd-4703-a0fa-332df153aabd","title":"Import"},{"location":"resources/group_memberships/","text":"keycloak_group_memberships Resource Allows for managing a Keycloak group's members. Note that this resource attempts to be an authoritative source over group members. When this resource takes control over a group's members, users that are manually added to the group will be removed, and users that are manually removed from the group will be added upon the next run of terraform apply . Also note that you should not use keycloak_group_memberships with a group has been assigned as a default group via keycloak_default_groups . This resource should not be used to control membership of a group that has its members federated from an external source via group mapping. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_group\" \"group\" { realm_id = keycloak_realm.realm.id name = \"my-group\" } resource \"keycloak_user\" \"user\" { realm_id = keycloak_realm.realm.id username = \"my-user\" } resource \"keycloak_group_memberships\" \"group_members\" { realm_id = keycloak_realm.realm.id group_id = keycloak_group.group.id members = [ keycloak_user.user.username ] } Argument Reference realm_id - (Required) The realm this group exists in. group_id - (Required) The ID of the group this resource should manage memberships for. members - (Required) A list of usernames that belong to this group. Import This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.","title":"keycloak\\_group\\_memberships Resource"},{"location":"resources/group_memberships/#keycloak_group_memberships-resource","text":"Allows for managing a Keycloak group's members. Note that this resource attempts to be an authoritative source over group members. When this resource takes control over a group's members, users that are manually added to the group will be removed, and users that are manually removed from the group will be added upon the next run of terraform apply . Also note that you should not use keycloak_group_memberships with a group has been assigned as a default group via keycloak_default_groups . This resource should not be used to control membership of a group that has its members federated from an external source via group mapping.","title":"keycloak_group_memberships Resource"},{"location":"resources/group_memberships/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_group\" \"group\" { realm_id = keycloak_realm.realm.id name = \"my-group\" } resource \"keycloak_user\" \"user\" { realm_id = keycloak_realm.realm.id username = \"my-user\" } resource \"keycloak_group_memberships\" \"group_members\" { realm_id = keycloak_realm.realm.id group_id = keycloak_group.group.id members = [ keycloak_user.user.username ] }","title":"Example Usage"},{"location":"resources/group_memberships/#argument-reference","text":"realm_id - (Required) The realm this group exists in. group_id - (Required) The ID of the group this resource should manage memberships for. members - (Required) A list of usernames that belong to this group.","title":"Argument Reference"},{"location":"resources/group_memberships/#import","text":"This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.","title":"Import"},{"location":"resources/group_roles/","text":"keycloak_group_roles Resource Allows you to manage roles assigned to a Keycloak group. Note that this resource attempts to be an authoritative source over group roles. When this resource takes control over a group's roles, roles that are manually added to the group will be removed, and roles that are manually removed from the group will be added upon the next run of terraform apply . Note that when assigning composite roles to a group, you may see a non-empty plan following a terraform apply if you assign a role and a composite that includes that role to the same group. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_role\" \"realm_role\" { realm_id = keycloak_realm.realm.id name = \"my-realm-role\" description = \"My Realm Role\" } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id client_id = \"client\" name = \"client\" enabled = true access_type = \"BEARER-ONLY\" } resource \"keycloak_role\" \"client_role\" { realm_id = keycloak_realm.realm.id client_id = keycloak_client.client.id name = \"my-client-role\" description = \"My Client Role\" } resource \"keycloak_group\" \"group\" { realm_id = keycloak_realm.realm.id name = \"my-group\" } resource \"keycloak_group_roles\" \"group_roles\" { realm_id = keycloak_realm.realm.id group_id = keycloak_group.group.id role_ids = [ keycloak_role.realm_role.id, keycloak_role.client_role.id, ] } Argument Reference realm_id - (Required) The realm this group exists in. group_id - (Required) The ID of the group this resource should manage roles for. role_ids - (Required) A list of role IDs to map to the group Import This resource can be imported using the format {{realm_id}}/{{group_id}} , where group_id is the unique ID that Keycloak assigns to the group upon creation. This value can be found in the URI when editing this group in the GUI, and is typically a GUID. Example: $ terraform import keycloak_group_roles.group_roles my-realm/18cc6b87-2ce7-4e59-bdc8-b9d49ec98a94","title":"keycloak\\_group\\_roles Resource"},{"location":"resources/group_roles/#keycloak_group_roles-resource","text":"Allows you to manage roles assigned to a Keycloak group. Note that this resource attempts to be an authoritative source over group roles. When this resource takes control over a group's roles, roles that are manually added to the group will be removed, and roles that are manually removed from the group will be added upon the next run of terraform apply . Note that when assigning composite roles to a group, you may see a non-empty plan following a terraform apply if you assign a role and a composite that includes that role to the same group.","title":"keycloak_group_roles Resource"},{"location":"resources/group_roles/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_role\" \"realm_role\" { realm_id = keycloak_realm.realm.id name = \"my-realm-role\" description = \"My Realm Role\" } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id client_id = \"client\" name = \"client\" enabled = true access_type = \"BEARER-ONLY\" } resource \"keycloak_role\" \"client_role\" { realm_id = keycloak_realm.realm.id client_id = keycloak_client.client.id name = \"my-client-role\" description = \"My Client Role\" } resource \"keycloak_group\" \"group\" { realm_id = keycloak_realm.realm.id name = \"my-group\" } resource \"keycloak_group_roles\" \"group_roles\" { realm_id = keycloak_realm.realm.id group_id = keycloak_group.group.id role_ids = [ keycloak_role.realm_role.id, keycloak_role.client_role.id, ] }","title":"Example Usage"},{"location":"resources/group_roles/#argument-reference","text":"realm_id - (Required) The realm this group exists in. group_id - (Required) The ID of the group this resource should manage roles for. role_ids - (Required) A list of role IDs to map to the group","title":"Argument Reference"},{"location":"resources/group_roles/#import","text":"This resource can be imported using the format {{realm_id}}/{{group_id}} , where group_id is the unique ID that Keycloak assigns to the group upon creation. This value can be found in the URI when editing this group in the GUI, and is typically a GUID. Example: $ terraform import keycloak_group_roles.group_roles my-realm/18cc6b87-2ce7-4e59-bdc8-b9d49ec98a94","title":"Import"},{"location":"resources/identity_provider_token_exchange_scope_permission/","text":"keycloak_identity_provider_token_exchange_scope_permission Resource Allows you to manage Identity Provider \"Token exchange\" Scope Based Permissions. This is part of a preview keycloak feature. You need to enable this feature to be able to use this resource. More information about enabling the preview feature can be found here: https://www.keycloak.org/docs/latest/securing_apps/index.html#_token-exchange When enabling Identity Provider Permissions, Keycloak does several things automatically: 1. Enable Authorization on build-in realm-management client 1. Create a \"token-exchange\" scope 1. Create a resource representing the identity provider 1. Create a scope based permission for the \"token-exchange\" scope and identity provider resource The only thing that is missing is a policy set on the permission. As the policy lives within the context of the realm-management client, you cannot create a policy resource and link to from with your .tf file. This would also cause an implicit cycle dependency. Thus, the only way to manage this in terraform is to create and manage the policy internally from within this terraform resource itself. At the moment only a client policy type is supported. The client policy will automatically be created for the clients parameter. Example Usage resource \"keycloak_realm\" \"token_exchange_realm\" { realm = \"token-exchange_destination_realm\" enabled = true } resource \"keycloak_oidc_identity_provider\" \"token_exchange_my_oidc_idp\" { realm = keycloak_realm.token_exchange_realm.id alias = \"myIdp\" authorization_url = \"http://localhost:8080/auth/realms/someRealm/protocol/openid-connect/auth\" token_url = \"http://localhost:8080/auth/realms/someRealm/protocol/openid-connect/token\" client_id = \"clientId\" client_secret = \"secret\" default_scopes = \"openid\" } resource \"keycloak_openid_client\" \"token-exchange_webapp_client\" { realm_id = keycloak_realm.token_exchange_realm.id name = \"webapp_client\" client_id = \"webapp_client\" client_secret = \"secret\" description = \"a webapp client on the destination realm\" access_type = \"CONFIDENTIAL\" standard_flow_enabled = true valid_redirect_uris = [ \"http://localhost:8080/*\", ] } //relevant part resource \"keycloak_identity_provider_token_exchange_scope_permission\" \"oidc_idp_permission\" { realm_id = keycloak_realm.token_exchange_realm.id provider_alias = keycloak_oidc_identity_provider.token_exchange_my_oidc_idp.alias policy_type = \"client\" clients = [ keycloak_openid_client.token-exchange_webapp_client.id ] } Argument Reference realm_id - (Required) The realm that the identity provider exists in. provider_alias - (Required) Alias of the identity provider. policy_type - (Optional) Defaults to \"client\" This is also the only value policy type supported by this provider. clients - (Required) A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission. Attributes Reference policy_id - (Computed) Policy ID that will be set on the scope based token exchange permission automatically created by enabling permissions on the reference identity provider. authorization_resource_server_id - (Computed) Resource server ID representing the realm management client on which this permission is managed. authorization_idp_resource_id - (Computed) Resource ID representing the identity provider, this automatically created by keycloak. authorization_token_exchange_scope_permission_id - (Computed) Permission ID representing the Permission with scope 'Token Exchange' and the resource 'authorization_idp_resource_id', this automatically created by keycloak, the policy ID will be set on this permission. Import This resource can be imported using the format {{realm_id}}/{{provider_alias}} , where provider_alias is the alias that you assign to the identity provider upon creation. Example: $ terraform import keycloak_identity_provider_token_exchange_scope_permission.oidc_idp_permission my-realm/myIdp","title":"keycloak\\_identity\\_provider\\_token\\_exchange\\_scope\\_permission Resource"},{"location":"resources/identity_provider_token_exchange_scope_permission/#keycloak_identity_provider_token_exchange_scope_permission-resource","text":"Allows you to manage Identity Provider \"Token exchange\" Scope Based Permissions. This is part of a preview keycloak feature. You need to enable this feature to be able to use this resource. More information about enabling the preview feature can be found here: https://www.keycloak.org/docs/latest/securing_apps/index.html#_token-exchange When enabling Identity Provider Permissions, Keycloak does several things automatically: 1. Enable Authorization on build-in realm-management client 1. Create a \"token-exchange\" scope 1. Create a resource representing the identity provider 1. Create a scope based permission for the \"token-exchange\" scope and identity provider resource The only thing that is missing is a policy set on the permission. As the policy lives within the context of the realm-management client, you cannot create a policy resource and link to from with your .tf file. This would also cause an implicit cycle dependency. Thus, the only way to manage this in terraform is to create and manage the policy internally from within this terraform resource itself. At the moment only a client policy type is supported. The client policy will automatically be created for the clients parameter.","title":"keycloak_identity_provider_token_exchange_scope_permission Resource"},{"location":"resources/identity_provider_token_exchange_scope_permission/#example-usage","text":"resource \"keycloak_realm\" \"token_exchange_realm\" { realm = \"token-exchange_destination_realm\" enabled = true } resource \"keycloak_oidc_identity_provider\" \"token_exchange_my_oidc_idp\" { realm = keycloak_realm.token_exchange_realm.id alias = \"myIdp\" authorization_url = \"http://localhost:8080/auth/realms/someRealm/protocol/openid-connect/auth\" token_url = \"http://localhost:8080/auth/realms/someRealm/protocol/openid-connect/token\" client_id = \"clientId\" client_secret = \"secret\" default_scopes = \"openid\" } resource \"keycloak_openid_client\" \"token-exchange_webapp_client\" { realm_id = keycloak_realm.token_exchange_realm.id name = \"webapp_client\" client_id = \"webapp_client\" client_secret = \"secret\" description = \"a webapp client on the destination realm\" access_type = \"CONFIDENTIAL\" standard_flow_enabled = true valid_redirect_uris = [ \"http://localhost:8080/*\", ] } //relevant part resource \"keycloak_identity_provider_token_exchange_scope_permission\" \"oidc_idp_permission\" { realm_id = keycloak_realm.token_exchange_realm.id provider_alias = keycloak_oidc_identity_provider.token_exchange_my_oidc_idp.alias policy_type = \"client\" clients = [ keycloak_openid_client.token-exchange_webapp_client.id ] }","title":"Example Usage"},{"location":"resources/identity_provider_token_exchange_scope_permission/#argument-reference","text":"realm_id - (Required) The realm that the identity provider exists in. provider_alias - (Required) Alias of the identity provider. policy_type - (Optional) Defaults to \"client\" This is also the only value policy type supported by this provider. clients - (Required) A list of IDs of the clients for which a policy will be created and set on scope based token exchange permission.","title":"Argument Reference"},{"location":"resources/identity_provider_token_exchange_scope_permission/#attributes-reference","text":"policy_id - (Computed) Policy ID that will be set on the scope based token exchange permission automatically created by enabling permissions on the reference identity provider. authorization_resource_server_id - (Computed) Resource server ID representing the realm management client on which this permission is managed. authorization_idp_resource_id - (Computed) Resource ID representing the identity provider, this automatically created by keycloak. authorization_token_exchange_scope_permission_id - (Computed) Permission ID representing the Permission with scope 'Token Exchange' and the resource 'authorization_idp_resource_id', this automatically created by keycloak, the policy ID will be set on this permission.","title":"Attributes Reference"},{"location":"resources/identity_provider_token_exchange_scope_permission/#import","text":"This resource can be imported using the format {{realm_id}}/{{provider_alias}} , where provider_alias is the alias that you assign to the identity provider upon creation. Example: $ terraform import keycloak_identity_provider_token_exchange_scope_permission.oidc_idp_permission my-realm/myIdp","title":"Import"},{"location":"resources/ldap_full_name_mapper/","text":"keycloak_ldap_full_name_mapper Resource Allows for creating and managing full name mappers for Keycloak users federated via LDAP. The LDAP full name mapper can map a user's full name from an LDAP attribute to the first and last name attributes of a Keycloak user. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_full_name_mapper\" \"ldap_full_name_mapper\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"full-name-mapper\" ldap_full_name_attribute = \"cn\" } Argument Reference realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. ldap_full_name_attribute - (Required) The name of the LDAP attribute containing the user's full name. read_only - (Optional) When true , updates to a user within Keycloak will not be written back to LDAP. Defaults to false . write_only - (Optional) When true , this mapper will only be used to write updates to LDAP. Defaults to false . Import LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Example: $ terraform import keycloak_ldap_full_name_mapper.ldap_full_name_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"keycloak\\_ldap\\_full\\_name\\_mapper Resource"},{"location":"resources/ldap_full_name_mapper/#keycloak_ldap_full_name_mapper-resource","text":"Allows for creating and managing full name mappers for Keycloak users federated via LDAP. The LDAP full name mapper can map a user's full name from an LDAP attribute to the first and last name attributes of a Keycloak user.","title":"keycloak_ldap_full_name_mapper Resource"},{"location":"resources/ldap_full_name_mapper/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_full_name_mapper\" \"ldap_full_name_mapper\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"full-name-mapper\" ldap_full_name_attribute = \"cn\" }","title":"Example Usage"},{"location":"resources/ldap_full_name_mapper/#argument-reference","text":"realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. ldap_full_name_attribute - (Required) The name of the LDAP attribute containing the user's full name. read_only - (Optional) When true , updates to a user within Keycloak will not be written back to LDAP. Defaults to false . write_only - (Optional) When true , this mapper will only be used to write updates to LDAP. Defaults to false .","title":"Argument Reference"},{"location":"resources/ldap_full_name_mapper/#import","text":"LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Example: $ terraform import keycloak_ldap_full_name_mapper.ldap_full_name_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"Import"},{"location":"resources/ldap_group_mapper/","text":"keycloak_ldap_group_mapper Allows for creating and managing group mappers for Keycloak users federated via LDAP. The LDAP group mapper can be used to map an LDAP user's groups from some DN to Keycloak groups. This group mapper will also create the groups within Keycloak if they do not already exist. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_group_mapper\" \"ldap_group_mapper\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"group-mapper\" ldap_groups_dn = \"dc=example,dc=org\" group_name_ldap_attribute = \"cn\" group_object_classes = [ \"groupOfNames\" ] membership_attribute_type = \"DN\" membership_ldap_attribute = \"member\" membership_user_ldap_attribute = \"cn\" memberof_ldap_attribute = \"memberOf\" } Argument Reference realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. ldap_groups_dn - (Required) The LDAP DN where groups can be found. group_name_ldap_attribute - (Required) The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically cn . group_object_classes - (Required) List of strings representing the object classes for the group. Must contain at least one. preserve_group_inheritance - (Optional) When true , group inheritance will be propagated from LDAP to Keycloak. When false , all LDAP groups will be propagated as top level groups within Keycloak. ignore_missing_groups - (Optional) When true , missing groups in the hierarchy will be ignored. membership_ldap_attribute - (Required) The name of the LDAP attribute that is used for membership mappings. membership_attribute_type - (Optional) Can be one of DN or UID . Defaults to DN . membership_user_ldap_attribute - (Required) The name of the LDAP attribute on a user that is used for membership mappings. groups_ldap_filter - (Optional) When specified, adds an additional custom filter to be used when querying for groups. Must start with ( and end with ) . mode - (Optional) Can be one of READ_ONLY or LDAP_ONLY . Defaults to READ_ONLY . user_roles_retrieve_strategy - (Optional) Can be one of LOAD_GROUPS_BY_MEMBER_ATTRIBUTE , GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE , or LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY . Defaults to LOAD_GROUPS_BY_MEMBER_ATTRIBUTE . memberof_ldap_attribute - (Optional) Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to memberOf . mapped_group_attributes - (Optional) Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group. drop_non_existing_groups_during_sync - (Optional) When true , groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to false . Import LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Example: $ terraform import keycloak_ldap_group_mapper.ldap_group_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"keycloak\\_ldap\\_group\\_mapper"},{"location":"resources/ldap_group_mapper/#keycloak_ldap_group_mapper","text":"Allows for creating and managing group mappers for Keycloak users federated via LDAP. The LDAP group mapper can be used to map an LDAP user's groups from some DN to Keycloak groups. This group mapper will also create the groups within Keycloak if they do not already exist.","title":"keycloak_ldap_group_mapper"},{"location":"resources/ldap_group_mapper/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_group_mapper\" \"ldap_group_mapper\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"group-mapper\" ldap_groups_dn = \"dc=example,dc=org\" group_name_ldap_attribute = \"cn\" group_object_classes = [ \"groupOfNames\" ] membership_attribute_type = \"DN\" membership_ldap_attribute = \"member\" membership_user_ldap_attribute = \"cn\" memberof_ldap_attribute = \"memberOf\" }","title":"Example Usage"},{"location":"resources/ldap_group_mapper/#argument-reference","text":"realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. ldap_groups_dn - (Required) The LDAP DN where groups can be found. group_name_ldap_attribute - (Required) The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically cn . group_object_classes - (Required) List of strings representing the object classes for the group. Must contain at least one. preserve_group_inheritance - (Optional) When true , group inheritance will be propagated from LDAP to Keycloak. When false , all LDAP groups will be propagated as top level groups within Keycloak. ignore_missing_groups - (Optional) When true , missing groups in the hierarchy will be ignored. membership_ldap_attribute - (Required) The name of the LDAP attribute that is used for membership mappings. membership_attribute_type - (Optional) Can be one of DN or UID . Defaults to DN . membership_user_ldap_attribute - (Required) The name of the LDAP attribute on a user that is used for membership mappings. groups_ldap_filter - (Optional) When specified, adds an additional custom filter to be used when querying for groups. Must start with ( and end with ) . mode - (Optional) Can be one of READ_ONLY or LDAP_ONLY . Defaults to READ_ONLY . user_roles_retrieve_strategy - (Optional) Can be one of LOAD_GROUPS_BY_MEMBER_ATTRIBUTE , GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE , or LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY . Defaults to LOAD_GROUPS_BY_MEMBER_ATTRIBUTE . memberof_ldap_attribute - (Optional) Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to memberOf . mapped_group_attributes - (Optional) Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group. drop_non_existing_groups_during_sync - (Optional) When true , groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to false .","title":"Argument Reference"},{"location":"resources/ldap_group_mapper/#import","text":"LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Example: $ terraform import keycloak_ldap_group_mapper.ldap_group_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"Import"},{"location":"resources/ldap_hardcoded_role_mapper/","text":"keycloak_ldap_hardcoded_role_mapper Resource Allows for creating and managing hardcoded role mappers for Keycloak users federated via LDAP. The LDAP hardcoded role mapper will grant a specified Keycloak role to each Keycloak user linked with LDAP. Example Usage (realm role) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_role\" \"realm_admin_role\" { realm_id = keycloak_realm.realm.id name = \"my-admin-role\" description = \"My Realm Role\" } resource \"keycloak_ldap_hardcoded_role_mapper\" \"assign_admin_role_to_all_users\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"assign-admin-role-to-all-users\" role = keycloak_role.realm_admin_role.name } Example Usage (client role) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } // data sources aren't technically necessary here, but they are helpful for demonstration purposes data \"keycloak_openid_client\" \"realm_management\" { realm_id = keycloak_realm.realm.id client_id = \"realm-management\" } data \"keycloak_role\" \"create_client\" { realm_id = keycloak_realm.realm.id client_id = data.keycloak_openid_client.realm_management.id name = \"create-client\" } resource \"keycloak_ldap_hardcoded_role_mapper\" \"assign_admin_role_to_all_users\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"assign-admin-role-to-all-users\" role = \"${data.keycloak_openid_client.realm_management.client_id}.${data.keycloak_role.create_client.name}\" } Argument Reference realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. role - (Required) The name of the role which should be assigned to the users. Client roles should use the format {{client_id}}.{{client_role_name}} . Import LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Example: $ terraform import keycloak_ldap_hardcoded_role_mapper.assign_admin_role_to_all_users my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"keycloak\\_ldap\\_hardcoded\\_role\\_mapper Resource"},{"location":"resources/ldap_hardcoded_role_mapper/#keycloak_ldap_hardcoded_role_mapper-resource","text":"Allows for creating and managing hardcoded role mappers for Keycloak users federated via LDAP. The LDAP hardcoded role mapper will grant a specified Keycloak role to each Keycloak user linked with LDAP.","title":"keycloak_ldap_hardcoded_role_mapper Resource"},{"location":"resources/ldap_hardcoded_role_mapper/#example-usage-realm-role","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_role\" \"realm_admin_role\" { realm_id = keycloak_realm.realm.id name = \"my-admin-role\" description = \"My Realm Role\" } resource \"keycloak_ldap_hardcoded_role_mapper\" \"assign_admin_role_to_all_users\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"assign-admin-role-to-all-users\" role = keycloak_role.realm_admin_role.name }","title":"Example Usage (realm role)"},{"location":"resources/ldap_hardcoded_role_mapper/#example-usage-client-role","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } // data sources aren't technically necessary here, but they are helpful for demonstration purposes data \"keycloak_openid_client\" \"realm_management\" { realm_id = keycloak_realm.realm.id client_id = \"realm-management\" } data \"keycloak_role\" \"create_client\" { realm_id = keycloak_realm.realm.id client_id = data.keycloak_openid_client.realm_management.id name = \"create-client\" } resource \"keycloak_ldap_hardcoded_role_mapper\" \"assign_admin_role_to_all_users\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"assign-admin-role-to-all-users\" role = \"${data.keycloak_openid_client.realm_management.client_id}.${data.keycloak_role.create_client.name}\" }","title":"Example Usage (client role)"},{"location":"resources/ldap_hardcoded_role_mapper/#argument-reference","text":"realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. role - (Required) The name of the role which should be assigned to the users. Client roles should use the format {{client_id}}.{{client_role_name}} .","title":"Argument Reference"},{"location":"resources/ldap_hardcoded_role_mapper/#import","text":"LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Example: $ terraform import keycloak_ldap_hardcoded_role_mapper.assign_admin_role_to_all_users my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"Import"},{"location":"resources/ldap_msad_lds_user_account_control_mapper/","text":"keycloak_ldap_msad_lds_user_account_control_mapper Resource Allows for creating and managing MSAD-LDS user account control mappers for Keycloak users federated via LDAP. The MSAD-LDS (Microsoft Active Directory Lightweight Directory Service) user account control mapper is specific to LDAP user federation providers that are pulling from AD-LDS, and it can propagate AD-LDS user state to Keycloak in order to enforce settings like expired passwords or disabled accounts. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"ad\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"objectGUID\" user_object_classes = [ \"person\", \"organizationalPerson\", \"user\" ] connection_url = \"ldap://my-ad-server\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_msad_lds_user_account_control_mapper\" \"msad_lds_user_account_control_mapper\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"msad-lds-user-account-control-mapper\" } Argument Reference realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. Import LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Example: $ terraform import keycloak_ldap_msad_lds_user_account_control_mapper.msad_lds_user_account_control_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"keycloak\\_ldap\\_msad\\_lds\\_user\\_account\\_control\\_mapper Resource"},{"location":"resources/ldap_msad_lds_user_account_control_mapper/#keycloak_ldap_msad_lds_user_account_control_mapper-resource","text":"Allows for creating and managing MSAD-LDS user account control mappers for Keycloak users federated via LDAP. The MSAD-LDS (Microsoft Active Directory Lightweight Directory Service) user account control mapper is specific to LDAP user federation providers that are pulling from AD-LDS, and it can propagate AD-LDS user state to Keycloak in order to enforce settings like expired passwords or disabled accounts.","title":"keycloak_ldap_msad_lds_user_account_control_mapper Resource"},{"location":"resources/ldap_msad_lds_user_account_control_mapper/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"ad\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"objectGUID\" user_object_classes = [ \"person\", \"organizationalPerson\", \"user\" ] connection_url = \"ldap://my-ad-server\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_msad_lds_user_account_control_mapper\" \"msad_lds_user_account_control_mapper\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"msad-lds-user-account-control-mapper\" }","title":"Example Usage"},{"location":"resources/ldap_msad_lds_user_account_control_mapper/#argument-reference","text":"realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console.","title":"Argument Reference"},{"location":"resources/ldap_msad_lds_user_account_control_mapper/#import","text":"LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Example: $ terraform import keycloak_ldap_msad_lds_user_account_control_mapper.msad_lds_user_account_control_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"Import"},{"location":"resources/ldap_msad_user_account_control_mapper/","text":"keycloak_ldap_msad_user_account_control_mapper Resource Allows for creating and managing MSAD user account control mappers for Keycloak users federated via LDAP. The MSAD (Microsoft Active Directory) user account control mapper is specific to LDAP user federation providers that are pulling from AD, and it can propagate AD user state to Keycloak in order to enforce settings like expired passwords or disabled accounts. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"ad\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"objectGUID\" user_object_classes = [ \"person\", \"organizationalPerson\", \"user\" ] connection_url = \"ldap://my-ad-server\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_msad_user_account_control_mapper\" \"msad_user_account_control_mapper\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"msad-user-account-control-mapper\" } Argument Reference realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. ldap_password_policy_hints_enabled - (Optional) When true , advanced password policies, such as password hints and previous password history will be used when writing new passwords to AD. Defaults to false . Import LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Example: $ terraform import keycloak_ldap_msad_user_account_control_mapper.msad_user_account_control_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"keycloak\\_ldap\\_msad\\_user\\_account\\_control\\_mapper Resource"},{"location":"resources/ldap_msad_user_account_control_mapper/#keycloak_ldap_msad_user_account_control_mapper-resource","text":"Allows for creating and managing MSAD user account control mappers for Keycloak users federated via LDAP. The MSAD (Microsoft Active Directory) user account control mapper is specific to LDAP user federation providers that are pulling from AD, and it can propagate AD user state to Keycloak in order to enforce settings like expired passwords or disabled accounts.","title":"keycloak_ldap_msad_user_account_control_mapper Resource"},{"location":"resources/ldap_msad_user_account_control_mapper/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"ad\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"objectGUID\" user_object_classes = [ \"person\", \"organizationalPerson\", \"user\" ] connection_url = \"ldap://my-ad-server\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_msad_user_account_control_mapper\" \"msad_user_account_control_mapper\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"msad-user-account-control-mapper\" }","title":"Example Usage"},{"location":"resources/ldap_msad_user_account_control_mapper/#argument-reference","text":"realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. ldap_password_policy_hints_enabled - (Optional) When true , advanced password policies, such as password hints and previous password history will be used when writing new passwords to AD. Defaults to false .","title":"Argument Reference"},{"location":"resources/ldap_msad_user_account_control_mapper/#import","text":"LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Example: $ terraform import keycloak_ldap_msad_user_account_control_mapper.msad_user_account_control_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"Import"},{"location":"resources/ldap_user_attribute_mapper/","text":"keycloak_ldap_user_attribute_mapper Resource Allows for creating and managing user attribute mappers for Keycloak users federated via LDAP. The LDAP user attribute mapper can be used to map a single LDAP attribute to an attribute on the Keycloak user model. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_user_attribute_mapper\" \"ldap_user_attribute_mapper\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"user-attribute-mapper\" user_model_attribute = \"foo\" ldap_attribute = \"bar\" } Argument Reference realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. user_model_attribute - (Required) Name of the user property or attribute you want to map the LDAP attribute into. ldap_attribute - (Required) Name of the mapped attribute on the LDAP object. read_only - (Optional) When true , this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to false . always_read_value_from_ldap - (Optional) When true , the value fetched from LDAP will override the value stored in Keycloak. Defaults to false . is_mandatory_in_ldap - (Optional) When true , this attribute must exist in LDAP. Defaults to false . Import LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Example: $ terraform import keycloak_ldap_user_attribute_mapper.ldap_user_attribute_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"keycloak\\_ldap\\_user\\_attribute\\_mapper Resource"},{"location":"resources/ldap_user_attribute_mapper/#keycloak_ldap_user_attribute_mapper-resource","text":"Allows for creating and managing user attribute mappers for Keycloak users federated via LDAP. The LDAP user attribute mapper can be used to map a single LDAP attribute to an attribute on the Keycloak user model.","title":"keycloak_ldap_user_attribute_mapper Resource"},{"location":"resources/ldap_user_attribute_mapper/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = keycloak_realm.realm.id username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_user_attribute_mapper\" \"ldap_user_attribute_mapper\" { realm_id = keycloak_realm.realm.id ldap_user_federation_id = keycloak_ldap_user_federation.ldap_user_federation.id name = \"user-attribute-mapper\" user_model_attribute = \"foo\" ldap_attribute = \"bar\" }","title":"Example Usage"},{"location":"resources/ldap_user_attribute_mapper/#argument-reference","text":"realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. user_model_attribute - (Required) Name of the user property or attribute you want to map the LDAP attribute into. ldap_attribute - (Required) Name of the mapped attribute on the LDAP object. read_only - (Optional) When true , this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to false . always_read_value_from_ldap - (Optional) When true , the value fetched from LDAP will override the value stored in Keycloak. Defaults to false . is_mandatory_in_ldap - (Optional) When true , this attribute must exist in LDAP. Defaults to false .","title":"Argument Reference"},{"location":"resources/ldap_user_attribute_mapper/#import","text":"LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs. Example: $ terraform import keycloak_ldap_user_attribute_mapper.ldap_user_attribute_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"Import"},{"location":"resources/ldap_user_federation/","text":"keycloak_ldap_user_federation Resource Allows for creating and managing LDAP user federation providers within Keycloak. Keycloak can use an LDAP user federation provider to federate users to Keycloak from a directory system such as LDAP or Active Directory. Federated users will exist within the realm and will be able to log in to clients. Federated users can have their attributes defined using mappers. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = keycloak_realm.realm.id enabled = true username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" connection_timeout = \"5s\" read_timeout = \"10s\" kerberos { kerberos_realm = \"FOO.LOCAL\" server_principal = \"HTTP/host.foo.com@FOO.LOCAL\" keytab = \"/etc/host.keytab\" } } Argument Reference realm_id - (Required) The realm that this provider will provide user federation for. name - (Required) Display name of the provider when displayed in the console. enabled - (Optional) When false , this provider will not be used when performing queries for users. Defaults to true . priority - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to 0 . import_enabled - (Optional) When true , LDAP users will be imported into the Keycloak database. Defaults to true . edit_mode - (Optional) Can be one of READ_ONLY , WRITABLE , or UNSYNCED . UNSYNCED allows user data to be imported but not synced back to LDAP. Defaults to READ_ONLY . sync_registrations - (Optional) When true , newly created users will be synced back to LDAP. Defaults to false . vendor - (Optional) Can be one of OTHER , EDIRECTORY , AD , RHDS , or TIVOLI . When this is selected in the GUI, it provides reasonable defaults for other fields. When used with the Keycloak API, this attribute does nothing, but is still required. Defaults to OTHER . username_ldap_attribute - (Required) Name of the LDAP attribute to use as the Keycloak username. rdn_ldap_attribute - (Required) Name of the LDAP attribute to use as the relative distinguished name. uuid_ldap_attribute - (Required) Name of the LDAP attribute to use as a unique object identifier for objects in LDAP. user_object_classes - (Required) Array of all values of LDAP objectClass attribute for users in LDAP. Must contain at least one. connection_url - (Required) Connection URL to the LDAP server. users_dn - (Required) Full DN of LDAP tree where your users are. bind_dn - (Optional) DN of LDAP admin, which will be used by Keycloak to access LDAP server. This attribute must be set if bind_credential is set. bind_credential - (Optional) Password of LDAP admin. This attribute must be set if bind_dn is set. custom_user_search_filter - (Optional) Additional LDAP filter for filtering searched users. Must begin with ( and end with ) . search_scope - (Optional) Can be one of ONE_LEVEL or SUBTREE : ONE_LEVEL : Only search for users in the DN specified by user_dn . SUBTREE : Search entire LDAP subtree. validate_password_policy - (Optional) When true , Keycloak will validate passwords using the realm policy before updating it. use_truststore_spi - (Optional) Can be one of ALWAYS , ONLY_FOR_LDAPS , or NEVER : ALWAYS - Always use the truststore SPI for LDAP connections. NEVER - Never use the truststore SPI for LDAP connections. ONLY_FOR_LDAPS - Only use the truststore SPI if your LDAP connection uses the ldaps protocol. connection_timeout - (Optional) LDAP connection timeout in the format of a Go duration string . read_timeout - (Optional) LDAP read timeout in the format of a Go duration string . pagination - (Optional) When true, Keycloak assumes the LDAP server supports pagination. Defaults to true . batch_size_for_sync - (Optional) The number of users to sync within a single transaction. Defaults to 1000 . full_sync_period - (Optional) How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync. changed_sync_period - (Optional) How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed users sync. cache_policy - (Optional) Can be one of DEFAULT , EVICT_DAILY , EVICT_WEEKLY , MAX_LIFESPAN , or NO_CACHE . Defaults to DEFAULT . kerberos - (Optional) A block containing the kerberos settings. kerberos_realm - (Required) The name of the kerberos realm, e.g. FOO.LOCAL. server_principal - (Required) The kerberos server principal, e.g. 'HTTP/host.foo.com@FOO.LOCAL'. key_tab - (Required) Path to the kerberos keytab file on the server with credentials of the service principal. use_kerberos_for_password_authentication - (Optional) Use kerberos login module instead of ldap service api. Defaults to false . Import LDAP user federation providers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}} . The ID of the LDAP user federation provider can be found within the Keycloak GUI and is typically a GUID: $ terraform import keycloak_ldap_user_federation.ldap_user_federation my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860","title":"keycloak\\_ldap\\_user\\_federation Resource"},{"location":"resources/ldap_user_federation/#keycloak_ldap_user_federation-resource","text":"Allows for creating and managing LDAP user federation providers within Keycloak. Keycloak can use an LDAP user federation provider to federate users to Keycloak from a directory system such as LDAP or Active Directory. Federated users will exist within the realm and will be able to log in to clients. Federated users can have their attributes defined using mappers.","title":"keycloak_ldap_user_federation Resource"},{"location":"resources/ldap_user_federation/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = keycloak_realm.realm.id enabled = true username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" connection_timeout = \"5s\" read_timeout = \"10s\" kerberos { kerberos_realm = \"FOO.LOCAL\" server_principal = \"HTTP/host.foo.com@FOO.LOCAL\" keytab = \"/etc/host.keytab\" } }","title":"Example Usage"},{"location":"resources/ldap_user_federation/#argument-reference","text":"realm_id - (Required) The realm that this provider will provide user federation for. name - (Required) Display name of the provider when displayed in the console. enabled - (Optional) When false , this provider will not be used when performing queries for users. Defaults to true . priority - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to 0 . import_enabled - (Optional) When true , LDAP users will be imported into the Keycloak database. Defaults to true . edit_mode - (Optional) Can be one of READ_ONLY , WRITABLE , or UNSYNCED . UNSYNCED allows user data to be imported but not synced back to LDAP. Defaults to READ_ONLY . sync_registrations - (Optional) When true , newly created users will be synced back to LDAP. Defaults to false . vendor - (Optional) Can be one of OTHER , EDIRECTORY , AD , RHDS , or TIVOLI . When this is selected in the GUI, it provides reasonable defaults for other fields. When used with the Keycloak API, this attribute does nothing, but is still required. Defaults to OTHER . username_ldap_attribute - (Required) Name of the LDAP attribute to use as the Keycloak username. rdn_ldap_attribute - (Required) Name of the LDAP attribute to use as the relative distinguished name. uuid_ldap_attribute - (Required) Name of the LDAP attribute to use as a unique object identifier for objects in LDAP. user_object_classes - (Required) Array of all values of LDAP objectClass attribute for users in LDAP. Must contain at least one. connection_url - (Required) Connection URL to the LDAP server. users_dn - (Required) Full DN of LDAP tree where your users are. bind_dn - (Optional) DN of LDAP admin, which will be used by Keycloak to access LDAP server. This attribute must be set if bind_credential is set. bind_credential - (Optional) Password of LDAP admin. This attribute must be set if bind_dn is set. custom_user_search_filter - (Optional) Additional LDAP filter for filtering searched users. Must begin with ( and end with ) . search_scope - (Optional) Can be one of ONE_LEVEL or SUBTREE : ONE_LEVEL : Only search for users in the DN specified by user_dn . SUBTREE : Search entire LDAP subtree. validate_password_policy - (Optional) When true , Keycloak will validate passwords using the realm policy before updating it. use_truststore_spi - (Optional) Can be one of ALWAYS , ONLY_FOR_LDAPS , or NEVER : ALWAYS - Always use the truststore SPI for LDAP connections. NEVER - Never use the truststore SPI for LDAP connections. ONLY_FOR_LDAPS - Only use the truststore SPI if your LDAP connection uses the ldaps protocol. connection_timeout - (Optional) LDAP connection timeout in the format of a Go duration string . read_timeout - (Optional) LDAP read timeout in the format of a Go duration string . pagination - (Optional) When true, Keycloak assumes the LDAP server supports pagination. Defaults to true . batch_size_for_sync - (Optional) The number of users to sync within a single transaction. Defaults to 1000 . full_sync_period - (Optional) How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync. changed_sync_period - (Optional) How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed users sync. cache_policy - (Optional) Can be one of DEFAULT , EVICT_DAILY , EVICT_WEEKLY , MAX_LIFESPAN , or NO_CACHE . Defaults to DEFAULT . kerberos - (Optional) A block containing the kerberos settings. kerberos_realm - (Required) The name of the kerberos realm, e.g. FOO.LOCAL. server_principal - (Required) The kerberos server principal, e.g. 'HTTP/host.foo.com@FOO.LOCAL'. key_tab - (Required) Path to the kerberos keytab file on the server with credentials of the service principal. use_kerberos_for_password_authentication - (Optional) Use kerberos login module instead of ldap service api. Defaults to false .","title":"Argument Reference"},{"location":"resources/ldap_user_federation/#import","text":"LDAP user federation providers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}} . The ID of the LDAP user federation provider can be found within the Keycloak GUI and is typically a GUID: $ terraform import keycloak_ldap_user_federation.ldap_user_federation my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860","title":"Import"},{"location":"resources/oidc_google_identity_provider/","text":"keycloak_oidc_google_identity_provider Resource Allows for creating and managing OIDC Identity Providers within Keycloak. OIDC (OpenID Connect) identity providers allows users to authenticate through a third party system using the OIDC standard. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_oidc_google_identity_provider\" \"google\" { realm = keycloak_realm.realm.id client_id = var.google_identity_provider_client_id client_secret = var.google_identity_provider_client_secret trust_email = true hosted_domain = \"example.com\" extra_config = { \"syncMode\" = \"IMPORT\" } } Argument Reference realm - (Required) The name of the realm. This is unique across Keycloak. client_id - (Required) The client or client identifier registered within the identity provider. client_secret - (Required) The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format. enabled - (Optional) When true , users will be able to log in to this realm using this identity provider. Defaults to true . store_token - (Optional) When true , tokens will be stored after authenticating users. Defaults to true . add_read_token_role_on_create - (Optional) When true , new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false . link_only - (Optional) When true , users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to false . trust_email - (Optional) When true , email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false . first_broker_login_flow_alias - (Optional) The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login . post_broker_login_flow_alias - (Optional) The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used. provider_id - (Optional) The ID of the identity provider to use. Defaults to google , which should be used unless you have extended Keycloak and provided your own implementation. hosted_domain - (Optional) Sets the \"hd\" query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When * is entered, an account from any domain can be used. use_user_ip_param - (Optional) Sets the \"userIp\" query parameter when querying Google's User Info service. This will use the user's IP address. This is useful if Google is throttling Keycloak's access to the User Info service. request_refresh_token - (Optional) Sets the \"access_type\" query parameter to \"offline\" when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline. default_scopes - (Optional) The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid profile email . accepts_prompt_none_forward_from_client - (Optional) When true , unauthenticated requests with prompt=none will be forwarded to Google instead of returning an error. Defaults to false . disable_user_info - (Optional) When true , disables the usage of Google's user info service to obtain additional user information. Defaults to false . hide_on_login_page - (Optional) When true , this identity provider will be hidden on the login page. Defaults to false . extra_config - (Optional) A map of key/value pairs to add extra configuration to this identity provider. This can be used for custom oidc provider implementations, or to add configuration that is not yet supported by this Terraform provider. Attribute Reference internal_id - (Computed) The unique ID that Keycloak assigns to the identity provider upon creation. alias - (Computed) The alias for the Google identity provider. display_name - (Computed) Display name for the Google identity provider in the GUI. Import This resource does not yet support importing.","title":"keycloak\\_oidc\\_google\\_identity\\_provider Resource"},{"location":"resources/oidc_google_identity_provider/#keycloak_oidc_google_identity_provider-resource","text":"Allows for creating and managing OIDC Identity Providers within Keycloak. OIDC (OpenID Connect) identity providers allows users to authenticate through a third party system using the OIDC standard.","title":"keycloak_oidc_google_identity_provider Resource"},{"location":"resources/oidc_google_identity_provider/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_oidc_google_identity_provider\" \"google\" { realm = keycloak_realm.realm.id client_id = var.google_identity_provider_client_id client_secret = var.google_identity_provider_client_secret trust_email = true hosted_domain = \"example.com\" extra_config = { \"syncMode\" = \"IMPORT\" } }","title":"Example Usage"},{"location":"resources/oidc_google_identity_provider/#argument-reference","text":"realm - (Required) The name of the realm. This is unique across Keycloak. client_id - (Required) The client or client identifier registered within the identity provider. client_secret - (Required) The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format. enabled - (Optional) When true , users will be able to log in to this realm using this identity provider. Defaults to true . store_token - (Optional) When true , tokens will be stored after authenticating users. Defaults to true . add_read_token_role_on_create - (Optional) When true , new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false . link_only - (Optional) When true , users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to false . trust_email - (Optional) When true , email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false . first_broker_login_flow_alias - (Optional) The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login . post_broker_login_flow_alias - (Optional) The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used. provider_id - (Optional) The ID of the identity provider to use. Defaults to google , which should be used unless you have extended Keycloak and provided your own implementation. hosted_domain - (Optional) Sets the \"hd\" query parameter when logging in with Google. Google will only list accounts for this domain. Keycloak will validate that the returned identity token has a claim for this domain. When * is entered, an account from any domain can be used. use_user_ip_param - (Optional) Sets the \"userIp\" query parameter when querying Google's User Info service. This will use the user's IP address. This is useful if Google is throttling Keycloak's access to the User Info service. request_refresh_token - (Optional) Sets the \"access_type\" query parameter to \"offline\" when redirecting to google authorization endpoint,to get a refresh token back. This is useful for using Token Exchange to retrieve a Google token to access Google APIs when the user is offline. default_scopes - (Optional) The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid profile email . accepts_prompt_none_forward_from_client - (Optional) When true , unauthenticated requests with prompt=none will be forwarded to Google instead of returning an error. Defaults to false . disable_user_info - (Optional) When true , disables the usage of Google's user info service to obtain additional user information. Defaults to false . hide_on_login_page - (Optional) When true , this identity provider will be hidden on the login page. Defaults to false . extra_config - (Optional) A map of key/value pairs to add extra configuration to this identity provider. This can be used for custom oidc provider implementations, or to add configuration that is not yet supported by this Terraform provider.","title":"Argument Reference"},{"location":"resources/oidc_google_identity_provider/#attribute-reference","text":"internal_id - (Computed) The unique ID that Keycloak assigns to the identity provider upon creation. alias - (Computed) The alias for the Google identity provider. display_name - (Computed) Display name for the Google identity provider in the GUI.","title":"Attribute Reference"},{"location":"resources/oidc_google_identity_provider/#import","text":"This resource does not yet support importing.","title":"Import"},{"location":"resources/oidc_identity_provider/","text":"keycloak_oidc_identity_provider Resource Allows for creating and managing OIDC Identity Providers within Keycloak. OIDC (OpenID Connect) identity providers allows users to authenticate through a third party system using the OIDC standard. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_oidc_identity_provider\" \"realm_identity_provider\" { realm = keycloak_realm.realm.id alias = \"my-idp\" authorization_url = \"https://authorizationurl.com\" client_id = \"clientID\" client_secret = \"clientSecret\" token_url = \"https://tokenurl.com\" extra_config = { \"clientAuthMethod\" = \"client_secret_post\" } } Argument Reference realm - (Required) The name of the realm. This is unique across Keycloak. alias - (Required) The alias uniquely identifies an identity provider and it is also used to build the redirect uri. authorization_url - (Required) The Authorization Url. client_id - (Required) The client or client identifier registered within the identity provider. client_secret - (Required) The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format. token_url - (Required) The Token URL. display_name - (Optional) Display name for the identity provider in the GUI. enabled - (Optional) When true , users will be able to log in to this realm using this identity provider. Defaults to true . store_token - (Optional) When true , tokens will be stored after authenticating users. Defaults to true . add_read_token_role_on_create - (Optional) When true , new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false . link_only - (Optional) When true , users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to false . trust_email - (Optional) When true , email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false . first_broker_login_flow_alias - (Optional) The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login . post_broker_login_flow_alias - (Optional) The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used. provider_id - (Optional) The ID of the identity provider to use. Defaults to oidc , which should be used unless you have extended Keycloak and provided your own implementation. backchannel_supported - (Optional) Does the external IDP support backchannel logout? Defaults to true . validate_signature - (Optional) Enable/disable signature validation of external IDP signatures. Defaults to false . user_info_url - (Optional) User Info URL. jwks_url - (Optional) JSON Web Key Set URL. hide_on_login_page - (Optional) When true , this provider will be hidden on the login page, and is only accessible when requested explicitly. Defaults to false . logout_url - (Optional) The Logout URL is the end session endpoint to use to logout user from external identity provider. login_hint - (Optional) Pass login hint to identity provider. ui_locales - (Optional) Pass current locale to identity provider. Defaults to false . accepts_prompt_none_forward_from_client (Optional) When true , the IDP will accept forwarded authentication requests that contain the prompt=none query parameter. Defaults to false . default_scopes - (Optional) The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid . extra_config - (Optional) A map of key/value pairs to add extra configuration to this identity provider. This can be used for custom oidc provider implementations, or to add configuration that is not yet supported by this Terraform provider. clientAuthMethod (Optional) The client authentication method. Since Keycloak 8, this is a required attribute if OIDC provider is created using the Keycloak GUI. It accepts the values client_secret_post (Client secret sent as post), client_secret_basic (Client secret sent as basic auth), client_secret_jwt (Client secret as jwt) and private_key_jwt (JTW signed with private key) Attribute Reference internal_id - (Computed) The unique ID that Keycloak assigns to the identity provider upon creation. Import Identity providers can be imported using the format {{realm_id}}/{{idp_alias}} , where idp_alias is the identity provider alias. Example: $ terraform import keycloak_oidc_identity_provider.realm_identity_provider my-realm/my-idp","title":"keycloak\\_oidc\\_identity\\_provider Resource"},{"location":"resources/oidc_identity_provider/#keycloak_oidc_identity_provider-resource","text":"Allows for creating and managing OIDC Identity Providers within Keycloak. OIDC (OpenID Connect) identity providers allows users to authenticate through a third party system using the OIDC standard.","title":"keycloak_oidc_identity_provider Resource"},{"location":"resources/oidc_identity_provider/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_oidc_identity_provider\" \"realm_identity_provider\" { realm = keycloak_realm.realm.id alias = \"my-idp\" authorization_url = \"https://authorizationurl.com\" client_id = \"clientID\" client_secret = \"clientSecret\" token_url = \"https://tokenurl.com\" extra_config = { \"clientAuthMethod\" = \"client_secret_post\" } }","title":"Example Usage"},{"location":"resources/oidc_identity_provider/#argument-reference","text":"realm - (Required) The name of the realm. This is unique across Keycloak. alias - (Required) The alias uniquely identifies an identity provider and it is also used to build the redirect uri. authorization_url - (Required) The Authorization Url. client_id - (Required) The client or client identifier registered within the identity provider. client_secret - (Required) The client or client secret registered within the identity provider. This field is able to obtain its value from vault, use $${vault.ID} format. token_url - (Required) The Token URL. display_name - (Optional) Display name for the identity provider in the GUI. enabled - (Optional) When true , users will be able to log in to this realm using this identity provider. Defaults to true . store_token - (Optional) When true , tokens will be stored after authenticating users. Defaults to true . add_read_token_role_on_create - (Optional) When true , new users will be able to read stored tokens. This will automatically assign the broker.read-token role. Defaults to false . link_only - (Optional) When true , users cannot login using this provider, but their existing accounts will be linked when possible. Defaults to false . trust_email - (Optional) When true , email addresses for users in this provider will automatically be verified regardless of the realm's email verification policy. Defaults to false . first_broker_login_flow_alias - (Optional) The authentication flow to use when users log in for the first time through this identity provider. Defaults to first broker login . post_broker_login_flow_alias - (Optional) The authentication flow to use after users have successfully logged in, which can be used to perform additional user verification (such as OTP checking). Defaults to an empty string, which means no post login flow will be used. provider_id - (Optional) The ID of the identity provider to use. Defaults to oidc , which should be used unless you have extended Keycloak and provided your own implementation. backchannel_supported - (Optional) Does the external IDP support backchannel logout? Defaults to true . validate_signature - (Optional) Enable/disable signature validation of external IDP signatures. Defaults to false . user_info_url - (Optional) User Info URL. jwks_url - (Optional) JSON Web Key Set URL. hide_on_login_page - (Optional) When true , this provider will be hidden on the login page, and is only accessible when requested explicitly. Defaults to false . logout_url - (Optional) The Logout URL is the end session endpoint to use to logout user from external identity provider. login_hint - (Optional) Pass login hint to identity provider. ui_locales - (Optional) Pass current locale to identity provider. Defaults to false . accepts_prompt_none_forward_from_client (Optional) When true , the IDP will accept forwarded authentication requests that contain the prompt=none query parameter. Defaults to false . default_scopes - (Optional) The scopes to be sent when asking for authorization. It can be a space-separated list of scopes. Defaults to openid . extra_config - (Optional) A map of key/value pairs to add extra configuration to this identity provider. This can be used for custom oidc provider implementations, or to add configuration that is not yet supported by this Terraform provider. clientAuthMethod (Optional) The client authentication method. Since Keycloak 8, this is a required attribute if OIDC provider is created using the Keycloak GUI. It accepts the values client_secret_post (Client secret sent as post), client_secret_basic (Client secret sent as basic auth), client_secret_jwt (Client secret as jwt) and private_key_jwt (JTW signed with private key)","title":"Argument Reference"},{"location":"resources/oidc_identity_provider/#attribute-reference","text":"internal_id - (Computed) The unique ID that Keycloak assigns to the identity provider upon creation.","title":"Attribute Reference"},{"location":"resources/oidc_identity_provider/#import","text":"Identity providers can be imported using the format {{realm_id}}/{{idp_alias}} , where idp_alias is the identity provider alias. Example: $ terraform import keycloak_oidc_identity_provider.realm_identity_provider my-realm/my-idp","title":"Import"},{"location":"resources/openid_audience_protocol_mapper/","text":"keycloak_openid_audience_protocol_mapper Resource Allows for creating and managing audience protocol mappers within Keycloak. Audience protocol mappers allow you add audiences to the aud claim within issued tokens. The audience can be a custom string, or it can be mapped to the ID of a pre-existing client. Example Usage (Client) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = keycloak_realm.realm.id client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } resource \"keycloak_openid_audience_protocol_mapper\" \"audience_mapper\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.openid_client.id name = \"audience-mapper\" included_custom_audience = \"foo\" } Example Usage (Client Scope) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = keycloak_realm.realm.id name = \"test-client-scope\" } resource \"keycloak_openid_audience_protocol_mapper\" \"audience_mapper\" { realm_id = keycloak_realm.realm.id client_scope_id = keycloak_openid_client_scope.client_scope.id name = \"audience-mapper\" included_custom_audience = \"foo\" } Argument Reference realm_id - (Required) The realm this protocol mapper exists within. name - (Required) The display name of this protocol mapper in the GUI. client_id - (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id . One of client_id or client_scope_id must be specified. client_scope_id - (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id . One of client_id or client_scope_id must be specified. included_client_audience - (Optional) A client ID to include within the token's aud claim. Conflicts with included_custom_audience . One of included_client_audience or included_custom_audience must be specified. included_custom_audience - (Optional) A custom audience to include within the token's aud claim. Conflicts with included_client_audience . One of included_client_audience or included_custom_audience must be specified. add_to_id_token - (Optional) Indicates if the audience should be included in the aud claim for the id token. Defaults to true . add_to_access_token - (Optional) Indicates if the audience should be included in the aud claim for the id token. Defaults to true . Import Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_openid_audience_protocol_mapper.audience_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_openid_audience_protocol_mapper.audience_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"keycloak\\_openid\\_audience\\_protocol\\_mapper Resource"},{"location":"resources/openid_audience_protocol_mapper/#keycloak_openid_audience_protocol_mapper-resource","text":"Allows for creating and managing audience protocol mappers within Keycloak. Audience protocol mappers allow you add audiences to the aud claim within issued tokens. The audience can be a custom string, or it can be mapped to the ID of a pre-existing client.","title":"keycloak_openid_audience_protocol_mapper Resource"},{"location":"resources/openid_audience_protocol_mapper/#example-usage-client","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = keycloak_realm.realm.id client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } resource \"keycloak_openid_audience_protocol_mapper\" \"audience_mapper\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.openid_client.id name = \"audience-mapper\" included_custom_audience = \"foo\" }","title":"Example Usage (Client)"},{"location":"resources/openid_audience_protocol_mapper/#example-usage-client-scope","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = keycloak_realm.realm.id name = \"test-client-scope\" } resource \"keycloak_openid_audience_protocol_mapper\" \"audience_mapper\" { realm_id = keycloak_realm.realm.id client_scope_id = keycloak_openid_client_scope.client_scope.id name = \"audience-mapper\" included_custom_audience = \"foo\" }","title":"Example Usage (Client Scope)"},{"location":"resources/openid_audience_protocol_mapper/#argument-reference","text":"realm_id - (Required) The realm this protocol mapper exists within. name - (Required) The display name of this protocol mapper in the GUI. client_id - (Optional) The client this protocol mapper should be attached to. Conflicts with client_scope_id . One of client_id or client_scope_id must be specified. client_scope_id - (Optional) The client scope this protocol mapper should be attached to. Conflicts with client_id . One of client_id or client_scope_id must be specified. included_client_audience - (Optional) A client ID to include within the token's aud claim. Conflicts with included_custom_audience . One of included_client_audience or included_custom_audience must be specified. included_custom_audience - (Optional) A custom audience to include within the token's aud claim. Conflicts with included_client_audience . One of included_client_audience or included_custom_audience must be specified. add_to_id_token - (Optional) Indicates if the audience should be included in the aud claim for the id token. Defaults to true . add_to_access_token - (Optional) Indicates if the audience should be included in the aud claim for the id token. Defaults to true .","title":"Argument Reference"},{"location":"resources/openid_audience_protocol_mapper/#import","text":"Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_openid_audience_protocol_mapper.audience_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_openid_audience_protocol_mapper.audience_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"Import"},{"location":"resources/openid_client/","text":"keycloak_openid_client Resource Allows for creating and managing Keycloak clients that use the OpenID Connect protocol. Clients are entities that can use Keycloak for user authentication. Typically, clients are applications that redirect users to Keycloak for authentication in order to take advantage of Keycloak's user sessions for SSO. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = keycloak_realm.realm.id client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] login_theme = \"keycloak\" } Argument Reference realm_id - (Required) The realm this client is attached to. client_id - (Required) The Client ID for this client, referenced in the URI during authentication and in issued tokens. name - (Optional) The display name of this client in the GUI. enabled - (Optional) When false , this client will not be able to initiate a login or obtain access tokens. Defaults to true . description - (Optional) The description of this client in the GUI. access_type - (Required) Specifies the type of client, which can be one of the following: CONFIDENTIAL - Used for server-side clients that require both client ID and secret when authenticating. This client should be used for applications using the Authorization Code or Client Credentials grant flows. PUBLIC - Used for browser-only applications that do not require a client secret, and instead rely only on authorized redirect URIs for security. This client should be used for applications using the Implicit grant flow. BEARER-ONLY - Used for services that never initiate a login. This client will only allow bearer token requests. client_secret - (Optional) The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY . This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak. standard_flow_enabled - (Optional) When true , the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to false . implicit_flow_enabled - (Optional) When true , the OAuth2 Implicit Grant will be enabled for this client. Defaults to false . direct_access_grants_enabled - (Optional) When true , the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to false . service_accounts_enabled - (Optional) When true , the OAuth2 Client Credentials grant will be enabled for this client. Defaults to false . valid_redirect_uris - (Optional) A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple wildcards in the form of an asterisk can be used here. This attribute must be set if either standard_flow_enabled or implicit_flow_enabled is set to true . web_origins - (Optional) A list of allowed CORS origins. + can be used to permit all valid redirect URIs, and * can be used to permit all origins. root_url - (Optional) When specified, this URL is prepended to any relative URLs found within valid_redirect_uris , web_origins , and admin_url . NOTE: Due to limitations in the Keycloak API, when the root_url attribute is used, the valid_redirect_uris , web_origins , and admin_url attributes will be required. admin_url - (Optional) URL to the admin interface of the client. base_url - (Optional) Default URL to use when the auth server needs to redirect or link back to the client. pkce_code_challenge_method - (Optional) The challenge method to use for Proof Key for Code Exchange. Can be either plain or S256 or set to empty value ``. full_scope_allowed - (Optional) Allow to include all roles mappings in the access token. access_token_lifespan - (Optional) The amount of time in seconds before an access token expires. This will override the default for the realm. consent_required - (Optional) When true , users have to consent to client access. authentication_flow_binding_overrides - (Optional) Override realm authentication flow bindings browser_id - (Optional) Browser flow id, (flow needs to exist) direct_grant_id - (Optional) Direct grant flow id (flow needs to exist) login_theme - (Optional) The client login theme. This will override the default theme for the realm. exclude_session_state_from_auth_response - (Optional) When true , the parameter session_state will not be included in OpenID Connect Authentication Response. authorization - (Optional) When this block is present, fine-grained authorization will be enabled for this client. The client's access_type must be CONFIDENTIAL , and service_accounts_enabled must be true . This block has the following arguments: policy_enforcement_mode - (Required) Dictates how policies are enforced when evaluating authorization requests. Can be one of ENFORCING , PERMISSIVE , or DISABLED . allow_remote_resource_management - (Optional) When true , resources can be managed remotely by the resource server. Defaults to false . keep_defaults - (Optional) When true , defaults set by Keycloak will be respected. Defaults to false . Attributes Reference service_account_user_id - (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account. resource_server_id - (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the .id attribute). Import Clients can be imported using the format {{realm_id}}/{{client_keycloak_id}} , where client_keycloak_id is the unique ID that Keycloak assigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID. Example: $ terraform import keycloak_openid_client.openid_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352","title":"keycloak\\_openid\\_client Resource"},{"location":"resources/openid_client/#keycloak_openid_client-resource","text":"Allows for creating and managing Keycloak clients that use the OpenID Connect protocol. Clients are entities that can use Keycloak for user authentication. Typically, clients are applications that redirect users to Keycloak for authentication in order to take advantage of Keycloak's user sessions for SSO.","title":"keycloak_openid_client Resource"},{"location":"resources/openid_client/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = keycloak_realm.realm.id client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] login_theme = \"keycloak\" }","title":"Example Usage"},{"location":"resources/openid_client/#argument-reference","text":"realm_id - (Required) The realm this client is attached to. client_id - (Required) The Client ID for this client, referenced in the URI during authentication and in issued tokens. name - (Optional) The display name of this client in the GUI. enabled - (Optional) When false , this client will not be able to initiate a login or obtain access tokens. Defaults to true . description - (Optional) The description of this client in the GUI. access_type - (Required) Specifies the type of client, which can be one of the following: CONFIDENTIAL - Used for server-side clients that require both client ID and secret when authenticating. This client should be used for applications using the Authorization Code or Client Credentials grant flows. PUBLIC - Used for browser-only applications that do not require a client secret, and instead rely only on authorized redirect URIs for security. This client should be used for applications using the Implicit grant flow. BEARER-ONLY - Used for services that never initiate a login. This client will only allow bearer token requests. client_secret - (Optional) The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY . This value is sensitive and should be treated with the same care as a password. If omitted, this will be generated by Keycloak. standard_flow_enabled - (Optional) When true , the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to false . implicit_flow_enabled - (Optional) When true , the OAuth2 Implicit Grant will be enabled for this client. Defaults to false . direct_access_grants_enabled - (Optional) When true , the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to false . service_accounts_enabled - (Optional) When true , the OAuth2 Client Credentials grant will be enabled for this client. Defaults to false . valid_redirect_uris - (Optional) A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple wildcards in the form of an asterisk can be used here. This attribute must be set if either standard_flow_enabled or implicit_flow_enabled is set to true . web_origins - (Optional) A list of allowed CORS origins. + can be used to permit all valid redirect URIs, and * can be used to permit all origins. root_url - (Optional) When specified, this URL is prepended to any relative URLs found within valid_redirect_uris , web_origins , and admin_url . NOTE: Due to limitations in the Keycloak API, when the root_url attribute is used, the valid_redirect_uris , web_origins , and admin_url attributes will be required. admin_url - (Optional) URL to the admin interface of the client. base_url - (Optional) Default URL to use when the auth server needs to redirect or link back to the client. pkce_code_challenge_method - (Optional) The challenge method to use for Proof Key for Code Exchange. Can be either plain or S256 or set to empty value ``. full_scope_allowed - (Optional) Allow to include all roles mappings in the access token. access_token_lifespan - (Optional) The amount of time in seconds before an access token expires. This will override the default for the realm. consent_required - (Optional) When true , users have to consent to client access. authentication_flow_binding_overrides - (Optional) Override realm authentication flow bindings browser_id - (Optional) Browser flow id, (flow needs to exist) direct_grant_id - (Optional) Direct grant flow id (flow needs to exist) login_theme - (Optional) The client login theme. This will override the default theme for the realm. exclude_session_state_from_auth_response - (Optional) When true , the parameter session_state will not be included in OpenID Connect Authentication Response. authorization - (Optional) When this block is present, fine-grained authorization will be enabled for this client. The client's access_type must be CONFIDENTIAL , and service_accounts_enabled must be true . This block has the following arguments: policy_enforcement_mode - (Required) Dictates how policies are enforced when evaluating authorization requests. Can be one of ENFORCING , PERMISSIVE , or DISABLED . allow_remote_resource_management - (Optional) When true , resources can be managed remotely by the resource server. Defaults to false . keep_defaults - (Optional) When true , defaults set by Keycloak will be respected. Defaults to false .","title":"Argument Reference"},{"location":"resources/openid_client/#attributes-reference","text":"service_account_user_id - (Computed) When service accounts are enabled for this client, this attribute is the unique ID for the Keycloak user that represents this service account. resource_server_id - (Computed) When authorization is enabled for this client, this attribute is the unique ID for the client (the same value as the .id attribute).","title":"Attributes Reference"},{"location":"resources/openid_client/#import","text":"Clients can be imported using the format {{realm_id}}/{{client_keycloak_id}} , where client_keycloak_id is the unique ID that Keycloak assigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID. Example: $ terraform import keycloak_openid_client.openid_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352","title":"Import"},{"location":"resources/openid_client_default_scopes/","text":"keycloak_openid_client_default_scopes Resource Allows for managing a Keycloak client's default client scopes. A default scope that is attached to a client using the OpenID Connect protocol will automatically use the protocol mappers defined within that scope to build claims for this client regardless of the provided OAuth2.0 scope parameter. Note that this resource attempts to be an authoritative source over default scopes for a Keycloak client using the OpenID Connect protocol. This means that once Terraform controls a particular client's default scopes, it will attempt to remove any default scopes that were attached manually, and it will attempt to add any default scopes that were detached manually. By default, Keycloak sets the profile , email , roles , and web-origins scopes as default scopes for every newly created client. If you create this resource for the first time and do not include these scopes, a following run of terraform plan will result in changes. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id client_id = \"test-client\" access_type = \"CONFIDENTIAL\" } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = keycloak_realm.realm.id name = \"test-client-scope\" } resource \"keycloak_openid_client_default_scopes\" \"client_default_scopes\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client.id default_scopes = [ \"profile\", \"email\", \"roles\", \"web-origins\", keycloak_openid_client_scope.client_scope.name, ] } Argument Reference realm_id - (Required) The realm this client and scopes exists in. client_id - (Required) The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak. default_scopes - (Required) An array of client scope names to attach to this client. Import This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.","title":"keycloak\\_openid\\_client\\_default\\_scopes Resource"},{"location":"resources/openid_client_default_scopes/#keycloak_openid_client_default_scopes-resource","text":"Allows for managing a Keycloak client's default client scopes. A default scope that is attached to a client using the OpenID Connect protocol will automatically use the protocol mappers defined within that scope to build claims for this client regardless of the provided OAuth2.0 scope parameter. Note that this resource attempts to be an authoritative source over default scopes for a Keycloak client using the OpenID Connect protocol. This means that once Terraform controls a particular client's default scopes, it will attempt to remove any default scopes that were attached manually, and it will attempt to add any default scopes that were detached manually. By default, Keycloak sets the profile , email , roles , and web-origins scopes as default scopes for every newly created client. If you create this resource for the first time and do not include these scopes, a following run of terraform plan will result in changes.","title":"keycloak_openid_client_default_scopes Resource"},{"location":"resources/openid_client_default_scopes/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id client_id = \"test-client\" access_type = \"CONFIDENTIAL\" } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = keycloak_realm.realm.id name = \"test-client-scope\" } resource \"keycloak_openid_client_default_scopes\" \"client_default_scopes\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client.id default_scopes = [ \"profile\", \"email\", \"roles\", \"web-origins\", keycloak_openid_client_scope.client_scope.name, ] }","title":"Example Usage"},{"location":"resources/openid_client_default_scopes/#argument-reference","text":"realm_id - (Required) The realm this client and scopes exists in. client_id - (Required) The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak. default_scopes - (Required) An array of client scope names to attach to this client.","title":"Argument Reference"},{"location":"resources/openid_client_default_scopes/#import","text":"This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.","title":"Import"},{"location":"resources/openid_client_optional_scopes/","text":"keycloak_openid_client_optional_scopes Resource Allows for managing a Keycloak client's optional client scopes. An optional scope that is attached to a client using the OpenID Connect protocol will allow a client to request it using the OAuth 2.0 scope parameter. When requested, the scope's protocol mappers defined within that scope will be used to build claims for this client. Note that this resource attempts to be an authoritative source over optional scopes for a Keycloak client using the OpenID Connect protocol. This means that once Terraform controls a particular client's optional scopes, it will attempt to remove any optional scopes that were attached manually, and it will attempt to add any optional scopes that were detached manually. By default, Keycloak sets the address , phone , offline_access , and microprofile-jwt scopes as optional scopes for every newly created client. If you create this resource for the first time and do not include these scopes, a following run of terraform plan will result in changes. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id client_id = \"test-client\" access_type = \"CONFIDENTIAL\" } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = keycloak_realm.realm.id name = \"test-client-scope\" } resource \"keycloak_openid_client_optional_scopes\" \"client_optional_scopes\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client.id optional_scopes = [ \"address\", \"phone\", \"offline_access\", \"microprofile-jwt\", keycloak_openid_client_scope.client_scope.name ] } Argument Reference realm_id - (Required) The realm this client and scopes exists in. client_id - (Required) The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak. optional_scopes - (Required) An array of client scope names to attach to this client as optional scopes. Import This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.","title":"keycloak\\_openid\\_client\\_optional\\_scopes Resource"},{"location":"resources/openid_client_optional_scopes/#keycloak_openid_client_optional_scopes-resource","text":"Allows for managing a Keycloak client's optional client scopes. An optional scope that is attached to a client using the OpenID Connect protocol will allow a client to request it using the OAuth 2.0 scope parameter. When requested, the scope's protocol mappers defined within that scope will be used to build claims for this client. Note that this resource attempts to be an authoritative source over optional scopes for a Keycloak client using the OpenID Connect protocol. This means that once Terraform controls a particular client's optional scopes, it will attempt to remove any optional scopes that were attached manually, and it will attempt to add any optional scopes that were detached manually. By default, Keycloak sets the address , phone , offline_access , and microprofile-jwt scopes as optional scopes for every newly created client. If you create this resource for the first time and do not include these scopes, a following run of terraform plan will result in changes.","title":"keycloak_openid_client_optional_scopes Resource"},{"location":"resources/openid_client_optional_scopes/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id client_id = \"test-client\" access_type = \"CONFIDENTIAL\" } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = keycloak_realm.realm.id name = \"test-client-scope\" } resource \"keycloak_openid_client_optional_scopes\" \"client_optional_scopes\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client.id optional_scopes = [ \"address\", \"phone\", \"offline_access\", \"microprofile-jwt\", keycloak_openid_client_scope.client_scope.name ] }","title":"Example Usage"},{"location":"resources/openid_client_optional_scopes/#argument-reference","text":"realm_id - (Required) The realm this client and scopes exists in. client_id - (Required) The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak. optional_scopes - (Required) An array of client scope names to attach to this client as optional scopes.","title":"Argument Reference"},{"location":"resources/openid_client_optional_scopes/#import","text":"This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.","title":"Import"},{"location":"resources/openid_client_scope/","text":"keycloak_openid_client_scope Resource Allows for creating and managing Keycloak client scopes that can be attached to clients that use the OpenID Connect protocol. Client Scopes can be used to share common protocol and role mappings between multiple clients within a realm. They can also be used by clients to conditionally request claims or roles for a user based on the OAuth 2.0 scope parameter. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"openid_client_scope\" { realm_id = keycloak_realm.realm.id name = \"groups\" description = \"When requested, this scope will map a user's group memberships to a claim\" include_in_token_scope = true gui_order = 1 } Argument Reference realm_id - (Required) The realm this client scope belongs to. name - (Required) The display name of this client scope in the GUI. description - (Optional) The description of this client scope in the GUI. consent_screen_text - (Optional) When set, a consent screen will be displayed to users authenticating to clients with this scope attached. The consent screen will display the string value of this attribute. include_in_token_scope - (Optional) When true , the name of this client scope will be added to the access token property 'scope' as well as to the Token Introspection Endpoint response. gui_order - (Optional) Specify order of the client scope in GUI (such as in Consent page) as integer. Import Client scopes can be imported using the format {{realm_id}}/{{client_scope_id}} , where client_scope_id is the unique ID that Keycloak assigns to the client scope upon creation. This value can be found in the URI when editing this client scope in the GUI, and is typically a GUID. Example: $ terraform import keycloak_openid_client_scope.openid_client_scope my-realm/8e8f7fe1-df9b-40ed-bed3-4597aa0dac52","title":"keycloak\\_openid\\_client\\_scope Resource"},{"location":"resources/openid_client_scope/#keycloak_openid_client_scope-resource","text":"Allows for creating and managing Keycloak client scopes that can be attached to clients that use the OpenID Connect protocol. Client Scopes can be used to share common protocol and role mappings between multiple clients within a realm. They can also be used by clients to conditionally request claims or roles for a user based on the OAuth 2.0 scope parameter.","title":"keycloak_openid_client_scope Resource"},{"location":"resources/openid_client_scope/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"openid_client_scope\" { realm_id = keycloak_realm.realm.id name = \"groups\" description = \"When requested, this scope will map a user's group memberships to a claim\" include_in_token_scope = true gui_order = 1 }","title":"Example Usage"},{"location":"resources/openid_client_scope/#argument-reference","text":"realm_id - (Required) The realm this client scope belongs to. name - (Required) The display name of this client scope in the GUI. description - (Optional) The description of this client scope in the GUI. consent_screen_text - (Optional) When set, a consent screen will be displayed to users authenticating to clients with this scope attached. The consent screen will display the string value of this attribute. include_in_token_scope - (Optional) When true , the name of this client scope will be added to the access token property 'scope' as well as to the Token Introspection Endpoint response. gui_order - (Optional) Specify order of the client scope in GUI (such as in Consent page) as integer.","title":"Argument Reference"},{"location":"resources/openid_client_scope/#import","text":"Client scopes can be imported using the format {{realm_id}}/{{client_scope_id}} , where client_scope_id is the unique ID that Keycloak assigns to the client scope upon creation. This value can be found in the URI when editing this client scope in the GUI, and is typically a GUID. Example: $ terraform import keycloak_openid_client_scope.openid_client_scope my-realm/8e8f7fe1-df9b-40ed-bed3-4597aa0dac52","title":"Import"},{"location":"resources/openid_client_service_account_realm_role/","text":"keycloak_openid_client_service_account_realm_role Resource Allows for assigning realm roles to the service account of an openid client. You need to set service_accounts_enabled to true for the openid client that should be assigned the role. If you'd like to attach client roles to a service account, please use the keycloak_openid_client_service_account_role resource. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_role\" \"realm_role\" { realm_id = keycloak_realm.realm.id name = \"my-realm-role\" } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id name = \"client\" service_accounts_enabled = true } resource \"keycloak_openid_client_service_account_realm_role\" \"client_service_account_role\" { realm_id = keycloak_realm.realm.id service_account_user_id = keycloak_openid_client.client.service_account_user_id role = keycloak_role.realm_role.name } Argument Reference realm_id - (Required) The realm that the client and role belong to. service_account_user_id - (Required) The id of the service account that is assigned the role (the service account of the client that \"consumes\" the role). role - (Required) The name of the role that is assigned. Import This resource can be imported using the format {{realmId}}/{{serviceAccountUserId}}/{{roleId}} . Example: $ terraform import keycloak_openid_client_service_account_realm_role.client_service_account_role my-realm/489ba513-1ceb-49ba-ae0b-1ab1f5099ebf/c7230ab7-8e4e-4135-995d-e81b50696ad8","title":"keycloak\\_openid\\_client\\_service\\_account\\_realm\\_role Resource"},{"location":"resources/openid_client_service_account_realm_role/#keycloak_openid_client_service_account_realm_role-resource","text":"Allows for assigning realm roles to the service account of an openid client. You need to set service_accounts_enabled to true for the openid client that should be assigned the role. If you'd like to attach client roles to a service account, please use the keycloak_openid_client_service_account_role resource.","title":"keycloak_openid_client_service_account_realm_role Resource"},{"location":"resources/openid_client_service_account_realm_role/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_role\" \"realm_role\" { realm_id = keycloak_realm.realm.id name = \"my-realm-role\" } resource \"keycloak_openid_client\" \"client\" { realm_id = keycloak_realm.realm.id name = \"client\" service_accounts_enabled = true } resource \"keycloak_openid_client_service_account_realm_role\" \"client_service_account_role\" { realm_id = keycloak_realm.realm.id service_account_user_id = keycloak_openid_client.client.service_account_user_id role = keycloak_role.realm_role.name }","title":"Example Usage"},{"location":"resources/openid_client_service_account_realm_role/#argument-reference","text":"realm_id - (Required) The realm that the client and role belong to. service_account_user_id - (Required) The id of the service account that is assigned the role (the service account of the client that \"consumes\" the role). role - (Required) The name of the role that is assigned.","title":"Argument Reference"},{"location":"resources/openid_client_service_account_realm_role/#import","text":"This resource can be imported using the format {{realmId}}/{{serviceAccountUserId}}/{{roleId}} . Example: $ terraform import keycloak_openid_client_service_account_realm_role.client_service_account_role my-realm/489ba513-1ceb-49ba-ae0b-1ab1f5099ebf/c7230ab7-8e4e-4135-995d-e81b50696ad8","title":"Import"},{"location":"resources/openid_client_service_account_role/","text":"keycloak_openid_client_service_account_role Resource Allows for assigning client roles to the service account of an openid client. You need to set service_accounts_enabled to true for the openid client that should be assigned the role. If you'd like to attach realm roles to a service account, please use the keycloak_openid_client_service_account_realm_role resource. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } // client1 provides a role to other clients resource \"keycloak_openid_client\" \"client1\" { realm_id = keycloak_realm.realm.id name = \"client1\" } resource \"keycloak_role\" \"client1_role\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client1.id name = \"my-client1-role\" description = \"A role that client1 provides\" } // client2 is assigned the role of client1 resource \"keycloak_openid_client\" \"client2\" { realm_id = keycloak_realm.realm.id name = \"client2\" service_accounts_enabled = true } resource \"keycloak_openid_client_service_account_role\" \"client2_service_account_role\" { realm_id = keycloak_realm.realm.id service_account_user_id = keycloak_openid_client.client2.service_account_user_id client_id = keycloak_openid_client.client1.id role = keycloak_role.client1_role.name } Argument Reference realm_id - (Required) The realm the clients and roles belong to. service_account_user_id - (Required) The id of the service account that is assigned the role (the service account of the client that \"consumes\" the role). client_id - (Required) The id of the client that provides the role. role - (Required) The name of the role that is assigned. Import This resource can be imported using the format {{realmId}}/{{serviceAccountUserId}}/{{clientId}}/{{roleId}} . Example: $ terraform import keycloak_openid_client_service_account_role.client2_service_account_role my-realm/489ba513-1ceb-49ba-ae0b-1ab1f5099ebf/baf01820-0f8b-4494-9be2-fb3bc8a397a4/c7230ab7-8e4e-4135-995d-e81b50696ad8","title":"keycloak\\_openid\\_client\\_service\\_account\\_role Resource"},{"location":"resources/openid_client_service_account_role/#keycloak_openid_client_service_account_role-resource","text":"Allows for assigning client roles to the service account of an openid client. You need to set service_accounts_enabled to true for the openid client that should be assigned the role. If you'd like to attach realm roles to a service account, please use the keycloak_openid_client_service_account_realm_role resource.","title":"keycloak_openid_client_service_account_role Resource"},{"location":"resources/openid_client_service_account_role/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } // client1 provides a role to other clients resource \"keycloak_openid_client\" \"client1\" { realm_id = keycloak_realm.realm.id name = \"client1\" } resource \"keycloak_role\" \"client1_role\" { realm_id = keycloak_realm.realm.id client_id = keycloak_openid_client.client1.id name = \"my-client1-role\" description = \"A role that client1 provides\" } // client2 is assigned the role of client1 resource \"keycloak_openid_client\" \"client2\" { realm_id = keycloak_realm.realm.id name = \"client2\" service_accounts_enabled = true } resource \"keycloak_openid_client_service_account_role\" \"client2_service_account_role\" { realm_id = keycloak_realm.realm.id service_account_user_id = keycloak_openid_client.client2.service_account_user_id client_id = keycloak_openid_client.client1.id role = keycloak_role.client1_role.name }","title":"Example Usage"},{"location":"resources/openid_client_service_account_role/#argument-reference","text":"realm_id - (Required) The realm the clients and roles belong to. service_account_user_id - (Required) The id of the service account that is assigned the role (the service account of the client that \"consumes\" the role). client_id - (Required) The id of the client that provides the role. role - (Required) The name of the role that is assigned.","title":"Argument Reference"},{"location":"resources/openid_client_service_account_role/#import","text":"This resource can be imported using the format {{realmId}}/{{serviceAccountUserId}}/{{clientId}}/{{roleId}} . Example: $ terraform import keycloak_openid_client_service_account_role.client2_service_account_role my-realm/489ba513-1ceb-49ba-ae0b-1ab1f5099ebf/baf01820-0f8b-4494-9be2-fb3bc8a397a4/c7230ab7-8e4e-4135-995d-e81b50696ad8","title":"Import"},{"location":"resources/realm/","text":"keycloak_realm Resource Allows for creating and managing Realms within Keycloak. A realm manages a logical collection of users, credentials, roles, and groups. Users log in to realms and can be federated from multiple sources. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true display_name = \"my realm\" display_name_html = \"<b>my realm</b>\" login_theme = \"base\" access_code_lifespan = \"1h\" ssl_required = \"external\" password_policy = \"upperCase(1) and length(8) and forceExpiredPasswordChange(365) and notUsername\" attributes = { mycustomAttribute = \"myCustomValue\" } smtp_server { host = \"smtp.example.com\" from = \"example@example.com\" auth { username = \"tom\" password = \"password\" } } internationalization { supported_locales = [ \"en\", \"de\", \"es\" ] default_locale = \"en\" } security_defenses { headers { x_frame_options = \"DENY\" content_security_policy = \"frame-src 'self'; frame-ancestors 'self'; object-src 'none';\" content_security_policy_report_only = \"\" x_content_type_options = \"nosniff\" x_robots_tag = \"none\" x_xss_protection = \"1; mode=block\" strict_transport_security = \"max-age=31536000; includeSubDomains\" } brute_force_detection { permanent_lockout = false max_login_failures = 30 wait_increment_seconds = 60 quick_login_check_milli_seconds = 1000 minimum_quick_login_wait_seconds = 60 max_failure_wait_seconds = 900 failure_reset_time_seconds = 43200 } } } Argument Reference realm - (Required) The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak. enabled - (Optional) When false , users and clients will not be able to access this realm. Defaults to true . display_name - (Optional) The display name for the realm that is shown when logging in to the admin console. display_name_html - (Optional) The display name for the realm that is rendered as HTML on the screen when logging in to the admin console. user_managed_access - (Optional) When true , users are allowed to manage their own resources. Defaults to false . attributes - (Optional) A map of custom attributes to add to the realm. Login Settings The following arguments are all booleans, and can be found in the \"Login\" tab within the realm settings. If any of these arguments are not specified, they will default to Keycloak's default settings. registration_allowed - (Optional) When true, user registration will be enabled, and a link for registration will be displayed on the login page. registration_email_as_username - (Optional) When true, the user's email will be used as their username during registration. edit_username_allowed - (Optional) When true, the username field is editable. reset_password_allowed - (Optional) When true, a \"forgot password\" link will be displayed on the login page. remember_me - (Optional) When true, a \"remember me\" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts. verify_email - (Optional) When true, users are required to verify their email address after registration and after email address changes. login_with_email_allowed - (Optional) When true, users may log in with their email address. duplicate_emails_allowed - (Optional) When true, multiple users will be allowed to have the same email address. This argument must be set to false if login_with_email_allowed is set to true . ssl_required - (Optional) Can be one of following values: 'none, 'external' or 'all' Themes The following arguments can be used to configure themes for the realm. Custom themes can be specified here. If any of these arguments are not specified, they will default to Keycloak's default settings. Typically, the keycloak theme is used by default. login_theme - (Optional) Used for the login, forgot password, and registration pages. account_theme - (Optional) Used for account management pages. admin_theme - (Optional) Used for the admin console. email_theme - (Optional) Used for emails that are sent by Keycloak. Tokens The following arguments can be found in the \"Tokens\" tab within the realm settings. Each of these settings are top level arguments for the keycloak_realm resource. default_signature_algorithm - (Optional) Default algorithm used to sign tokens for the realm. revoke_refresh_token - (Optional) If enabled a refresh token can only be used number of times specified in 'refresh_token_max_reuse' before they are revoked. If unspecified, refresh tokens can be reused. refresh_token_max_reuse - (Optional) Maximum number of times a refresh token can be reused before they are revoked. If unspecified and 'revoke_refresh_token' is enabled the default value is 0 and refresh tokens can not be reused. The arguments below should be specified as Go duration strings . They will default to Keycloak's default settings. sso_session_idle_timeout - (Optional) The amount of time a session can be idle before it expires. sso_session_max_lifespan - (Optional) The maximum amount of time before a session expires regardless of activity. offline_session_idle_timeout - (Optional) The amount of time an offline session can be idle before it expires. offline_session_max_lifespan - (Optional) The maximum amount of time before an offline session expires regardless of activity. access_token_lifespan - (Optional) The amount of time an access token can be used before it expires. access_token_lifespan_for_implicit_flow - (Optional) The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires. access_code_lifespan - (Optional) The maximum amount of time a client has to finish the authorization code flow. access_code_lifespan_login - (Optional) The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted. access_code_lifespan_user_action - (Optional) The maximum amount of time a user has to complete login related actions, such as updating a password. action_token_generated_by_user_lifespan - (Optional) The maximum time a user has to use a user-generated permit before it expires. action_token_generated_by_admin_lifespan - (Optional) The maximum time a user has to use an admin-generated permit before it expires. SMTP The smtp_server block can be used to configure the realm's SMTP settings, which can be found in the \"Email\" tab in the GUI. This block supports the following arguments: host - (Required) The host of the SMTP server. port - (Optional) The port of the SMTP server (defaults to 25). from - (Required) The email address for the sender. from_display_name - (Optional) The display name of the sender email address. reply_to - (Optional) The \"reply to\" email address. reply_to_display_name - (Optional) The display name of the \"reply to\" email address. envelope_from - (Optional) The email address uses for bounces. starttls - (Optional) When true , enables StartTLS. Defaults to false . ssl - (Optional) When true , enables SSL. Defaults to false . auth - (Optional) Enables authentication to the SMTP server. This block supports the following arguments: username - (Required) The SMTP server username. password - (Required) The SMTP server password. Internationalization Internationalization support can be configured by using the internationalization block, which supports the following arguments: supported_locales - (Required) A list of ISO 639-1 locale codes that the realm should support. default_locale - (Required) The locale to use by default. This locale code must be present within the supported_locales list. Security Defenses The security_defenses argument can be used to configure the realm's security defenses via the headers and brute_force_detection sub-blocks. The headers block supports the following arguments: x_frame_options - (Optional) Sets the x-frame-option, which can be used to prevent pages from being included by non-origin iframes. More information can be found in the RFC7034 content_security_policy - (Optional) Sets the Content Security Policy, which can be used for prevent pages from being included by non-origin iframes. More information can be found in the W3C-CSP Abstract. content_security_policy_report_only - (Optional) Used for testing Content Security Policies. x_content_type_options - (Optional) Sets the X-Content-Type-Options, which can be used for prevent MIME-sniffing a response away from the declared content-type x_robots_tag - (Optional) Prevent pages from appearing in search engines. x_xss_protection - (Optional) This header configures the Cross-site scripting (XSS) filter in your browser. strict_transport_security - (Optional) The Script-Transport-Security HTTP header tells browsers to always use HTTPS. The brute_force_detection block supports the following arguments: permanent_lockout - (Optional) When true , this will lock the user permanently when the user exceeds the maximum login failures. max_login_failures - (Optional) How many failures before wait is triggered. wait_increment_seconds - (Optional) This represents the amount of time a user should be locked out when the login failure threshold has been met. quick_login_check_milli_seconds - (Optional) Configures the amount of time, in milliseconds, for consecutive failures to lock a user out. minimum_quick_login_wait_seconds - (Optional) How long to wait after a quick login failure. max_failure_wait_seconds - (Optional) Max. time a user will be locked out. failure_reset_time_seconds - (Optional) When will failure count be reset? Authentication Settings The following authentication settings can also be configured. Note that these are top level arguments for the keycloak_realm resource. password_policy - (Optional) The password policy for users within the realm. The arguments below can be used to configure authentication flow bindings: browser_flow - (Optional) The desired flow for browser authentication. Defaults to browser . registration_flow - (Optional) The desired flow for user registration. Defaults to registration . direct_grant_flow - (Optional) The desired flow for direct access authentication. Defaults to direct grant . reset_credentials_flow - (Optional) The desired flow to use when a user attempts to reset their credentials. Defaults to reset credentials . client_authentication_flow - (Optional) The desired flow for client authentication. Defaults to clients . docker_authentication_flow - (Optional) The desired flow for Docker authentication. Defaults to docker auth . Attributes Reference internal_id - (Computed) When importing realms created outside of this terraform provider, they could use generated arbitrary IDs for the internal realm id. Realms created by this provider always use the realm's name for its internal id. Import Realms can be imported using their name. Example: $ terraform import keycloak_realm.realm my-realm","title":"keycloak\\_realm Resource"},{"location":"resources/realm/#keycloak_realm-resource","text":"Allows for creating and managing Realms within Keycloak. A realm manages a logical collection of users, credentials, roles, and groups. Users log in to realms and can be federated from multiple sources.","title":"keycloak_realm Resource"},{"location":"resources/realm/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true display_name = \"my realm\" display_name_html = \"<b>my realm</b>\" login_theme = \"base\" access_code_lifespan = \"1h\" ssl_required = \"external\" password_policy = \"upperCase(1) and length(8) and forceExpiredPasswordChange(365) and notUsername\" attributes = { mycustomAttribute = \"myCustomValue\" } smtp_server { host = \"smtp.example.com\" from = \"example@example.com\" auth { username = \"tom\" password = \"password\" } } internationalization { supported_locales = [ \"en\", \"de\", \"es\" ] default_locale = \"en\" } security_defenses { headers { x_frame_options = \"DENY\" content_security_policy = \"frame-src 'self'; frame-ancestors 'self'; object-src 'none';\" content_security_policy_report_only = \"\" x_content_type_options = \"nosniff\" x_robots_tag = \"none\" x_xss_protection = \"1; mode=block\" strict_transport_security = \"max-age=31536000; includeSubDomains\" } brute_force_detection { permanent_lockout = false max_login_failures = 30 wait_increment_seconds = 60 quick_login_check_milli_seconds = 1000 minimum_quick_login_wait_seconds = 60 max_failure_wait_seconds = 900 failure_reset_time_seconds = 43200 } } }","title":"Example Usage"},{"location":"resources/realm/#argument-reference","text":"realm - (Required) The name of the realm. This is unique across Keycloak. This will also be used as the realm's internal ID within Keycloak. enabled - (Optional) When false , users and clients will not be able to access this realm. Defaults to true . display_name - (Optional) The display name for the realm that is shown when logging in to the admin console. display_name_html - (Optional) The display name for the realm that is rendered as HTML on the screen when logging in to the admin console. user_managed_access - (Optional) When true , users are allowed to manage their own resources. Defaults to false . attributes - (Optional) A map of custom attributes to add to the realm.","title":"Argument Reference"},{"location":"resources/realm/#login-settings","text":"The following arguments are all booleans, and can be found in the \"Login\" tab within the realm settings. If any of these arguments are not specified, they will default to Keycloak's default settings. registration_allowed - (Optional) When true, user registration will be enabled, and a link for registration will be displayed on the login page. registration_email_as_username - (Optional) When true, the user's email will be used as their username during registration. edit_username_allowed - (Optional) When true, the username field is editable. reset_password_allowed - (Optional) When true, a \"forgot password\" link will be displayed on the login page. remember_me - (Optional) When true, a \"remember me\" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts. verify_email - (Optional) When true, users are required to verify their email address after registration and after email address changes. login_with_email_allowed - (Optional) When true, users may log in with their email address. duplicate_emails_allowed - (Optional) When true, multiple users will be allowed to have the same email address. This argument must be set to false if login_with_email_allowed is set to true . ssl_required - (Optional) Can be one of following values: 'none, 'external' or 'all'","title":"Login Settings"},{"location":"resources/realm/#themes","text":"The following arguments can be used to configure themes for the realm. Custom themes can be specified here. If any of these arguments are not specified, they will default to Keycloak's default settings. Typically, the keycloak theme is used by default. login_theme - (Optional) Used for the login, forgot password, and registration pages. account_theme - (Optional) Used for account management pages. admin_theme - (Optional) Used for the admin console. email_theme - (Optional) Used for emails that are sent by Keycloak.","title":"Themes"},{"location":"resources/realm/#tokens","text":"The following arguments can be found in the \"Tokens\" tab within the realm settings. Each of these settings are top level arguments for the keycloak_realm resource. default_signature_algorithm - (Optional) Default algorithm used to sign tokens for the realm. revoke_refresh_token - (Optional) If enabled a refresh token can only be used number of times specified in 'refresh_token_max_reuse' before they are revoked. If unspecified, refresh tokens can be reused. refresh_token_max_reuse - (Optional) Maximum number of times a refresh token can be reused before they are revoked. If unspecified and 'revoke_refresh_token' is enabled the default value is 0 and refresh tokens can not be reused. The arguments below should be specified as Go duration strings . They will default to Keycloak's default settings. sso_session_idle_timeout - (Optional) The amount of time a session can be idle before it expires. sso_session_max_lifespan - (Optional) The maximum amount of time before a session expires regardless of activity. offline_session_idle_timeout - (Optional) The amount of time an offline session can be idle before it expires. offline_session_max_lifespan - (Optional) The maximum amount of time before an offline session expires regardless of activity. access_token_lifespan - (Optional) The amount of time an access token can be used before it expires. access_token_lifespan_for_implicit_flow - (Optional) The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires. access_code_lifespan - (Optional) The maximum amount of time a client has to finish the authorization code flow. access_code_lifespan_login - (Optional) The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted. access_code_lifespan_user_action - (Optional) The maximum amount of time a user has to complete login related actions, such as updating a password. action_token_generated_by_user_lifespan - (Optional) The maximum time a user has to use a user-generated permit before it expires. action_token_generated_by_admin_lifespan - (Optional) The maximum time a user has to use an admin-generated permit before it expires.","title":"Tokens"},{"location":"resources/realm/#smtp","text":"The smtp_server block can be used to configure the realm's SMTP settings, which can be found in the \"Email\" tab in the GUI. This block supports the following arguments: host - (Required) The host of the SMTP server. port - (Optional) The port of the SMTP server (defaults to 25). from - (Required) The email address for the sender. from_display_name - (Optional) The display name of the sender email address. reply_to - (Optional) The \"reply to\" email address. reply_to_display_name - (Optional) The display name of the \"reply to\" email address. envelope_from - (Optional) The email address uses for bounces. starttls - (Optional) When true , enables StartTLS. Defaults to false . ssl - (Optional) When true , enables SSL. Defaults to false . auth - (Optional) Enables authentication to the SMTP server. This block supports the following arguments: username - (Required) The SMTP server username. password - (Required) The SMTP server password.","title":"SMTP"},{"location":"resources/realm/#internationalization","text":"Internationalization support can be configured by using the internationalization block, which supports the following arguments: supported_locales - (Required) A list of ISO 639-1 locale codes that the realm should support. default_locale - (Required) The locale to use by default. This locale code must be present within the supported_locales list.","title":"Internationalization"},{"location":"resources/realm/#security-defenses","text":"The security_defenses argument can be used to configure the realm's security defenses via the headers and brute_force_detection sub-blocks. The headers block supports the following arguments: x_frame_options - (Optional) Sets the x-frame-option, which can be used to prevent pages from being included by non-origin iframes. More information can be found in the RFC7034 content_security_policy - (Optional) Sets the Content Security Policy, which can be used for prevent pages from being included by non-origin iframes. More information can be found in the W3C-CSP Abstract. content_security_policy_report_only - (Optional) Used for testing Content Security Policies. x_content_type_options - (Optional) Sets the X-Content-Type-Options, which can be used for prevent MIME-sniffing a response away from the declared content-type x_robots_tag - (Optional) Prevent pages from appearing in search engines. x_xss_protection - (Optional) This header configures the Cross-site scripting (XSS) filter in your browser. strict_transport_security - (Optional) The Script-Transport-Security HTTP header tells browsers to always use HTTPS. The brute_force_detection block supports the following arguments: permanent_lockout - (Optional) When true , this will lock the user permanently when the user exceeds the maximum login failures. max_login_failures - (Optional) How many failures before wait is triggered. wait_increment_seconds - (Optional) This represents the amount of time a user should be locked out when the login failure threshold has been met. quick_login_check_milli_seconds - (Optional) Configures the amount of time, in milliseconds, for consecutive failures to lock a user out. minimum_quick_login_wait_seconds - (Optional) How long to wait after a quick login failure. max_failure_wait_seconds - (Optional) Max. time a user will be locked out. failure_reset_time_seconds - (Optional) When will failure count be reset?","title":"Security Defenses"},{"location":"resources/realm/#authentication-settings","text":"The following authentication settings can also be configured. Note that these are top level arguments for the keycloak_realm resource. password_policy - (Optional) The password policy for users within the realm. The arguments below can be used to configure authentication flow bindings: browser_flow - (Optional) The desired flow for browser authentication. Defaults to browser . registration_flow - (Optional) The desired flow for user registration. Defaults to registration . direct_grant_flow - (Optional) The desired flow for direct access authentication. Defaults to direct grant . reset_credentials_flow - (Optional) The desired flow to use when a user attempts to reset their credentials. Defaults to reset credentials . client_authentication_flow - (Optional) The desired flow for client authentication. Defaults to clients . docker_authentication_flow - (Optional) The desired flow for Docker authentication. Defaults to docker auth .","title":"Authentication Settings"},{"location":"resources/realm/#attributes-reference","text":"internal_id - (Computed) When importing realms created outside of this terraform provider, they could use generated arbitrary IDs for the internal realm id. Realms created by this provider always use the realm's name for its internal id.","title":"Attributes Reference"},{"location":"resources/realm/#import","text":"Realms can be imported using their name. Example: $ terraform import keycloak_realm.realm my-realm","title":"Import"}]}