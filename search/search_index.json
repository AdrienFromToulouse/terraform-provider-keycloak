{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installing You can download the latest version of this provider on the GitHub releases page. Please follow the official docs for instructions on installing a third-party provider. Keycloak Setup Currently, this Terraform provider is configured to use the client credentials grant with a client configured in the master realm. You can follow the steps below to configure a client that the Terraform provider can use: Create a client in the master realm using the openid-connect protocol. Update the following client settings: Set \"Access Type\" to \"confidential\". Set \"Standard Flow Enabled\" to \"OFF\". Set \"Direct Access Grants Enabled\" to \"OFF\". Set \"Service Accounts Enabled\" to \"ON\". Go to the \"Service Account Roles\" tab for the client, and grant it any roles that are needed to manage your instance of Keycloak. The \"admin\" role can be assigned to effectively manage all Keycloak settings. Provider Setup The provider needs to be configured to use the master realm client configured in the previous step. The following provider attributes are supported: client_id (Required) - The client_id for the client in the master realm setup in the previous step. Defaults to the environment variable KEYCLOAK_CLIENT_ID . client_secret (Required) - The secret for this client, which can be found or changed using the \"Credentials\" tab in the client settings. Defaults to the environment variable KEYCLOAK_CLIENT_SECRET . url (Required) - The URL of the Keycloak instance, before /auth/admin . Defaults to the environment variable KEYCLOAK_URL . Example provider \"keycloak\" { client_id = \"terraform\" client_secret = \"884e0f95-0f42-4a63-9b1f-94274655669e\" url = \"http://localhost:8080\" }","title":"Getting Started"},{"location":"#installing","text":"You can download the latest version of this provider on the GitHub releases page. Please follow the official docs for instructions on installing a third-party provider.","title":"Installing"},{"location":"#keycloak-setup","text":"Currently, this Terraform provider is configured to use the client credentials grant with a client configured in the master realm. You can follow the steps below to configure a client that the Terraform provider can use: Create a client in the master realm using the openid-connect protocol. Update the following client settings: Set \"Access Type\" to \"confidential\". Set \"Standard Flow Enabled\" to \"OFF\". Set \"Direct Access Grants Enabled\" to \"OFF\". Set \"Service Accounts Enabled\" to \"ON\". Go to the \"Service Account Roles\" tab for the client, and grant it any roles that are needed to manage your instance of Keycloak. The \"admin\" role can be assigned to effectively manage all Keycloak settings.","title":"Keycloak Setup"},{"location":"#provider-setup","text":"The provider needs to be configured to use the master realm client configured in the previous step. The following provider attributes are supported: client_id (Required) - The client_id for the client in the master realm setup in the previous step. Defaults to the environment variable KEYCLOAK_CLIENT_ID . client_secret (Required) - The secret for this client, which can be found or changed using the \"Credentials\" tab in the client settings. Defaults to the environment variable KEYCLOAK_CLIENT_SECRET . url (Required) - The URL of the Keycloak instance, before /auth/admin . Defaults to the environment variable KEYCLOAK_URL .","title":"Provider Setup"},{"location":"#example","text":"provider \"keycloak\" { client_id = \"terraform\" client_secret = \"884e0f95-0f42-4a63-9b1f-94274655669e\" url = \"http://localhost:8080\" }","title":"Example"},{"location":"resources/keycloak_custom_user_federation/","text":"keycloak_custom_user_federation Allows for creating and managing custom user federation providers within Keycloak. A custom user federation provider is an implementation of Keycloak's User Storage SPI . An example of this implementation can be found here . Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_custom_user_federation\" \"custom_user_federation\" { name = \"custom\" realm_id = \"${keycloak_realm.realm.id}\" provider_id = \"custom\" enabled = true } Argument Reference The following arguments are supported: realm_id - (Required) The realm that this provider will provide user federation for. name - (Required) Display name of the provider when displayed in the console. provider_id - (Required) The unique ID of the custom provider, specified in the getId implementation for the UserStorageProviderFactory interface. enabled - (Optional) When false , this provider will not be used when performing queries for users. Defaults to true . priority - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to 0 . cache_policy - (Optional) Can be one of DEFAULT , EVICT_DAILY , EVICT_WEEKLY , MAX_LIFESPAN , or NO_CACHE . Defaults to DEFAULT . Import Custom user federation providers can be imported using the format {{realm_id}}/{{custom_user_federation_id}} . The ID of the custom user federation provider can be found within the Keycloak GUI and is typically a GUID: $ terraform import keycloak_custom_user_federation.custom_user_federation my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860","title":"keycloak_custom_user_federation"},{"location":"resources/keycloak_custom_user_federation/#keycloak_custom_user_federation","text":"Allows for creating and managing custom user federation providers within Keycloak. A custom user federation provider is an implementation of Keycloak's User Storage SPI . An example of this implementation can be found here .","title":"keycloak_custom_user_federation"},{"location":"resources/keycloak_custom_user_federation/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_custom_user_federation\" \"custom_user_federation\" { name = \"custom\" realm_id = \"${keycloak_realm.realm.id}\" provider_id = \"custom\" enabled = true }","title":"Example Usage"},{"location":"resources/keycloak_custom_user_federation/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm that this provider will provide user federation for. name - (Required) Display name of the provider when displayed in the console. provider_id - (Required) The unique ID of the custom provider, specified in the getId implementation for the UserStorageProviderFactory interface. enabled - (Optional) When false , this provider will not be used when performing queries for users. Defaults to true . priority - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to 0 . cache_policy - (Optional) Can be one of DEFAULT , EVICT_DAILY , EVICT_WEEKLY , MAX_LIFESPAN , or NO_CACHE . Defaults to DEFAULT .","title":"Argument Reference"},{"location":"resources/keycloak_custom_user_federation/#import","text":"Custom user federation providers can be imported using the format {{realm_id}}/{{custom_user_federation_id}} . The ID of the custom user federation provider can be found within the Keycloak GUI and is typically a GUID: $ terraform import keycloak_custom_user_federation.custom_user_federation my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860","title":"Import"},{"location":"resources/keycloak_group/","text":"keycloak_group Allows for creating and managing Groups within Keycloak. Groups provide a logical wrapping for users within Keycloak. Users within a group can share attributes and roles, and group membership can be mapped to a claim. Groups can also be federated from external data sources, such as LDAP or Active Directory. This resource should not be used to manage groups that were created this way. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_group\" \"parent_group\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"parent-group\" } resource \"keycloak_group\" \"child_group\" { realm_id = \"${keycloak_realm.realm.id}\" parent_id = \"${keycloak_group.parent_group.id}\" name = \"child-group\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm this group exists in. parent_id - (Optional) The ID of this group's parent. If omitted, this group will be defined at the root level. name - (Required) The name of the group. Attributes Reference In addition to the arguments listed above, the following computed attributes are exported: path - The complete path of the group. For example, the child group's path in the example configuration would be /parent-group/child-group . Import Groups can be imported using the format {{realm_id}}/{{group_id}} , where group_id is the unique ID that Keycloak assigns to the group upon creation. This value can be found in the URI when editing this group in the GUI, and is typically a GUID. Example: $ terraform import keycloak_group.child_group my-realm/934a4a4e-28bd-4703-a0fa-332df153aabd","title":"keycloak_group"},{"location":"resources/keycloak_group/#keycloak_group","text":"Allows for creating and managing Groups within Keycloak. Groups provide a logical wrapping for users within Keycloak. Users within a group can share attributes and roles, and group membership can be mapped to a claim. Groups can also be federated from external data sources, such as LDAP or Active Directory. This resource should not be used to manage groups that were created this way.","title":"keycloak_group"},{"location":"resources/keycloak_group/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_group\" \"parent_group\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"parent-group\" } resource \"keycloak_group\" \"child_group\" { realm_id = \"${keycloak_realm.realm.id}\" parent_id = \"${keycloak_group.parent_group.id}\" name = \"child-group\" }","title":"Example Usage"},{"location":"resources/keycloak_group/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this group exists in. parent_id - (Optional) The ID of this group's parent. If omitted, this group will be defined at the root level. name - (Required) The name of the group.","title":"Argument Reference"},{"location":"resources/keycloak_group/#attributes-reference","text":"In addition to the arguments listed above, the following computed attributes are exported: path - The complete path of the group. For example, the child group's path in the example configuration would be /parent-group/child-group .","title":"Attributes Reference"},{"location":"resources/keycloak_group/#import","text":"Groups can be imported using the format {{realm_id}}/{{group_id}} , where group_id is the unique ID that Keycloak assigns to the group upon creation. This value can be found in the URI when editing this group in the GUI, and is typically a GUID. Example: $ terraform import keycloak_group.child_group my-realm/934a4a4e-28bd-4703-a0fa-332df153aabd","title":"Import"},{"location":"resources/keycloak_group_memberships/","text":"keycloak_group_memberships Allows for managing a Keycloak group's members. Note that this resource attempts to be an authoritative source over group members. When this resource takes control over a group's members, users that are manually added to the group will be removed, and users that are manually removed from the group will be added upon the next run of terraform apply . Eventually, a non-authoritative resource for group membership will be added to this provider. This resource should not be used to control membership of a group that has its members federated from an external source via group mapping. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_group\" \"group\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"my-group\" } resource \"keycloak_user\" \"user\" { realm_id = \"${keycloak_realm.realm.id}\" username = \"my-user\" } resource \"keycloak_group_memberships\" \"group_members\" { realm_id = \"${keycloak_realm.realm.id}\" group_id = \"${keycloak_group.group.id}\" members = [ \"${keycloak_user.user.username}\" ] } Argument Reference The following arguments are supported: realm_id - (Required) The realm this group exists in. group_id - (Required) The ID of the group this resource should manage memberships for. members - (Required) An array of usernames that belong to this group. Import This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.","title":"keycloak_group_memberships"},{"location":"resources/keycloak_group_memberships/#keycloak_group_memberships","text":"Allows for managing a Keycloak group's members. Note that this resource attempts to be an authoritative source over group members. When this resource takes control over a group's members, users that are manually added to the group will be removed, and users that are manually removed from the group will be added upon the next run of terraform apply . Eventually, a non-authoritative resource for group membership will be added to this provider. This resource should not be used to control membership of a group that has its members federated from an external source via group mapping.","title":"keycloak_group_memberships"},{"location":"resources/keycloak_group_memberships/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_group\" \"group\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"my-group\" } resource \"keycloak_user\" \"user\" { realm_id = \"${keycloak_realm.realm.id}\" username = \"my-user\" } resource \"keycloak_group_memberships\" \"group_members\" { realm_id = \"${keycloak_realm.realm.id}\" group_id = \"${keycloak_group.group.id}\" members = [ \"${keycloak_user.user.username}\" ] }","title":"Example Usage"},{"location":"resources/keycloak_group_memberships/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this group exists in. group_id - (Required) The ID of the group this resource should manage memberships for. members - (Required) An array of usernames that belong to this group.","title":"Argument Reference"},{"location":"resources/keycloak_group_memberships/#import","text":"This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.","title":"Import"},{"location":"resources/keycloak_ldap_full_name_mapper/","text":"keycloak_ldap_full_name_mapper Allows for creating and managing full name mappers for Keycloak users federated via LDAP. The LDAP full name mapper can map a user's full name from an LDAP attribute to the first and last name attributes of a Keycloak user. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = \"${keycloak_realm.realm.id}\" username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_full_name_mapper\" \"ldap_full_name_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" ldap_user_federation_id = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\" name = \"full-name-mapper\" ldap_full_name_attribute = \"cn\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. ldap_full_name_attribute - (Required) The name of the LDAP attribute containing the user's full name. read_only - (Optional) When true , updates to a user within Keycloak will not be written back to LDAP. Defaults to false . write_only - (Optional) When true , this mapper will only be used to write updates to LDAP. Defaults to false . Import LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs: $ terraform import keycloak_ldap_full_name_mapper.ldap_full_name_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"keycloak_ldap_full_name_mapper"},{"location":"resources/keycloak_ldap_full_name_mapper/#keycloak_ldap_full_name_mapper","text":"Allows for creating and managing full name mappers for Keycloak users federated via LDAP. The LDAP full name mapper can map a user's full name from an LDAP attribute to the first and last name attributes of a Keycloak user.","title":"keycloak_ldap_full_name_mapper"},{"location":"resources/keycloak_ldap_full_name_mapper/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = \"${keycloak_realm.realm.id}\" username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_full_name_mapper\" \"ldap_full_name_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" ldap_user_federation_id = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\" name = \"full-name-mapper\" ldap_full_name_attribute = \"cn\" }","title":"Example Usage"},{"location":"resources/keycloak_ldap_full_name_mapper/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. ldap_full_name_attribute - (Required) The name of the LDAP attribute containing the user's full name. read_only - (Optional) When true , updates to a user within Keycloak will not be written back to LDAP. Defaults to false . write_only - (Optional) When true , this mapper will only be used to write updates to LDAP. Defaults to false .","title":"Argument Reference"},{"location":"resources/keycloak_ldap_full_name_mapper/#import","text":"LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs: $ terraform import keycloak_ldap_full_name_mapper.ldap_full_name_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"Import"},{"location":"resources/keycloak_ldap_group_mapper/","text":"keycloak_ldap_group_mapper Allows for creating and managing group mappers for Keycloak users federated via LDAP. The LDAP group mapper can be used to map an LDAP user's groups from some DN to Keycloak groups. This group mapper will also create the groups within Keycloak if they do not already exist. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = \"${keycloak_realm.realm.id}\" username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_group_mapper\" \"ldap_group_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" ldap_user_federation_id = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\" name = \"group-mapper\" ldap_groups_dn = \"dc=example,dc=org\" group_name_ldap_attribute = \"cn\" group_object_classes = [ \"groupOfNames\" ] membership_attribute_type = \"DN\" membership_ldap_attribute = \"member\" membership_user_ldap_attribute = \"cn\" memberof_ldap_attribute = \"memberOf\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. ldap_groups_dn - (Required) The LDAP DN where groups can be found. group_name_ldap_attribute - (Required) The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically cn . group_object_classes - (Required) Array of strings representing the object classes for the group. Must contain at least one. preserve_group_inheritance - (Optional) When true , group inheritance will be propagated from LDAP to Keycloak. When false , all LDAP groups will be propagated as top level groups within Keycloak. ignore_missing_groups - (Optional) When true , missing groups in the hierarchy will be ignored. membership_ldap_attribute - (Required) The name of the LDAP attribute that is used for membership mappings. membership_attribute_type - (Optional) Can be one of DN or UID . Defaults to DN . membership_user_ldap_attribute - (Required) The name of the LDAP attribute on a user that is used for membership mappings. groups_ldap_filter - (Optional) When specified, adds an additional custom filter to be used when querying for groups. Must start with ( and end with ) . mode - (Optional) Can be one of READ_ONLY or LDAP_ONLY . Defaults to READ_ONLY . user_roles_retrieve_strategy - (Optional) Can be one of LOAD_GROUPS_BY_MEMBER_ATTRIBUTE , GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE , or LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY . Defaults to LOAD_GROUPS_BY_MEMBER_ATTRIBUTE . memberof_ldap_attribute - (Optional) Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to memberOf . mapped_group_attributes - (Optional) Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group. drop_non_existing_groups_during_sync - (Optional) When true , groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to false . Import LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs: $ terraform import keycloak_ldap_group_mapper.ldap_group_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"keycloak_ldap_group_mapper"},{"location":"resources/keycloak_ldap_group_mapper/#keycloak_ldap_group_mapper","text":"Allows for creating and managing group mappers for Keycloak users federated via LDAP. The LDAP group mapper can be used to map an LDAP user's groups from some DN to Keycloak groups. This group mapper will also create the groups within Keycloak if they do not already exist.","title":"keycloak_ldap_group_mapper"},{"location":"resources/keycloak_ldap_group_mapper/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = \"${keycloak_realm.realm.id}\" username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_group_mapper\" \"ldap_group_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" ldap_user_federation_id = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\" name = \"group-mapper\" ldap_groups_dn = \"dc=example,dc=org\" group_name_ldap_attribute = \"cn\" group_object_classes = [ \"groupOfNames\" ] membership_attribute_type = \"DN\" membership_ldap_attribute = \"member\" membership_user_ldap_attribute = \"cn\" memberof_ldap_attribute = \"memberOf\" }","title":"Example Usage"},{"location":"resources/keycloak_ldap_group_mapper/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. ldap_groups_dn - (Required) The LDAP DN where groups can be found. group_name_ldap_attribute - (Required) The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically cn . group_object_classes - (Required) Array of strings representing the object classes for the group. Must contain at least one. preserve_group_inheritance - (Optional) When true , group inheritance will be propagated from LDAP to Keycloak. When false , all LDAP groups will be propagated as top level groups within Keycloak. ignore_missing_groups - (Optional) When true , missing groups in the hierarchy will be ignored. membership_ldap_attribute - (Required) The name of the LDAP attribute that is used for membership mappings. membership_attribute_type - (Optional) Can be one of DN or UID . Defaults to DN . membership_user_ldap_attribute - (Required) The name of the LDAP attribute on a user that is used for membership mappings. groups_ldap_filter - (Optional) When specified, adds an additional custom filter to be used when querying for groups. Must start with ( and end with ) . mode - (Optional) Can be one of READ_ONLY or LDAP_ONLY . Defaults to READ_ONLY . user_roles_retrieve_strategy - (Optional) Can be one of LOAD_GROUPS_BY_MEMBER_ATTRIBUTE , GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE , or LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY . Defaults to LOAD_GROUPS_BY_MEMBER_ATTRIBUTE . memberof_ldap_attribute - (Optional) Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to memberOf . mapped_group_attributes - (Optional) Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group. drop_non_existing_groups_during_sync - (Optional) When true , groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to false .","title":"Argument Reference"},{"location":"resources/keycloak_ldap_group_mapper/#import","text":"LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs: $ terraform import keycloak_ldap_group_mapper.ldap_group_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"Import"},{"location":"resources/keycloak_ldap_msad_user_account_control_mapper/","text":"keycloak_ldap_msad_user_account_control_mapper Allows for creating and managing MSAD user account control mappers for Keycloak users federated via LDAP. The MSAD (Microsoft Active Directory) user account control mapper is specific to LDAP user federation providers that are pulling from AD, and it can propagate AD user state to Keycloak in order to enforce settings like expired passwords or disabled accounts. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"ad\" realm_id = \"${keycloak_realm.realm.id}\" username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"objectGUID\" user_object_classes = [ \"person\", \"organizationalPerson\", \"user\" ] connection_url = \"ldap://my-ad-server\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_msad_user_account_control_mapper\" \"msad_user_account_control_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" ldap_user_federation_id = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\" name = \"msad-user-account-control-mapper\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. ldap_password_policy_hints_enabled - (Optional) When true , advanced password policies, such as password hints and previous password history will be used when writing new passwords to AD. Defaults to false . Import LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs: $ terraform import keycloak_ldap_msad_user_account_control_mapper.msad_user_account_control_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"keycloak_ldap_msad_user_account_control_mapper"},{"location":"resources/keycloak_ldap_msad_user_account_control_mapper/#keycloak_ldap_msad_user_account_control_mapper","text":"Allows for creating and managing MSAD user account control mappers for Keycloak users federated via LDAP. The MSAD (Microsoft Active Directory) user account control mapper is specific to LDAP user federation providers that are pulling from AD, and it can propagate AD user state to Keycloak in order to enforce settings like expired passwords or disabled accounts.","title":"keycloak_ldap_msad_user_account_control_mapper"},{"location":"resources/keycloak_ldap_msad_user_account_control_mapper/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"ad\" realm_id = \"${keycloak_realm.realm.id}\" username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"objectGUID\" user_object_classes = [ \"person\", \"organizationalPerson\", \"user\" ] connection_url = \"ldap://my-ad-server\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_msad_user_account_control_mapper\" \"msad_user_account_control_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" ldap_user_federation_id = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\" name = \"msad-user-account-control-mapper\" }","title":"Example Usage"},{"location":"resources/keycloak_ldap_msad_user_account_control_mapper/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. ldap_password_policy_hints_enabled - (Optional) When true , advanced password policies, such as password hints and previous password history will be used when writing new passwords to AD. Defaults to false .","title":"Argument Reference"},{"location":"resources/keycloak_ldap_msad_user_account_control_mapper/#import","text":"LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs: $ terraform import keycloak_ldap_msad_user_account_control_mapper.msad_user_account_control_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"Import"},{"location":"resources/keycloak_ldap_user_attribute_mapper/","text":"keycloak_ldap_user_attribute_mapper Allows for creating and managing user attribute mappers for Keycloak users federated via LDAP. The LDAP user attribute mapper can be used to map a single LDAP attribute to an attribute on the Keycloak user model. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = \"${keycloak_realm.realm.id}\" username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_user_attribute_mapper\" \"ldap_user_attribute_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" ldap_user_federation_id = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\" name = \"user-attribute-mapper\" user_model_attribute = \"foo\" ldap_attribute = \"bar\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. user_model_attribute - (Required) Name of the user property or attribute you want to map the LDAP attribute into. ldap_attribute - (Required) Name of the mapped attribute on the LDAP object. read_only - (Optional) When true , this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to false . always_read_value_from_ldap - (Optional) When true , the value fetched from LDAP will override the value stored in Keycloak. Defaults to false . is_mandatory_in_ldap - (Optional) When true , this attribute must exist in LDAP. Defaults to false . Import LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs: $ terraform import keycloak_ldap_user_attribute_mapper.ldap_user_attribute_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"keycloak_ldap_user_attribute_mapper"},{"location":"resources/keycloak_ldap_user_attribute_mapper/#keycloak_ldap_user_attribute_mapper","text":"Allows for creating and managing user attribute mappers for Keycloak users federated via LDAP. The LDAP user attribute mapper can be used to map a single LDAP attribute to an attribute on the Keycloak user model.","title":"keycloak_ldap_user_attribute_mapper"},{"location":"resources/keycloak_ldap_user_attribute_mapper/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = \"${keycloak_realm.realm.id}\" username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" } resource \"keycloak_ldap_user_attribute_mapper\" \"ldap_user_attribute_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" ldap_user_federation_id = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\" name = \"user-attribute-mapper\" user_model_attribute = \"foo\" ldap_attribute = \"bar\" }","title":"Example Usage"},{"location":"resources/keycloak_ldap_user_attribute_mapper/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm that this LDAP mapper will exist in. ldap_user_federation_id - (Required) The ID of the LDAP user federation provider to attach this mapper to. name - (Required) Display name of this mapper when displayed in the console. user_model_attribute - (Required) Name of the user property or attribute you want to map the LDAP attribute into. ldap_attribute - (Required) Name of the mapped attribute on the LDAP object. read_only - (Optional) When true , this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to false . always_read_value_from_ldap - (Optional) When true , the value fetched from LDAP will override the value stored in Keycloak. Defaults to false . is_mandatory_in_ldap - (Optional) When true , this attribute must exist in LDAP. Defaults to false .","title":"Argument Reference"},{"location":"resources/keycloak_ldap_user_attribute_mapper/#import","text":"LDAP mappers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} . The ID of the LDAP user federation provider and the mapper can be found within the Keycloak GUI, and they are typically GUIDs: $ terraform import keycloak_ldap_user_attribute_mapper.ldap_user_attribute_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67","title":"Import"},{"location":"resources/keycloak_ldap_user_federation/","text":"keycloak_ldap_user_federation Allows for creating and managing LDAP user federation providers within Keycloak. Keycloak can use an LDAP user federation provider to federate users to Keycloak from a directory system such as LDAP or Active Directory. Federated users will exist within the realm and will be able to log in to clients. Federated users can have their attributes defined using mappers. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = \"${keycloak_realm.realm.id}\" enabled = true username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" connection_timeout = \"5s\" read_timeout = \"10s\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm that this provider will provide user federation for. name - (Required) Display name of the provider when displayed in the console. enabled - (Optional) When false , this provider will not be used when performing queries for users. Defaults to true . priority - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to 0 . import_enabled - (Optional) When true , LDAP users will be imported into the Keycloak database. Defaults to true . edit_mode - (Optional) Can be one of READ_ONLY , WRITABLE , or UNSYNCED . UNSYNCED allows user data to be imported but not synced back to LDAP. Defaults to READ_ONLY . sync_registrations - (Optional) When true , newly created users will be synced back to LDAP. Defaults to false . vendor - (Optional) Can be one of OTHER , EDIRECTORY , AD , RHDS , or TIVOLI . When this is selected in the GUI, it provides reasonable defaults for other fields. When used with the Keycloak API, this attribute does nothing, but is still required. Defaults to OPTIONAL . username_ldap_attribute - (Required) Name of the LDAP attribute to use as the Keycloak username. rdn_ldap_attribute - (Required) Name of the LDAP attribute to use as the relative distinguished name. uuid_ldap_attribute - (Required) Name of the LDAP attribute to use as a unique object identifier for objects in LDAP. user_object_classes - (Required) Array of all values of LDAP objectClass attribute for users in LDAP. Must contain at least one. connection_url - (Required) Connection URL to the LDAP server. users_dn - (Required) Full DN of LDAP tree where your users are. bind_dn - (Optional) DN of LDAP admin, which will be used by Keycloak to access LDAP server. This attribute must be set if bind_credential is set. bind_credential - (Optional) Password of LDAP admin. This attribute must be set if bind_dn is set. custom_user_search_filter - (Optional) Additional LDAP filter for filtering searched users. Must begin with ( and end with ) . search_scope - (Optional) Can be one of ONE_LEVEL or SUBTREE : ONE_LEVEL : Only search for users in the DN specified by user_dn . SUBTREE : Search entire LDAP subtree. validate_password_policy - (Optional) When true , Keycloak will validate passwords using the realm policy before updating it. use_truststore_spi - (Optional) Can be one of ALWAYS , ONLY_FOR_LDAPS , or NEVER : ALWAYS - Always use the truststore SPI for LDAP connections. NEVER - Never use the truststore SPI for LDAP connections. ONLY_FOR_LDAPS - Only use the truststore SPI if your LDAP connection uses the ldaps protocol. connection_timeout - (Optional) LDAP connection timeout in the format of a Go duration string . read_timeout - (Optional) LDAP read timeout in the format of a Go duration string . pagination - (Optional) When true, Keycloak assumes the LDAP server supports pagination. Defaults to true . batch_size_for_sync - (Optional) The number of users to sync within a single transaction. Defaults to 1000 . full_sync_period - (Optional) How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync. changed_sync_period - (Optional) How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed users sync. cache_policy - (Optional) Can be one of DEFAULT , EVICT_DAILY , EVICT_WEEKLY , MAX_LIFESPAN , or NO_CACHE . Defaults to DEFAULT . Import LDAP user federation providers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}} . The ID of the LDAP user federation provider can be found within the Keycloak GUI and is typically a GUID: $ terraform import keycloak_ldap_user_federation.ldap_user_federation my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860","title":"keycloak_ldap_user_federation"},{"location":"resources/keycloak_ldap_user_federation/#keycloak_ldap_user_federation","text":"Allows for creating and managing LDAP user federation providers within Keycloak. Keycloak can use an LDAP user federation provider to federate users to Keycloak from a directory system such as LDAP or Active Directory. Federated users will exist within the realm and will be able to log in to clients. Federated users can have their attributes defined using mappers.","title":"keycloak_ldap_user_federation"},{"location":"resources/keycloak_ldap_user_federation/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true } resource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" { name = \"openldap\" realm_id = \"${keycloak_realm.realm.id}\" enabled = true username_ldap_attribute = \"cn\" rdn_ldap_attribute = \"cn\" uuid_ldap_attribute = \"entryDN\" user_object_classes = [ \"simpleSecurityObject\", \"organizationalRole\" ] connection_url = \"ldap://openldap\" users_dn = \"dc=example,dc=org\" bind_dn = \"cn=admin,dc=example,dc=org\" bind_credential = \"admin\" connection_timeout = \"5s\" read_timeout = \"10s\" }","title":"Example Usage"},{"location":"resources/keycloak_ldap_user_federation/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm that this provider will provide user federation for. name - (Required) Display name of the provider when displayed in the console. enabled - (Optional) When false , this provider will not be used when performing queries for users. Defaults to true . priority - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to 0 . import_enabled - (Optional) When true , LDAP users will be imported into the Keycloak database. Defaults to true . edit_mode - (Optional) Can be one of READ_ONLY , WRITABLE , or UNSYNCED . UNSYNCED allows user data to be imported but not synced back to LDAP. Defaults to READ_ONLY . sync_registrations - (Optional) When true , newly created users will be synced back to LDAP. Defaults to false . vendor - (Optional) Can be one of OTHER , EDIRECTORY , AD , RHDS , or TIVOLI . When this is selected in the GUI, it provides reasonable defaults for other fields. When used with the Keycloak API, this attribute does nothing, but is still required. Defaults to OPTIONAL . username_ldap_attribute - (Required) Name of the LDAP attribute to use as the Keycloak username. rdn_ldap_attribute - (Required) Name of the LDAP attribute to use as the relative distinguished name. uuid_ldap_attribute - (Required) Name of the LDAP attribute to use as a unique object identifier for objects in LDAP. user_object_classes - (Required) Array of all values of LDAP objectClass attribute for users in LDAP. Must contain at least one. connection_url - (Required) Connection URL to the LDAP server. users_dn - (Required) Full DN of LDAP tree where your users are. bind_dn - (Optional) DN of LDAP admin, which will be used by Keycloak to access LDAP server. This attribute must be set if bind_credential is set. bind_credential - (Optional) Password of LDAP admin. This attribute must be set if bind_dn is set. custom_user_search_filter - (Optional) Additional LDAP filter for filtering searched users. Must begin with ( and end with ) . search_scope - (Optional) Can be one of ONE_LEVEL or SUBTREE : ONE_LEVEL : Only search for users in the DN specified by user_dn . SUBTREE : Search entire LDAP subtree. validate_password_policy - (Optional) When true , Keycloak will validate passwords using the realm policy before updating it. use_truststore_spi - (Optional) Can be one of ALWAYS , ONLY_FOR_LDAPS , or NEVER : ALWAYS - Always use the truststore SPI for LDAP connections. NEVER - Never use the truststore SPI for LDAP connections. ONLY_FOR_LDAPS - Only use the truststore SPI if your LDAP connection uses the ldaps protocol. connection_timeout - (Optional) LDAP connection timeout in the format of a Go duration string . read_timeout - (Optional) LDAP read timeout in the format of a Go duration string . pagination - (Optional) When true, Keycloak assumes the LDAP server supports pagination. Defaults to true . batch_size_for_sync - (Optional) The number of users to sync within a single transaction. Defaults to 1000 . full_sync_period - (Optional) How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync. changed_sync_period - (Optional) How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed users sync. cache_policy - (Optional) Can be one of DEFAULT , EVICT_DAILY , EVICT_WEEKLY , MAX_LIFESPAN , or NO_CACHE . Defaults to DEFAULT .","title":"Argument Reference"},{"location":"resources/keycloak_ldap_user_federation/#import","text":"LDAP user federation providers can be imported using the format {{realm_id}}/{{ldap_user_federation_id}} . The ID of the LDAP user federation provider can be found within the Keycloak GUI and is typically a GUID: $ terraform import keycloak_ldap_user_federation.ldap_user_federation my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860","title":"Import"},{"location":"resources/keycloak_openid_client/","text":"keycloak_openid_client Allows for creating and managing Keycloak clients that use the OpenID Connect protocol. Clients are entities that can use Keycloak for user authentication. Typically, clients are applications that redirect users to Keycloak for authentication in order to take advantage of Keycloak's user sessions for SSO. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } Argument Reference The following arguments are supported: realm_id - (Required) The realm this client is attached to. client_id - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens. name - (Optional) The display name of this client in the GUI. enabled - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true . description - (Optional) The description of this client in the GUI. access_type - (Required) Specifies the type of client, which can be one of the following: CONFIDENTIAL - Used for server-side clients that require both client ID and secret when authenticating. This client should be used for applications using the Authorization Code or Client Credentials grant flows. PUBLIC - Used for browser-only applications that do not require a client secret, and instead rely only on authorized redirect URIs for security. This client should be used for applications using the Implicit grant flow. BEARER-ONLY - Used for services that never initiate a login. This client will only allow bearer token requests. client_secret - (Optional) The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY . This value is sensitive and should be treated with the same care as a password. If omitted, Keycloak will generate a GUID for this attribute. standard_flow_enabled - (Optional) When true , the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to false . implicit_flow_enabled - (Optional) When true , the OAuth2 Implicit Grant will be enabled for this client. Defaults to false . direct_access_grants_enabled - (Optional) When true , the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to false . service_accounts_enabled - (Optional) When true , the OAuth2 Client Credentials grant will be enabled for this client. Defaults to false . valid_redirect_uris - (Optional) A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple wildcards in the form of an asterisk can be used here. This attribute must be set if either standard_flow_enabled or implicit_flow_enabled is set to true . web_origins - (Optional) A list of allowed CORS origins. + can be used to permit all valid redirect URIs, and * can be used to permit all origins. Import Clients can be imported using the format {{realm_id}}/{{client_keycloak_id}} , where client_keycloak_id is the unique ID that Keycloak assigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID. Example: $ terraform import keycloak_openid_client.openid_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352","title":"keycloak_openid_client"},{"location":"resources/keycloak_openid_client/#keycloak_openid_client","text":"Allows for creating and managing Keycloak clients that use the OpenID Connect protocol. Clients are entities that can use Keycloak for user authentication. Typically, clients are applications that redirect users to Keycloak for authentication in order to take advantage of Keycloak's user sessions for SSO.","title":"keycloak_openid_client"},{"location":"resources/keycloak_openid_client/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] }","title":"Example Usage"},{"location":"resources/keycloak_openid_client/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this client is attached to. client_id - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens. name - (Optional) The display name of this client in the GUI. enabled - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true . description - (Optional) The description of this client in the GUI. access_type - (Required) Specifies the type of client, which can be one of the following: CONFIDENTIAL - Used for server-side clients that require both client ID and secret when authenticating. This client should be used for applications using the Authorization Code or Client Credentials grant flows. PUBLIC - Used for browser-only applications that do not require a client secret, and instead rely only on authorized redirect URIs for security. This client should be used for applications using the Implicit grant flow. BEARER-ONLY - Used for services that never initiate a login. This client will only allow bearer token requests. client_secret - (Optional) The secret for clients with an access_type of CONFIDENTIAL or BEARER-ONLY . This value is sensitive and should be treated with the same care as a password. If omitted, Keycloak will generate a GUID for this attribute. standard_flow_enabled - (Optional) When true , the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to false . implicit_flow_enabled - (Optional) When true , the OAuth2 Implicit Grant will be enabled for this client. Defaults to false . direct_access_grants_enabled - (Optional) When true , the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to false . service_accounts_enabled - (Optional) When true , the OAuth2 Client Credentials grant will be enabled for this client. Defaults to false . valid_redirect_uris - (Optional) A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple wildcards in the form of an asterisk can be used here. This attribute must be set if either standard_flow_enabled or implicit_flow_enabled is set to true . web_origins - (Optional) A list of allowed CORS origins. + can be used to permit all valid redirect URIs, and * can be used to permit all origins.","title":"Argument Reference"},{"location":"resources/keycloak_openid_client/#import","text":"Clients can be imported using the format {{realm_id}}/{{client_keycloak_id}} , where client_keycloak_id is the unique ID that Keycloak assigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID. Example: $ terraform import keycloak_openid_client.openid_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352","title":"Import"},{"location":"resources/keycloak_openid_client_default_scopes/","text":"keycloak_openid_client_default_scopes Allows for managing a Keycloak client's default client scopes. A default scope that is attached to a client using the OpenID Connect protocol will automatically use the protocol mappers defined within that scope to build claims for this client regardless of the provided OAuth2.0 scope parameter. Note that this resource attempts to be an authoritative source over default scopes for a Keycloak client using the OpenID Connect protocol. This means that once Terraform controls a particular client's default scopes, it will attempt to remove any default scopes that were attached manually, and it will attempt to add any default scopes that were detached manually. By default, Keycloak sets the profile and email scopes as default scopes for every newly created client. If you create this resource for the first time and do not include these scopes, a following run of terraform plan will result in changes. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" access_type = \"CONFIDENTIAL\" } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"test-client-scope\" } resource \"keycloak_openid_client_default_scopes\" \"client_default_scopes\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"${keycloak_openid_client.client.id}\" default_scopes = [ \"profile\", \"email\", \"${keycloak_openid_client_scope.client_scope.name}\" ] } Argument Reference The following arguments are supported: realm_id - (Required) The realm this client and scopes exists in. client_id - (Required) The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak. default_scopes - (Required) An array of client scope names to attach to this client. Import This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.","title":"keycloak_openid_client_default_scopes"},{"location":"resources/keycloak_openid_client_default_scopes/#keycloak_openid_client_default_scopes","text":"Allows for managing a Keycloak client's default client scopes. A default scope that is attached to a client using the OpenID Connect protocol will automatically use the protocol mappers defined within that scope to build claims for this client regardless of the provided OAuth2.0 scope parameter. Note that this resource attempts to be an authoritative source over default scopes for a Keycloak client using the OpenID Connect protocol. This means that once Terraform controls a particular client's default scopes, it will attempt to remove any default scopes that were attached manually, and it will attempt to add any default scopes that were detached manually. By default, Keycloak sets the profile and email scopes as default scopes for every newly created client. If you create this resource for the first time and do not include these scopes, a following run of terraform plan will result in changes.","title":"keycloak_openid_client_default_scopes"},{"location":"resources/keycloak_openid_client_default_scopes/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" access_type = \"CONFIDENTIAL\" } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"test-client-scope\" } resource \"keycloak_openid_client_default_scopes\" \"client_default_scopes\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"${keycloak_openid_client.client.id}\" default_scopes = [ \"profile\", \"email\", \"${keycloak_openid_client_scope.client_scope.name}\" ] }","title":"Example Usage"},{"location":"resources/keycloak_openid_client_default_scopes/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this client and scopes exists in. client_id - (Required) The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak. default_scopes - (Required) An array of client scope names to attach to this client.","title":"Argument Reference"},{"location":"resources/keycloak_openid_client_default_scopes/#import","text":"This resource does not support import. Instead of importing, feel free to create this resource as if it did not already exist on the server.","title":"Import"},{"location":"resources/keycloak_openid_client_scope/","text":"keycloak_openid_client_scope Allows for creating and managing Keycloak client scopes that can be attached to clients that use the OpenID Connect protocol. Client Scopes can be used to share common protocol and role mappings between multiple clients within a realm. They can also be used by clients to conditionally request claims or roles for a user based on the OAuth 2.0 scope parameter. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"openid_client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"groups\" description = \"When requested, this scope will map a user's group memberships to a claim\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm this client scope belongs to. name - (Required) The display name of this client scope in the GUI. description - (Optional) The description of this client scope in the GUI. consent_screen_text - (Optional) When set, a consent screen will be displayed to users authenticating to clients with this scope attached. The consent screen will display the string value of this attribute. Import Client scopes can be imported using the format {{realm_id}}/{{client_scope_id}} , where client_scope_id is the unique ID that Keycloak assigns to the client scope upon creation. This value can be found in the URI when editing this client scope in the GUI, and is typically a GUID. Example: $ terraform import keycloak_openid_client_scope.openid_client_scope my-realm/8e8f7fe1-df9b-40ed-bed3-4597aa0dac52","title":"keycloak_openid_client_scope"},{"location":"resources/keycloak_openid_client_scope/#keycloak_openid_client_scope","text":"Allows for creating and managing Keycloak client scopes that can be attached to clients that use the OpenID Connect protocol. Client Scopes can be used to share common protocol and role mappings between multiple clients within a realm. They can also be used by clients to conditionally request claims or roles for a user based on the OAuth 2.0 scope parameter.","title":"keycloak_openid_client_scope"},{"location":"resources/keycloak_openid_client_scope/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"openid_client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"groups\" description = \"When requested, this scope will map a user's group memberships to a claim\" }","title":"Example Usage"},{"location":"resources/keycloak_openid_client_scope/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this client scope belongs to. name - (Required) The display name of this client scope in the GUI. description - (Optional) The description of this client scope in the GUI. consent_screen_text - (Optional) When set, a consent screen will be displayed to users authenticating to clients with this scope attached. The consent screen will display the string value of this attribute.","title":"Argument Reference"},{"location":"resources/keycloak_openid_client_scope/#import","text":"Client scopes can be imported using the format {{realm_id}}/{{client_scope_id}} , where client_scope_id is the unique ID that Keycloak assigns to the client scope upon creation. This value can be found in the URI when editing this client scope in the GUI, and is typically a GUID. Example: $ terraform import keycloak_openid_client_scope.openid_client_scope my-realm/8e8f7fe1-df9b-40ed-bed3-4597aa0dac52","title":"Import"},{"location":"resources/keycloak_openid_full_name_protocol_mapper/","text":"keycloak_openid_full_name_protocol_mapper Allows for creating and managing full name protocol mappers within Keycloak. Full name protocol mappers allow you to map a user's first and last name to the OpenID Connect name claim in a token. Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between multiple different clients. Example Usage (Client) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } resource \"keycloak_openid_full_name_protocol_mapper\" \"full_name_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"${keycloak_openid_client.openid_client.id}\" name = \"full-name-mapper\" } Example Usage (Client Scope) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"test-client-scope\" } resource \"keycloak_openid_full_name_protocol_mapper\" \"full_name_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\" name = \"full-name-mapper\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm this protocol mapper exists within. One of the following arguments is required: client_id - The client this protocol mapper is attached to. client_scope_id - The client scope this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. add_to_id_token - (Optional) Indicates if the user's full name should be added as a claim to the id token. Defaults to true . add_to_access_token - (Optional) Indicates if the user's full name should be added as a claim to the access token. Defaults to true . add_to_userinfo - (Optional) Indicates if the user's full name should be added as a claim to the UserInfo response body. Defaults to true . Import Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_openid_full_name_protocol_mapper.full_name_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_openid_full_name_protocol_mapper.full_name_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"keycloak_openid_full_name_protocol_mapper"},{"location":"resources/keycloak_openid_full_name_protocol_mapper/#keycloak_openid_full_name_protocol_mapper","text":"Allows for creating and managing full name protocol mappers within Keycloak. Full name protocol mappers allow you to map a user's first and last name to the OpenID Connect name claim in a token. Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between multiple different clients.","title":"keycloak_openid_full_name_protocol_mapper"},{"location":"resources/keycloak_openid_full_name_protocol_mapper/#example-usage-client","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } resource \"keycloak_openid_full_name_protocol_mapper\" \"full_name_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"${keycloak_openid_client.openid_client.id}\" name = \"full-name-mapper\" }","title":"Example Usage (Client)"},{"location":"resources/keycloak_openid_full_name_protocol_mapper/#example-usage-client-scope","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"test-client-scope\" } resource \"keycloak_openid_full_name_protocol_mapper\" \"full_name_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\" name = \"full-name-mapper\" }","title":"Example Usage (Client Scope)"},{"location":"resources/keycloak_openid_full_name_protocol_mapper/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this protocol mapper exists within. One of the following arguments is required: client_id - The client this protocol mapper is attached to. client_scope_id - The client scope this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. add_to_id_token - (Optional) Indicates if the user's full name should be added as a claim to the id token. Defaults to true . add_to_access_token - (Optional) Indicates if the user's full name should be added as a claim to the access token. Defaults to true . add_to_userinfo - (Optional) Indicates if the user's full name should be added as a claim to the UserInfo response body. Defaults to true .","title":"Argument Reference"},{"location":"resources/keycloak_openid_full_name_protocol_mapper/#import","text":"Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_openid_full_name_protocol_mapper.full_name_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_openid_full_name_protocol_mapper.full_name_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"Import"},{"location":"resources/keycloak_openid_group_membership_protocol_mapper/","text":"keycloak_openid_group_membership_protocol_mapper Allows for creating and managing group membership protocol mappers within Keycloak. Group membership protocol mappers allow you to map a user's group memberships to a claim in a token. Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between multiple different clients. Example Usage (Client) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } resource \"keycloak_openid_group_membership_protocol_mapper\" \"group_membership_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"${keycloak_openid_client.openid_client.id}\" name = \"group-membership-mapper\" claim_name = \"groups\" } Example Usage (Client Scope) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"test-client-scope\" } resource \"keycloak_openid_group_membership_protocol_mapper\" \"group_membership_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\" name = \"group-membership-mapper\" claim_name = \"groups\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm this protocol mapper exists within. One of the following arguments is required: client_id - The client this protocol mapper is attached to. client_scope_id - The client scope this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. claim_name - (Required) The name of the claim to insert into a token. full_path - (Optional) Indicates whether the full path of the group including its parents will be used. Defaults to true . add_to_id_token - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true . add_to_access_token - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true . add_to_userinfo - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to true . Import Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_openid_group_membership_protocol_mapper.group_membership_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_openid_group_membership_protocol_mapper.group_membership_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"keycloak_openid_group_membership_protocol_mapper"},{"location":"resources/keycloak_openid_group_membership_protocol_mapper/#keycloak_openid_group_membership_protocol_mapper","text":"Allows for creating and managing group membership protocol mappers within Keycloak. Group membership protocol mappers allow you to map a user's group memberships to a claim in a token. Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between multiple different clients.","title":"keycloak_openid_group_membership_protocol_mapper"},{"location":"resources/keycloak_openid_group_membership_protocol_mapper/#example-usage-client","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } resource \"keycloak_openid_group_membership_protocol_mapper\" \"group_membership_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"${keycloak_openid_client.openid_client.id}\" name = \"group-membership-mapper\" claim_name = \"groups\" }","title":"Example Usage (Client)"},{"location":"resources/keycloak_openid_group_membership_protocol_mapper/#example-usage-client-scope","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"test-client-scope\" } resource \"keycloak_openid_group_membership_protocol_mapper\" \"group_membership_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\" name = \"group-membership-mapper\" claim_name = \"groups\" }","title":"Example Usage (Client Scope)"},{"location":"resources/keycloak_openid_group_membership_protocol_mapper/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this protocol mapper exists within. One of the following arguments is required: client_id - The client this protocol mapper is attached to. client_scope_id - The client scope this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. claim_name - (Required) The name of the claim to insert into a token. full_path - (Optional) Indicates whether the full path of the group including its parents will be used. Defaults to true . add_to_id_token - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true . add_to_access_token - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true . add_to_userinfo - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to true .","title":"Argument Reference"},{"location":"resources/keycloak_openid_group_membership_protocol_mapper/#import","text":"Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_openid_group_membership_protocol_mapper.group_membership_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_openid_group_membership_protocol_mapper.group_membership_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"Import"},{"location":"resources/keycloak_openid_hardcoded_claim_protocol_mapper/","text":"keycloak_openid_hardcoded_claim_protocol_mapper Allows for creating and managing hardcoded claim protocol mappers within Keycloak. Hardcoded claim protocol mappers allow you to define a claim with a hardcoded value. Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between multiple different clients. Example Usage (Client) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } resource \"keycloak_openid_hardcoded_claim_protocol_mapper\" \"hardcoded_claim_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"${keycloak_openid_client.openid_client.id}\" name = \"hardcoded-claim-mapper\" claim_name = \"foo\" claim_value = \"bar\" } Example Usage (Client Scope) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"test-client-scope\" } resource \"keycloak_openid_hardcoded_claim_protocol_mapper\" \"hardcoded_claim_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\" name = \"hardcoded-claim-mapper\" claim_name = \"foo\" claim_value = \"bar\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm this protocol mapper exists within. One of the following arguments is required: client_id - The client this protocol mapper is attached to. client_scope_id - The client scope this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. claim_name - (Required) The name of the claim to insert into a token. claim_value - (Required) The hardcoded value of the claim. claim_value_type - (Optional) The claim type used when serializing JSON tokens. Can be one of String , long , int , or boolean . Defaults to String . add_to_id_token - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true . add_to_access_token - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true . add_to_userinfo - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to true . Import Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_openid_hardcoded_claim_protocol_mapper.hardcoded_claim_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_openid_hardcoded_claim_protocol_mapper.hardcoded_claim_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"keycloak_openid_hardcoded_claim_protocol_mapper"},{"location":"resources/keycloak_openid_hardcoded_claim_protocol_mapper/#keycloak_openid_hardcoded_claim_protocol_mapper","text":"Allows for creating and managing hardcoded claim protocol mappers within Keycloak. Hardcoded claim protocol mappers allow you to define a claim with a hardcoded value. Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between multiple different clients.","title":"keycloak_openid_hardcoded_claim_protocol_mapper"},{"location":"resources/keycloak_openid_hardcoded_claim_protocol_mapper/#example-usage-client","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } resource \"keycloak_openid_hardcoded_claim_protocol_mapper\" \"hardcoded_claim_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"${keycloak_openid_client.openid_client.id}\" name = \"hardcoded-claim-mapper\" claim_name = \"foo\" claim_value = \"bar\" }","title":"Example Usage (Client)"},{"location":"resources/keycloak_openid_hardcoded_claim_protocol_mapper/#example-usage-client-scope","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"test-client-scope\" } resource \"keycloak_openid_hardcoded_claim_protocol_mapper\" \"hardcoded_claim_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\" name = \"hardcoded-claim-mapper\" claim_name = \"foo\" claim_value = \"bar\" }","title":"Example Usage (Client Scope)"},{"location":"resources/keycloak_openid_hardcoded_claim_protocol_mapper/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this protocol mapper exists within. One of the following arguments is required: client_id - The client this protocol mapper is attached to. client_scope_id - The client scope this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. claim_name - (Required) The name of the claim to insert into a token. claim_value - (Required) The hardcoded value of the claim. claim_value_type - (Optional) The claim type used when serializing JSON tokens. Can be one of String , long , int , or boolean . Defaults to String . add_to_id_token - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true . add_to_access_token - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true . add_to_userinfo - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to true .","title":"Argument Reference"},{"location":"resources/keycloak_openid_hardcoded_claim_protocol_mapper/#import","text":"Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_openid_hardcoded_claim_protocol_mapper.hardcoded_claim_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_openid_hardcoded_claim_protocol_mapper.hardcoded_claim_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"Import"},{"location":"resources/keycloak_openid_user_attribute_protocol_mapper/","text":"keycloak_openid_user_attribute_protocol_mapper Allows for creating and managing user attribute protocol mappers within Keycloak. User attribute protocol mappers allow you to map custom attributes defined for a user within Keycloak to a claim in a token. Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between multiple different clients. Example Usage (Client) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } resource \"keycloak_openid_user_attribute_protocol_mapper\" \"user_attribute_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"${keycloak_openid_client.openid_client.id}\" name = \"test-mapper\" user_attribute = \"foo\" claim_name = \"bar\" } Example Usage (Client Scope) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"test-client-scope\" } resource \"keycloak_openid_user_attribute_protocol_mapper\" \"user_attribute_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\" name = \"test-mapper\" user_attribute = \"foo\" claim_name = \"bar\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm this protocol mapper exists within. One of the following arguments is required: client_id - The client this protocol mapper is attached to. client_scope_id - The client scope this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. user_attribute - (Required) The custom user attribute to map a claim for. claim_name - (Required) The name of the claim to insert into a token. claim_value_type - (Optional) The claim type used when serializing JSON tokens. Can be one of String , long , int , or boolean . Defaults to String . multivalued - (Optional) Indicates whether this attribute is a single value or an array of values. Defaults to false . add_to_id_token - (Optional) Indicates if the attribute should be added as a claim to the id token. Defaults to true . add_to_access_token - (Optional) Indicates if the attribute should be added as a claim to the access token. Defaults to true . add_to_userinfo - (Optional) Indicates if the attribute should be added as a claim to the UserInfo response body. Defaults to true . Import Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_openid_user_attribute_protocol_mapper.user_attribute_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_openid_user_attribute_protocol_mapper.user_attribute_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"keycloak_openid_user_attribute_protocol_mapper"},{"location":"resources/keycloak_openid_user_attribute_protocol_mapper/#keycloak_openid_user_attribute_protocol_mapper","text":"Allows for creating and managing user attribute protocol mappers within Keycloak. User attribute protocol mappers allow you to map custom attributes defined for a user within Keycloak to a claim in a token. Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between multiple different clients.","title":"keycloak_openid_user_attribute_protocol_mapper"},{"location":"resources/keycloak_openid_user_attribute_protocol_mapper/#example-usage-client","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } resource \"keycloak_openid_user_attribute_protocol_mapper\" \"user_attribute_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"${keycloak_openid_client.openid_client.id}\" name = \"test-mapper\" user_attribute = \"foo\" claim_name = \"bar\" }","title":"Example Usage (Client)"},{"location":"resources/keycloak_openid_user_attribute_protocol_mapper/#example-usage-client-scope","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"test-client-scope\" } resource \"keycloak_openid_user_attribute_protocol_mapper\" \"user_attribute_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\" name = \"test-mapper\" user_attribute = \"foo\" claim_name = \"bar\" }","title":"Example Usage (Client Scope)"},{"location":"resources/keycloak_openid_user_attribute_protocol_mapper/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this protocol mapper exists within. One of the following arguments is required: client_id - The client this protocol mapper is attached to. client_scope_id - The client scope this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. user_attribute - (Required) The custom user attribute to map a claim for. claim_name - (Required) The name of the claim to insert into a token. claim_value_type - (Optional) The claim type used when serializing JSON tokens. Can be one of String , long , int , or boolean . Defaults to String . multivalued - (Optional) Indicates whether this attribute is a single value or an array of values. Defaults to false . add_to_id_token - (Optional) Indicates if the attribute should be added as a claim to the id token. Defaults to true . add_to_access_token - (Optional) Indicates if the attribute should be added as a claim to the access token. Defaults to true . add_to_userinfo - (Optional) Indicates if the attribute should be added as a claim to the UserInfo response body. Defaults to true .","title":"Argument Reference"},{"location":"resources/keycloak_openid_user_attribute_protocol_mapper/#import","text":"Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_openid_user_attribute_protocol_mapper.user_attribute_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_openid_user_attribute_protocol_mapper.user_attribute_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"Import"},{"location":"resources/keycloak_openid_user_property_protocol_mapper/","text":"keycloak_openid_user_property_protocol_mapper Allows for creating and managing user property protocol mappers within Keycloak. User property protocol mappers allow you to map built in properties defined on the Keycloak user interface to a claim in a token. Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between multiple different clients. Example Usage (Client) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } resource \"keycloak_openid_user_property_protocol_mapper\" \"user_property_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"${keycloak_openid_client.openid_client.id}\" name = \"test-mapper\" user_property = \"email\" claim_name = \"email\" } Example Usage (Client Scope) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"test-client-scope\" } resource \"keycloak_openid_user_property_protocol_mapper\" \"user_property_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\" name = \"test-mapper\" user_property = \"email\" claim_name = \"email\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm this protocol mapper exists within. One of the following arguments is required: client_id - The client this protocol mapper is attached to. client_scope_id - The client scope this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. user_property - (Required) The built in user property (such as email) to map a claim for. claim_name - (Required) The name of the claim to insert into a token. claim_value_type - (Optional) The claim type used when serializing JSON tokens. Can be one of String , long , int , or boolean . Defaults to String . add_to_id_token - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true . add_to_access_token - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true . add_to_userinfo - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to true . Import Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_openid_user_property_protocol_mapper.user_property_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_openid_user_property_protocol_mapper.user_property_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"keycloak_openid_user_property_protocol_mapper"},{"location":"resources/keycloak_openid_user_property_protocol_mapper/#keycloak_openid_user_property_protocol_mapper","text":"Allows for creating and managing user property protocol mappers within Keycloak. User property protocol mappers allow you to map built in properties defined on the Keycloak user interface to a claim in a token. Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between multiple different clients.","title":"keycloak_openid_user_property_protocol_mapper"},{"location":"resources/keycloak_openid_user_property_protocol_mapper/#example-usage-client","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client\" \"openid_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-client\" name = \"test client\" enabled = true access_type = \"CONFIDENTIAL\" valid_redirect_uris = [ \"http://localhost:8080/openid-callback\" ] } resource \"keycloak_openid_user_property_protocol_mapper\" \"user_property_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"${keycloak_openid_client.openid_client.id}\" name = \"test-mapper\" user_property = \"email\" claim_name = \"email\" }","title":"Example Usage (Client)"},{"location":"resources/keycloak_openid_user_property_protocol_mapper/#example-usage-client-scope","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_openid_client_scope\" \"client_scope\" { realm_id = \"${keycloak_realm.realm.id}\" name = \"test-client-scope\" } resource \"keycloak_openid_user_property_protocol_mapper\" \"user_property_mapper\" { realm_id = \"${keycloak_realm.realm.id}\" client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\" name = \"test-mapper\" user_property = \"email\" claim_name = \"email\" }","title":"Example Usage (Client Scope)"},{"location":"resources/keycloak_openid_user_property_protocol_mapper/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this protocol mapper exists within. One of the following arguments is required: client_id - The client this protocol mapper is attached to. client_scope_id - The client scope this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. user_property - (Required) The built in user property (such as email) to map a claim for. claim_name - (Required) The name of the claim to insert into a token. claim_value_type - (Optional) The claim type used when serializing JSON tokens. Can be one of String , long , int , or boolean . Defaults to String . add_to_id_token - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to true . add_to_access_token - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to true . add_to_userinfo - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to true .","title":"Argument Reference"},{"location":"resources/keycloak_openid_user_property_protocol_mapper/#import","text":"Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_openid_user_property_protocol_mapper.user_property_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_openid_user_property_protocol_mapper.user_property_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"Import"},{"location":"resources/keycloak_realm/","text":"keycloak_realm Allows for creating and managing Realms within Keycloak. A realm manages a logical collection of users, credentials, roles, and groups. Users log in to realms and can be federated from multiple sources. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true display_name = \"test realm\" login_theme = \"base\" access_code_lifespan = \"1h\" } Argument Reference The following arguments are supported: realm - (Required) The name of the realm. This is unique across Keycloak. enabled - (Optional) When false, users and clients will not be able to access this realm. Defaults to true . display_name - (Optional) The display name for the realm that is shown when logging in to the admin console. Login Settings The following attributes are all booleans, and can be found in the \"Login\" tab within the realm settings. If any of these attributes are not specified, they will default to Keycloak's default settings. registration_allowed - (Optional) When true, user registration will be enabled, and a link for registration will be displayed on the login page. registration_email_as_username - (Optional) When true, the user's email will be used as their username during registration. edit_username_allowed - (Optional) When true, the username field is editable. reset_password_allowed - (Optional) When true, a \"forgot password\" link will be displayed on the login page. remember_me - (Optional) When true, a \"remember me\" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts. verify_email - (Optional) When true, users are required to verify their email address after registration and after email address changes. login_with_email_allowed - (Optional) When true, users may log in with their email address. duplicate_emails_allowed - (Optional) When true, multiple users will be allowed to have the same email address. This attribute must be set to false if login_with_email_allowed is set to true . Themes The following attributes can be used to configure themes for the realm. Custom themes can be specified here. If any of these attributes are not specified, they will default to Keycloak's default settings. Typically the keycloak theme is used by default. login_theme - (Optional) Used for the login, forgot password, and registration pages. account_theme - (Optional) Used for account management pages. admin_theme - (Optional) Used for the admin console. email_theme - (Optional) Used for emails that are sent by Keycloak. Tokens The following attributes can be found in the \"Tokens\" tab within the realm settings. refresh_token_max_reuse - (Optional) Maximum number of times a refresh token can be reused before they are revoked. If unspecified, refresh tokens will only be revoked when a different token is used. The attributes below should be specified as Go duration strings . They will default to Keycloak's default settings. sso_session_idle_timeout - (Optional) The amount of time a session can be idle before it expires. sso_session_max_lifespan - (Optional) The maximum amount of time before a session expires regardless of activity. offline_session_idle_timeout - (Optional) The amount of time an offline session can be idle before it expires. offline_session_max_lifespan - (Optional) The maximum amount of time before an offline session expires regardless of activity. access_token_lifespan - (Optional) The amount of time an access token can be used before it expires. access_token_lifespan_for_implicit_flow - (Optional) The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires. access_code_lifespan - (Optional) The maximum amount of time a client has to finish the authorization code flow. access_code_lifespan_login - (Optional) The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted. access_code_lifespan_user_action - (Optional) The maximum amount of time a user has to complete login related actions, such as updating a password. action_token_generated_by_user_lifespan - (Optional) The maximum time a user has to use a user-generated permit before it expires. action_token_generated_by_admin_lifespan - (Optional) The maximum time a user has to use an admin-generated permit before it expires. Import Realms can be imported using their name: $ terraform import keycloak_realm.realm test","title":"keycloak_realm"},{"location":"resources/keycloak_realm/#keycloak_realm","text":"Allows for creating and managing Realms within Keycloak. A realm manages a logical collection of users, credentials, roles, and groups. Users log in to realms and can be federated from multiple sources.","title":"keycloak_realm"},{"location":"resources/keycloak_realm/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"test\" enabled = true display_name = \"test realm\" login_theme = \"base\" access_code_lifespan = \"1h\" }","title":"Example Usage"},{"location":"resources/keycloak_realm/#argument-reference","text":"The following arguments are supported: realm - (Required) The name of the realm. This is unique across Keycloak. enabled - (Optional) When false, users and clients will not be able to access this realm. Defaults to true . display_name - (Optional) The display name for the realm that is shown when logging in to the admin console.","title":"Argument Reference"},{"location":"resources/keycloak_realm/#login-settings","text":"The following attributes are all booleans, and can be found in the \"Login\" tab within the realm settings. If any of these attributes are not specified, they will default to Keycloak's default settings. registration_allowed - (Optional) When true, user registration will be enabled, and a link for registration will be displayed on the login page. registration_email_as_username - (Optional) When true, the user's email will be used as their username during registration. edit_username_allowed - (Optional) When true, the username field is editable. reset_password_allowed - (Optional) When true, a \"forgot password\" link will be displayed on the login page. remember_me - (Optional) When true, a \"remember me\" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts. verify_email - (Optional) When true, users are required to verify their email address after registration and after email address changes. login_with_email_allowed - (Optional) When true, users may log in with their email address. duplicate_emails_allowed - (Optional) When true, multiple users will be allowed to have the same email address. This attribute must be set to false if login_with_email_allowed is set to true .","title":"Login Settings"},{"location":"resources/keycloak_realm/#themes","text":"The following attributes can be used to configure themes for the realm. Custom themes can be specified here. If any of these attributes are not specified, they will default to Keycloak's default settings. Typically the keycloak theme is used by default. login_theme - (Optional) Used for the login, forgot password, and registration pages. account_theme - (Optional) Used for account management pages. admin_theme - (Optional) Used for the admin console. email_theme - (Optional) Used for emails that are sent by Keycloak.","title":"Themes"},{"location":"resources/keycloak_realm/#tokens","text":"The following attributes can be found in the \"Tokens\" tab within the realm settings. refresh_token_max_reuse - (Optional) Maximum number of times a refresh token can be reused before they are revoked. If unspecified, refresh tokens will only be revoked when a different token is used. The attributes below should be specified as Go duration strings . They will default to Keycloak's default settings. sso_session_idle_timeout - (Optional) The amount of time a session can be idle before it expires. sso_session_max_lifespan - (Optional) The maximum amount of time before a session expires regardless of activity. offline_session_idle_timeout - (Optional) The amount of time an offline session can be idle before it expires. offline_session_max_lifespan - (Optional) The maximum amount of time before an offline session expires regardless of activity. access_token_lifespan - (Optional) The amount of time an access token can be used before it expires. access_token_lifespan_for_implicit_flow - (Optional) The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires. access_code_lifespan - (Optional) The maximum amount of time a client has to finish the authorization code flow. access_code_lifespan_login - (Optional) The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted. access_code_lifespan_user_action - (Optional) The maximum amount of time a user has to complete login related actions, such as updating a password. action_token_generated_by_user_lifespan - (Optional) The maximum time a user has to use a user-generated permit before it expires. action_token_generated_by_admin_lifespan - (Optional) The maximum time a user has to use an admin-generated permit before it expires.","title":"Tokens"},{"location":"resources/keycloak_realm/#import","text":"Realms can be imported using their name: $ terraform import keycloak_realm.realm test","title":"Import"},{"location":"resources/keycloak_saml_client/","text":"keycloak_saml_client Allows for creating and managing Keycloak clients that use the SAML protocol. Clients are entities that can use Keycloak for user authentication. Typically, clients are applications that redirect users to Keycloak for authentication in order to take advantage of Keycloak's user sessions for SSO. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_saml_client\" \"saml_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-saml-client\" name = \"test-saml-client\" sign_documents = false sign_assertions = true include_authn_statement = true signing_certificate = \"${file(\"saml-cert.pem\")}\" signing_private_key = \"${file(\"saml-key.pem\")}\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm this client is attached to. client_id - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens. name - (Optional) The display name of this client in the GUI. enabled - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true . description - (Optional) The description of this client in the GUI. include_authn_statement - (Optional) When true , an AuthnStatement will be included in the SAML response. sign_documents - (Optional) When true , the SAML document will be signed by Keycloak using the realm's private key. sign_assertions - (Optional) When true , the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response. client_signature_required - (Optional) When true , Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via signing_certificate and signing_private_key . force_post_binding - (Optional) When true , Keycloak will always respond to an authentication request via the SAML POST Binding. front_channel_logout - (Optional) When true , this client will require a browser redirect in order to perform a logout. name_id_format - (Optional) Sets the Name ID format for the subject. root_url - (Optional) When specified, this value is prepended to all relative URLs. valid_redirect_uris - (Optional) When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request. base_url - (Optional) When specified, this URL will be used whenever Keycloak needs to link to this client. master_saml_processing_url - (Optional) When specified, this URL will be used for all SAML requests. signing_certificate - (Optional) If documents or assertions from the client are signed, this certificate will be used to verify the signature. signing_private_key - (Optional) If documents or assertions from the client are signed, this private key will be used to verify the signature. Import Clients can be imported using the format {{realm_id}}/{{client_keycloak_id}} , where client_keycloak_id is the unique ID that Keycloak assigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID. Example: $ terraform import keycloak_saml_client.saml_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352","title":"keycloak_saml_client"},{"location":"resources/keycloak_saml_client/#keycloak_saml_client","text":"Allows for creating and managing Keycloak clients that use the SAML protocol. Clients are entities that can use Keycloak for user authentication. Typically, clients are applications that redirect users to Keycloak for authentication in order to take advantage of Keycloak's user sessions for SSO.","title":"keycloak_saml_client"},{"location":"resources/keycloak_saml_client/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_saml_client\" \"saml_client\" { realm_id = \"${keycloak_realm.realm.id}\" client_id = \"test-saml-client\" name = \"test-saml-client\" sign_documents = false sign_assertions = true include_authn_statement = true signing_certificate = \"${file(\"saml-cert.pem\")}\" signing_private_key = \"${file(\"saml-key.pem\")}\" }","title":"Example Usage"},{"location":"resources/keycloak_saml_client/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this client is attached to. client_id - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens. name - (Optional) The display name of this client in the GUI. enabled - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to true . description - (Optional) The description of this client in the GUI. include_authn_statement - (Optional) When true , an AuthnStatement will be included in the SAML response. sign_documents - (Optional) When true , the SAML document will be signed by Keycloak using the realm's private key. sign_assertions - (Optional) When true , the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response. client_signature_required - (Optional) When true , Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via signing_certificate and signing_private_key . force_post_binding - (Optional) When true , Keycloak will always respond to an authentication request via the SAML POST Binding. front_channel_logout - (Optional) When true , this client will require a browser redirect in order to perform a logout. name_id_format - (Optional) Sets the Name ID format for the subject. root_url - (Optional) When specified, this value is prepended to all relative URLs. valid_redirect_uris - (Optional) When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request. base_url - (Optional) When specified, this URL will be used whenever Keycloak needs to link to this client. master_saml_processing_url - (Optional) When specified, this URL will be used for all SAML requests. signing_certificate - (Optional) If documents or assertions from the client are signed, this certificate will be used to verify the signature. signing_private_key - (Optional) If documents or assertions from the client are signed, this private key will be used to verify the signature.","title":"Argument Reference"},{"location":"resources/keycloak_saml_client/#import","text":"Clients can be imported using the format {{realm_id}}/{{client_keycloak_id}} , where client_keycloak_id is the unique ID that Keycloak assigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID. Example: $ terraform import keycloak_saml_client.saml_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352","title":"Import"},{"location":"resources/keycloak_saml_user_attribute_protocol_mapper/","text":"keycloak_saml_user_attribute_protocol_mapper Allows for creating and managing user attribute protocol mappers for SAML clients within Keycloak. SAML user attribute protocol mappers allow you to map custom attributes defined for a user within Keycloak to an attribute in a SAML assertion. Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between multiple different clients. Example Usage (Client) resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_saml_client\" \"saml_client\" { realm_id = \"${keycloak_realm.test.id}\" client_id = \"test-saml-client\" name = \"test-saml-client\" } resource \"keycloak_saml_user_attribute_protocol_mapper\" \"saml_user_attribute_mapper\" { realm_id = \"${keycloak_realm.test.id}\" client_id = \"${keycloak_saml_client.saml_client.id}\" name = \"displayname-user-attribute-mapper\" user_attribute = \"displayName\" saml_attribute_name = \"displayName\" saml_attribute_name_format = \"Unspecified\" } Argument Reference The following arguments are supported: realm_id - (Required) The realm this protocol mapper exists within. One of the following arguments is required: client_id - The SAML client this protocol mapper is attached to. client_scope_id - The SAML client scope this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. user_attribute - (Required) The custom user attribute to map. friendly_name - (Optional) An optional human-friendly name for this attribute. saml_attribute_name - (Required) The name of the SAML attribute. saml_attribute_name_format - (Required) The SAML attribute Name Format. Can be one of Unspecified , Basic , or URI Reference . Import Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_saml_user_attribute_protocol_mapper.saml_user_attribute_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_saml_user_attribute_protocol_mapper.saml_user_attribute_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"keycloak_saml_user_attribute_protocol_mapper"},{"location":"resources/keycloak_saml_user_attribute_protocol_mapper/#keycloak_saml_user_attribute_protocol_mapper","text":"Allows for creating and managing user attribute protocol mappers for SAML clients within Keycloak. SAML user attribute protocol mappers allow you to map custom attributes defined for a user within Keycloak to an attribute in a SAML assertion. Protocol mappers can be defined for a single client, or they can be defined for a client scope which can be shared between multiple different clients.","title":"keycloak_saml_user_attribute_protocol_mapper"},{"location":"resources/keycloak_saml_user_attribute_protocol_mapper/#example-usage-client","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_saml_client\" \"saml_client\" { realm_id = \"${keycloak_realm.test.id}\" client_id = \"test-saml-client\" name = \"test-saml-client\" } resource \"keycloak_saml_user_attribute_protocol_mapper\" \"saml_user_attribute_mapper\" { realm_id = \"${keycloak_realm.test.id}\" client_id = \"${keycloak_saml_client.saml_client.id}\" name = \"displayname-user-attribute-mapper\" user_attribute = \"displayName\" saml_attribute_name = \"displayName\" saml_attribute_name_format = \"Unspecified\" }","title":"Example Usage (Client)"},{"location":"resources/keycloak_saml_user_attribute_protocol_mapper/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this protocol mapper exists within. One of the following arguments is required: client_id - The SAML client this protocol mapper is attached to. client_scope_id - The SAML client scope this protocol mapper is attached to. name - (Required) The display name of this protocol mapper in the GUI. user_attribute - (Required) The custom user attribute to map. friendly_name - (Optional) An optional human-friendly name for this attribute. saml_attribute_name - (Required) The name of the SAML attribute. saml_attribute_name_format - (Required) The SAML attribute Name Format. Can be one of Unspecified , Basic , or URI Reference .","title":"Argument Reference"},{"location":"resources/keycloak_saml_user_attribute_protocol_mapper/#import","text":"Protocol mappers can be imported using one of the following formats: - Client: {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} - Client Scope: {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}} Example: $ terraform import keycloak_saml_user_attribute_protocol_mapper.saml_user_attribute_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4 $ terraform import keycloak_saml_user_attribute_protocol_mapper.saml_user_attribute_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4","title":"Import"},{"location":"resources/keycloak_user/","text":"keycloak_user Allows for creating and managing Users within Keycloak. This resource was created primarily to enable the acceptance tests for the keycloak_group resource. Creating users within Keycloak is not recommended. Instead, users should be federated from external sources by configuring user federation providers or identity providers. Example Usage resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_user\" \"user\" { realm_id = \"${keycloak_realm.realm.id}\" username = \"bob\" enabled = true email = \"bob@domain.com\" first_name = \"Bob\" last_name = \"Bobson\" } resource \"keycloak_user\" \"user_with_initial_password\" { realm_id = \"${keycloak_realm.realm.id}\" username = \"alice\" enabled = true email = \"alice@domain.com\" first_name = \"Alice\" last_name = \"Aliceberg\" initial_password { value = \"some password\" temporary = true } } Argument Reference The following arguments are supported: realm_id - (Required) The realm this user belongs to. username - (Required) The unique username of this user. initial_password (Optional) When given, the user's initial password will be set. This attribute is only respected during initial user creation. value (Required) The initial password. temporary (Optional) If set to true , the initial password is set up for renewal on first use. Default to false . enabled - (Optional) When false, this user cannot log in. Defaults to true . email - (Optional) The user's email. first_name - (Optional) The user's first name. last_name - (Optional) The user's last name. Import Users can be imported using the format {{realm_id}}/{{user_id}} , where user_id is the unique ID that Keycloak assigns to the user upon creation. This value can be found in the GUI when editing the user. Example: $ terraform import keycloak_user.user my-realm/60c3f971-b1d3-4b3a-9035-d16d7540a5e4","title":"keycloak_user"},{"location":"resources/keycloak_user/#keycloak_user","text":"Allows for creating and managing Users within Keycloak. This resource was created primarily to enable the acceptance tests for the keycloak_group resource. Creating users within Keycloak is not recommended. Instead, users should be federated from external sources by configuring user federation providers or identity providers.","title":"keycloak_user"},{"location":"resources/keycloak_user/#example-usage","text":"resource \"keycloak_realm\" \"realm\" { realm = \"my-realm\" enabled = true } resource \"keycloak_user\" \"user\" { realm_id = \"${keycloak_realm.realm.id}\" username = \"bob\" enabled = true email = \"bob@domain.com\" first_name = \"Bob\" last_name = \"Bobson\" } resource \"keycloak_user\" \"user_with_initial_password\" { realm_id = \"${keycloak_realm.realm.id}\" username = \"alice\" enabled = true email = \"alice@domain.com\" first_name = \"Alice\" last_name = \"Aliceberg\" initial_password { value = \"some password\" temporary = true } }","title":"Example Usage"},{"location":"resources/keycloak_user/#argument-reference","text":"The following arguments are supported: realm_id - (Required) The realm this user belongs to. username - (Required) The unique username of this user. initial_password (Optional) When given, the user's initial password will be set. This attribute is only respected during initial user creation. value (Required) The initial password. temporary (Optional) If set to true , the initial password is set up for renewal on first use. Default to false . enabled - (Optional) When false, this user cannot log in. Defaults to true . email - (Optional) The user's email. first_name - (Optional) The user's first name. last_name - (Optional) The user's last name.","title":"Argument Reference"},{"location":"resources/keycloak_user/#import","text":"Users can be imported using the format {{realm_id}}/{{user_id}} , where user_id is the unique ID that Keycloak assigns to the user upon creation. This value can be found in the GUI when editing the user. Example: $ terraform import keycloak_user.user my-realm/60c3f971-b1d3-4b3a-9035-d16d7540a5e4","title":"Import"}]}