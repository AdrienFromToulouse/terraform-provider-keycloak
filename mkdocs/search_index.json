{
    "docs": [
        {
            "location": "/",
            "text": "Installing\n\n\nYou can download the latest version of this provider on the\n\nGitHub releases\n\npage.\n\n\nPlease follow the \nofficial docs\n\nfor instructions on installing a third-party provider.\n\n\nKeycloak Setup\n\n\nThis Terraform provider can be configured to use the \nclient credentials\n\nor \npassword\n grant types. If you aren't\nsure which to use, the client credentials grant is recommended, as it was designed for machine to machine authentication.\n\n\nClient Credentials Grant Setup (recommended)\n\n\n\n\nCreate a new client using the \nopenid-connect\n protocol. This client can be created in the \nmaster\n realm if you would\nlike to manage your entire Keycloak instance, or in any other realm if you only want to manage that realm.\n\n\nUpdate the client you just created:\n    2a. Set \"Access Type\" to \"confidential\".\n    2b. Set \"Standard Flow Enabled\" to \"OFF\".\n    2c. Set \"Direct Access Grants Enabled\" to \"OFF\"\n    2d. Set \"Service Accounts Enabled\" to \"ON\".\n\n\nGrant required roles for managing Keycloak via the \"Service Account Roles\" tab in the client you created in step 1.\n\n\n\n\nPassword Grant Setup\n\n\nThese steps will assume that you are using the \nadmin-cli\n client, which is already correctly configured for this type\nof authentication. Do not follow these steps if you have already followed the steps for the client credentials grant.\n\n\n\n\nCreate or identify the user who's credentials will be used for authentication.\n\n\nEdit this user in the \"Users\" section of the management console and assign roles using the \"Role Mappings\" tab.\n\n\n\n\nAssigning Roles\n\n\nThere are many different ways that roles can be assigned to manage Keycloak. Here are a couple of common scenarios accompanied\nby suggested roles to assign. This is not an exhaustive list, and there is often more than one way to assign a particular set\nof permissions.\n\n\n\n\nManaging the entire Keycloak instance: Assign the \nadmin\n role to a user or service account within the \nmaster\n realm.\n\n\nManaging the entire \nfoo\n realm: Assign the \nrealm-admin\n client role from the \nrealm-management\n client to a user or service\naccount within the \nfoo\n realm.\n\n\nManaging clients for all realms within the entire Keycloak instance: Assign the \ncreate-client\n client role from each of\nthe realm clients to a user or service account within the \nmaster\n realm. For example, given a Keycloak instance with realms\n\nmaster\n, \nfoo\n, and \nbar\n, assign the \ncreate-client\n client role from the clients \nmaster-realm\n, \nfoo-realm\n, and \nbar-realm\n.\n\n\n\n\nProvider Setup\n\n\nThe following provider attributes are supported:\n\n\n\n\nclient_id\n (Required) - The \nclient_id\n for the client that was created in the \"Keycloak Setup\" section. Use the \nadmin-cli\n client if you are using the password grant. Defaults to the environment variable \nKEYCLOAK_CLIENT_ID\n.\n\n\nurl\n (Required) - The URL of the Keycloak instance, before \n/auth/admin\n. Defaults to the environment variable \nKEYCLOAK_URL\n.\n\n\nclient_secret\n (Optional) - The secret for the client used by the provider for authentication via the client credentials grant. This can be found or changed using the \"Credentials\" tab in the client settings. Defaults to the environment variable \nKEYCLOAK_CLIENT_SECRET\n. This attribute is required when using the client credentials grant, and cannot be set when using the password grant.\n\n\nusername\n (Optional) - The username of the user used by the provider for authentication via the password grant. Defaults to environment variable \nKEYCLOAK_USER\n. This attribute is required when using the password grant, and cannot be set when using the client credentials grant.\n\n\npassword\n (Optional) - The password of the user used by the provider for authentication via the password grant. Defaults to environment variable \nKEYCLOAK_PASSWORD\n. This attribute is required when using the password grant, and cannot be set when using the client credentials grant.\n\n\nrealm\n (Optional) - The realm used by the provider for authentication. Defaults to environment variable \nKEYCLOAK_REALM\n, or \nmaster\n if the environment variable is not specified.\n\n\n\n\nExample (client credentials)\n\n\nprovider \"keycloak\" {\n    client_id     = \"terraform\"\n    client_secret = \"884e0f95-0f42-4a63-9b1f-94274655669e\"\n    url           = \"http://localhost:8080\"\n}\n\n\n\n\nExample (password)\n\n\nprovider \"keycloak\" {\n    client_id     = \"terraform\"\n    username      = \"keycloak\"\n    password      = \"password\"\n    url           = \"http://localhost:8080\"\n}",
            "title": "Home"
        },
        {
            "location": "/#installing",
            "text": "You can download the latest version of this provider on the GitHub releases \npage.  Please follow the  official docs \nfor instructions on installing a third-party provider.",
            "title": "Installing"
        },
        {
            "location": "/#keycloak-setup",
            "text": "This Terraform provider can be configured to use the  client credentials \nor  password  grant types. If you aren't\nsure which to use, the client credentials grant is recommended, as it was designed for machine to machine authentication.",
            "title": "Keycloak Setup"
        },
        {
            "location": "/#client-credentials-grant-setup-recommended",
            "text": "Create a new client using the  openid-connect  protocol. This client can be created in the  master  realm if you would\nlike to manage your entire Keycloak instance, or in any other realm if you only want to manage that realm.  Update the client you just created:\n    2a. Set \"Access Type\" to \"confidential\".\n    2b. Set \"Standard Flow Enabled\" to \"OFF\".\n    2c. Set \"Direct Access Grants Enabled\" to \"OFF\"\n    2d. Set \"Service Accounts Enabled\" to \"ON\".  Grant required roles for managing Keycloak via the \"Service Account Roles\" tab in the client you created in step 1.",
            "title": "Client Credentials Grant Setup (recommended)"
        },
        {
            "location": "/#password-grant-setup",
            "text": "These steps will assume that you are using the  admin-cli  client, which is already correctly configured for this type\nof authentication. Do not follow these steps if you have already followed the steps for the client credentials grant.   Create or identify the user who's credentials will be used for authentication.  Edit this user in the \"Users\" section of the management console and assign roles using the \"Role Mappings\" tab.",
            "title": "Password Grant Setup"
        },
        {
            "location": "/#assigning-roles",
            "text": "There are many different ways that roles can be assigned to manage Keycloak. Here are a couple of common scenarios accompanied\nby suggested roles to assign. This is not an exhaustive list, and there is often more than one way to assign a particular set\nof permissions.   Managing the entire Keycloak instance: Assign the  admin  role to a user or service account within the  master  realm.  Managing the entire  foo  realm: Assign the  realm-admin  client role from the  realm-management  client to a user or service\naccount within the  foo  realm.  Managing clients for all realms within the entire Keycloak instance: Assign the  create-client  client role from each of\nthe realm clients to a user or service account within the  master  realm. For example, given a Keycloak instance with realms master ,  foo , and  bar , assign the  create-client  client role from the clients  master-realm ,  foo-realm , and  bar-realm .",
            "title": "Assigning Roles"
        },
        {
            "location": "/#provider-setup",
            "text": "The following provider attributes are supported:   client_id  (Required) - The  client_id  for the client that was created in the \"Keycloak Setup\" section. Use the  admin-cli  client if you are using the password grant. Defaults to the environment variable  KEYCLOAK_CLIENT_ID .  url  (Required) - The URL of the Keycloak instance, before  /auth/admin . Defaults to the environment variable  KEYCLOAK_URL .  client_secret  (Optional) - The secret for the client used by the provider for authentication via the client credentials grant. This can be found or changed using the \"Credentials\" tab in the client settings. Defaults to the environment variable  KEYCLOAK_CLIENT_SECRET . This attribute is required when using the client credentials grant, and cannot be set when using the password grant.  username  (Optional) - The username of the user used by the provider for authentication via the password grant. Defaults to environment variable  KEYCLOAK_USER . This attribute is required when using the password grant, and cannot be set when using the client credentials grant.  password  (Optional) - The password of the user used by the provider for authentication via the password grant. Defaults to environment variable  KEYCLOAK_PASSWORD . This attribute is required when using the password grant, and cannot be set when using the client credentials grant.  realm  (Optional) - The realm used by the provider for authentication. Defaults to environment variable  KEYCLOAK_REALM , or  master  if the environment variable is not specified.",
            "title": "Provider Setup"
        },
        {
            "location": "/#example-client-credentials",
            "text": "provider \"keycloak\" {\n    client_id     = \"terraform\"\n    client_secret = \"884e0f95-0f42-4a63-9b1f-94274655669e\"\n    url           = \"http://localhost:8080\"\n}",
            "title": "Example (client credentials)"
        },
        {
            "location": "/#example-password",
            "text": "provider \"keycloak\" {\n    client_id     = \"terraform\"\n    username      = \"keycloak\"\n    password      = \"password\"\n    url           = \"http://localhost:8080\"\n}",
            "title": "Example (password)"
        },
        {
            "location": "/resources/keycloak_custom_user_federation/",
            "text": "keycloak_custom_user_federation\n\n\nAllows for creating and managing custom user federation providers within Keycloak.\n\n\nA custom user federation provider is an implementation of Keycloak's\n\nUser Storage SPI\n.\nAn example of this implementation can be found \nhere\n.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"test\"\n    enabled = true\n}\n\nresource \"keycloak_custom_user_federation\" \"custom_user_federation\" {\n    name        = \"custom\"\n    realm_id    = \"${keycloak_realm.realm.id}\"\n    provider_id = \"custom\"\n\n    enabled     = true\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm that this provider will provide user federation for.\n\n\nname\n - (Required) Display name of the provider when displayed in the console.\n\n\nprovider_id\n - (Required) The unique ID of the custom provider, specified in the \ngetId\n implementation for the \nUserStorageProviderFactory\n interface.\n\n\nenabled\n - (Optional) When \nfalse\n, this provider will not be used when performing queries for users. Defaults to \ntrue\n.\n\n\npriority\n - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to \n0\n.\n\n\ncache_policy\n - (Optional) Can be one of \nDEFAULT\n, \nEVICT_DAILY\n, \nEVICT_WEEKLY\n, \nMAX_LIFESPAN\n, or \nNO_CACHE\n. Defaults to \nDEFAULT\n.\n\n\n\n\nImport\n\n\nCustom user federation providers can be imported using the format \n{{realm_id}}/{{custom_user_federation_id}}\n.\nThe ID of the custom user federation provider can be found within the Keycloak GUI and is typically a GUID:\n\n\n$ terraform import keycloak_custom_user_federation.custom_user_federation my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860",
            "title": "Keycloak custom user federation"
        },
        {
            "location": "/resources/keycloak_custom_user_federation/#keycloak_custom_user_federation",
            "text": "Allows for creating and managing custom user federation providers within Keycloak.  A custom user federation provider is an implementation of Keycloak's User Storage SPI .\nAn example of this implementation can be found  here .",
            "title": "keycloak_custom_user_federation"
        },
        {
            "location": "/resources/keycloak_custom_user_federation/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"test\"\n    enabled = true\n}\n\nresource \"keycloak_custom_user_federation\" \"custom_user_federation\" {\n    name        = \"custom\"\n    realm_id    = \"${keycloak_realm.realm.id}\"\n    provider_id = \"custom\"\n\n    enabled     = true\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_custom_user_federation/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm that this provider will provide user federation for.  name  - (Required) Display name of the provider when displayed in the console.  provider_id  - (Required) The unique ID of the custom provider, specified in the  getId  implementation for the  UserStorageProviderFactory  interface.  enabled  - (Optional) When  false , this provider will not be used when performing queries for users. Defaults to  true .  priority  - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to  0 .  cache_policy  - (Optional) Can be one of  DEFAULT ,  EVICT_DAILY ,  EVICT_WEEKLY ,  MAX_LIFESPAN , or  NO_CACHE . Defaults to  DEFAULT .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_custom_user_federation/#import",
            "text": "Custom user federation providers can be imported using the format  {{realm_id}}/{{custom_user_federation_id}} .\nThe ID of the custom user federation provider can be found within the Keycloak GUI and is typically a GUID:  $ terraform import keycloak_custom_user_federation.custom_user_federation my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_group/",
            "text": "keycloak_group\n\n\nAllows for creating and managing Groups within Keycloak.\n\n\nGroups provide a logical wrapping for users within Keycloak. Users within a\ngroup can share attributes and roles, and group membership can be mapped\nto a claim.\n\n\nGroups can also be federated from external data sources, such as LDAP or Active Directory.\nThis resource \nshould not\n be used to manage groups that were created this way.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_group\" \"parent_group\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"parent-group\"\n}\n\nresource \"keycloak_group\" \"child_group\" {\n    realm_id  = \"${keycloak_realm.realm.id}\"\n    parent_id = \"${keycloak_group.parent_group.id}\"\n    name      = \"child-group\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this group exists in.\n\n\nparent_id\n - (Optional) The ID of this group's parent. If omitted, this group will be defined at the root level.\n\n\nname\n - (Required) The name of the group.\n\n\n\n\nAttributes Reference\n\n\nIn addition to the arguments listed above, the following computed attributes are exported:\n\n\n\n\npath\n - The complete path of the group. For example, the child group's path in the example configuration would be \n/parent-group/child-group\n.\n\n\n\n\nImport\n\n\nGroups can be imported using the format \n{{realm_id}}/{{group_id}}\n, where \ngroup_id\n is the unique ID that Keycloak\nassigns to the group upon creation. This value can be found in the URI when editing this group in the GUI, and is typically a GUID.\n\n\nExample:\n\n\n$ terraform import keycloak_group.child_group my-realm/934a4a4e-28bd-4703-a0fa-332df153aabd",
            "title": "Keycloak group"
        },
        {
            "location": "/resources/keycloak_group/#keycloak_group",
            "text": "Allows for creating and managing Groups within Keycloak.  Groups provide a logical wrapping for users within Keycloak. Users within a\ngroup can share attributes and roles, and group membership can be mapped\nto a claim.  Groups can also be federated from external data sources, such as LDAP or Active Directory.\nThis resource  should not  be used to manage groups that were created this way.",
            "title": "keycloak_group"
        },
        {
            "location": "/resources/keycloak_group/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_group\" \"parent_group\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"parent-group\"\n}\n\nresource \"keycloak_group\" \"child_group\" {\n    realm_id  = \"${keycloak_realm.realm.id}\"\n    parent_id = \"${keycloak_group.parent_group.id}\"\n    name      = \"child-group\"\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_group/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this group exists in.  parent_id  - (Optional) The ID of this group's parent. If omitted, this group will be defined at the root level.  name  - (Required) The name of the group.",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_group/#attributes-reference",
            "text": "In addition to the arguments listed above, the following computed attributes are exported:   path  - The complete path of the group. For example, the child group's path in the example configuration would be  /parent-group/child-group .",
            "title": "Attributes Reference"
        },
        {
            "location": "/resources/keycloak_group/#import",
            "text": "Groups can be imported using the format  {{realm_id}}/{{group_id}} , where  group_id  is the unique ID that Keycloak\nassigns to the group upon creation. This value can be found in the URI when editing this group in the GUI, and is typically a GUID.  Example:  $ terraform import keycloak_group.child_group my-realm/934a4a4e-28bd-4703-a0fa-332df153aabd",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_group_memberships/",
            "text": "keycloak_group_memberships\n\n\nAllows for managing a Keycloak group's members.\n\n\nNote that this resource attempts to be an \nauthoritative\n source over group members.\nWhen this resource takes control over a group's members, users that are manually added\nto the group will be removed, and users that are manually removed from the group will\nbe added upon the next run of \nterraform apply\n.  Eventually, a non-authoritative resource\nfor group membership will be added to this provider.\n\n\nThis resource \nshould not\n be used to control membership of a group that has its members\nfederated from an external source via group mapping.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_group\" \"group\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"my-group\"\n}\n\nresource \"keycloak_user\" \"user\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    username = \"my-user\"\n}\n\nresource \"keycloak_group_memberships\" \"group_members\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    group_id = \"${keycloak_group.group.id}\"\n\n    members  = [\n        \"${keycloak_user.user.username}\"\n    ]\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this group exists in.\n\n\ngroup_id\n - (Required) The ID of the group this resource should manage memberships for.\n\n\nmembers\n - (Required) An array of usernames that belong to this group.\n\n\n\n\nImport\n\n\nThis resource does not support import. Instead of importing, feel free to create this resource\nas if it did not already exist on the server.",
            "title": "Keycloak group memberships"
        },
        {
            "location": "/resources/keycloak_group_memberships/#keycloak_group_memberships",
            "text": "Allows for managing a Keycloak group's members.  Note that this resource attempts to be an  authoritative  source over group members.\nWhen this resource takes control over a group's members, users that are manually added\nto the group will be removed, and users that are manually removed from the group will\nbe added upon the next run of  terraform apply .  Eventually, a non-authoritative resource\nfor group membership will be added to this provider.  This resource  should not  be used to control membership of a group that has its members\nfederated from an external source via group mapping.",
            "title": "keycloak_group_memberships"
        },
        {
            "location": "/resources/keycloak_group_memberships/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_group\" \"group\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"my-group\"\n}\n\nresource \"keycloak_user\" \"user\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    username = \"my-user\"\n}\n\nresource \"keycloak_group_memberships\" \"group_members\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    group_id = \"${keycloak_group.group.id}\"\n\n    members  = [\n        \"${keycloak_user.user.username}\"\n    ]\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_group_memberships/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this group exists in.  group_id  - (Required) The ID of the group this resource should manage memberships for.  members  - (Required) An array of usernames that belong to this group.",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_group_memberships/#import",
            "text": "This resource does not support import. Instead of importing, feel free to create this resource\nas if it did not already exist on the server.",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_ldap_full_name_mapper/",
            "text": "keycloak_ldap_full_name_mapper\n\n\nAllows for creating and managing full name mappers for Keycloak users federated\nvia LDAP.\n\n\nThe LDAP full name mapper can map a user's full name from an LDAP attribute\nto the first and last name attributes of a Keycloak user.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"test\"\n    enabled = true\n}\n\nresource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" {\n    name                    = \"openldap\"\n    realm_id                = \"${keycloak_realm.realm.id}\"\n\n    username_ldap_attribute = \"cn\"\n    rdn_ldap_attribute      = \"cn\"\n    uuid_ldap_attribute     = \"entryDN\"\n    user_object_classes     = [\n        \"simpleSecurityObject\",\n        \"organizationalRole\"\n    ]\n    connection_url          = \"ldap://openldap\"\n    users_dn                = \"dc=example,dc=org\"\n    bind_dn                 = \"cn=admin,dc=example,dc=org\"\n    bind_credential         = \"admin\"\n}\n\nresource \"keycloak_ldap_full_name_mapper\" \"ldap_full_name_mapper\" {\n    realm_id                 = \"${keycloak_realm.realm.id}\"\n    ldap_user_federation_id  = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\"\n    name                     = \"full-name-mapper\"\n    ldap_full_name_attribute = \"cn\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm that this LDAP mapper will exist in.\n\n\nldap_user_federation_id\n - (Required) The ID of the LDAP user federation provider to attach this mapper to.\n\n\nname\n - (Required) Display name of this mapper when displayed in the console.\n\n\nldap_full_name_attribute\n - (Required) The name of the LDAP attribute containing the user's full name.\n\n\nread_only\n - (Optional) When \ntrue\n, updates to a user within Keycloak will not be written back to LDAP. Defaults to \nfalse\n.\n\n\nwrite_only\n - (Optional) When \ntrue\n, this mapper will only be used to write updates to LDAP. Defaults to \nfalse\n.\n\n\n\n\nImport\n\n\nLDAP mappers can be imported using the format \n{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}\n.\nThe ID of the LDAP user federation provider and the mapper can be found within\nthe Keycloak GUI, and they are typically GUIDs:\n\n\n$ terraform import keycloak_ldap_full_name_mapper.ldap_full_name_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67",
            "title": "Keycloak ldap full name mapper"
        },
        {
            "location": "/resources/keycloak_ldap_full_name_mapper/#keycloak_ldap_full_name_mapper",
            "text": "Allows for creating and managing full name mappers for Keycloak users federated\nvia LDAP.  The LDAP full name mapper can map a user's full name from an LDAP attribute\nto the first and last name attributes of a Keycloak user.",
            "title": "keycloak_ldap_full_name_mapper"
        },
        {
            "location": "/resources/keycloak_ldap_full_name_mapper/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"test\"\n    enabled = true\n}\n\nresource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" {\n    name                    = \"openldap\"\n    realm_id                = \"${keycloak_realm.realm.id}\"\n\n    username_ldap_attribute = \"cn\"\n    rdn_ldap_attribute      = \"cn\"\n    uuid_ldap_attribute     = \"entryDN\"\n    user_object_classes     = [\n        \"simpleSecurityObject\",\n        \"organizationalRole\"\n    ]\n    connection_url          = \"ldap://openldap\"\n    users_dn                = \"dc=example,dc=org\"\n    bind_dn                 = \"cn=admin,dc=example,dc=org\"\n    bind_credential         = \"admin\"\n}\n\nresource \"keycloak_ldap_full_name_mapper\" \"ldap_full_name_mapper\" {\n    realm_id                 = \"${keycloak_realm.realm.id}\"\n    ldap_user_federation_id  = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\"\n    name                     = \"full-name-mapper\"\n    ldap_full_name_attribute = \"cn\"\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_ldap_full_name_mapper/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm that this LDAP mapper will exist in.  ldap_user_federation_id  - (Required) The ID of the LDAP user federation provider to attach this mapper to.  name  - (Required) Display name of this mapper when displayed in the console.  ldap_full_name_attribute  - (Required) The name of the LDAP attribute containing the user's full name.  read_only  - (Optional) When  true , updates to a user within Keycloak will not be written back to LDAP. Defaults to  false .  write_only  - (Optional) When  true , this mapper will only be used to write updates to LDAP. Defaults to  false .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_ldap_full_name_mapper/#import",
            "text": "LDAP mappers can be imported using the format  {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} .\nThe ID of the LDAP user federation provider and the mapper can be found within\nthe Keycloak GUI, and they are typically GUIDs:  $ terraform import keycloak_ldap_full_name_mapper.ldap_full_name_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_ldap_group_mapper/",
            "text": "keycloak_ldap_group_mapper\n\n\nAllows for creating and managing group mappers for Keycloak users federated\nvia LDAP.\n\n\nThe LDAP group mapper can be used to map an LDAP user's groups from some DN\nto Keycloak groups. This group mapper will also create the groups within Keycloak\nif they do not already exist.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"test\"\n    enabled = true\n}\n\nresource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" {\n    name                    = \"openldap\"\n    realm_id                = \"${keycloak_realm.realm.id}\"\n\n    username_ldap_attribute = \"cn\"\n    rdn_ldap_attribute      = \"cn\"\n    uuid_ldap_attribute     = \"entryDN\"\n    user_object_classes     = [\n        \"simpleSecurityObject\",\n        \"organizationalRole\"\n    ]\n    connection_url          = \"ldap://openldap\"\n    users_dn                = \"dc=example,dc=org\"\n    bind_dn                 = \"cn=admin,dc=example,dc=org\"\n    bind_credential         = \"admin\"\n}\n\nresource \"keycloak_ldap_group_mapper\" \"ldap_group_mapper\" {\n    realm_id                       = \"${keycloak_realm.realm.id}\"\n    ldap_user_federation_id        = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\"\n    name                           = \"group-mapper\"\n\n    ldap_groups_dn                 = \"dc=example,dc=org\"\n    group_name_ldap_attribute      = \"cn\"\n    group_object_classes           = [\n        \"groupOfNames\"\n    ]\n    membership_attribute_type      = \"DN\"\n    membership_ldap_attribute      = \"member\"\n    membership_user_ldap_attribute = \"cn\"\n    memberof_ldap_attribute        = \"memberOf\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm that this LDAP mapper will exist in.\n\n\nldap_user_federation_id\n - (Required) The ID of the LDAP user federation provider to attach this mapper to.\n\n\nname\n - (Required) Display name of this mapper when displayed in the console.\n\n\nldap_groups_dn\n - (Required) The LDAP DN where groups can be found.\n\n\ngroup_name_ldap_attribute\n - (Required) The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically \ncn\n.\n\n\ngroup_object_classes\n - (Required) Array of strings representing the object classes for the group. Must contain at least one.\n\n\npreserve_group_inheritance\n - (Optional) When \ntrue\n, group inheritance will be propagated from LDAP to Keycloak. When \nfalse\n, all LDAP groups will be propagated as top level groups within Keycloak.\n\n\nignore_missing_groups\n - (Optional) When \ntrue\n, missing groups in the hierarchy will be ignored.\n\n\nmembership_ldap_attribute\n - (Required) The name of the LDAP attribute that is used for membership mappings.\n\n\nmembership_attribute_type\n - (Optional) Can be one of \nDN\n or \nUID\n. Defaults to \nDN\n.\n\n\nmembership_user_ldap_attribute\n - (Required) The name of the LDAP attribute on a user that is used for membership mappings.\n\n\ngroups_ldap_filter\n - (Optional) When specified, adds an additional custom filter to be used when querying for groups. Must start with \n(\n and end with \n)\n.\n\n\nmode\n - (Optional) Can be one of \nREAD_ONLY\n or \nLDAP_ONLY\n. Defaults to \nREAD_ONLY\n.\n\n\nuser_roles_retrieve_strategy\n - (Optional) Can be one of \nLOAD_GROUPS_BY_MEMBER_ATTRIBUTE\n, \nGET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE\n, or \nLOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY\n. Defaults to \nLOAD_GROUPS_BY_MEMBER_ATTRIBUTE\n.\n\n\nmemberof_ldap_attribute\n - (Optional) Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to \nmemberOf\n.\n\n\nmapped_group_attributes\n - (Optional) Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group.\n\n\ndrop_non_existing_groups_during_sync\n - (Optional) When \ntrue\n, groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to \nfalse\n.\n\n\n\n\nImport\n\n\nLDAP mappers can be imported using the format \n{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}\n.\nThe ID of the LDAP user federation provider and the mapper can be found within\nthe Keycloak GUI, and they are typically GUIDs:\n\n\n$ terraform import keycloak_ldap_group_mapper.ldap_group_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67",
            "title": "Keycloak ldap group mapper"
        },
        {
            "location": "/resources/keycloak_ldap_group_mapper/#keycloak_ldap_group_mapper",
            "text": "Allows for creating and managing group mappers for Keycloak users federated\nvia LDAP.  The LDAP group mapper can be used to map an LDAP user's groups from some DN\nto Keycloak groups. This group mapper will also create the groups within Keycloak\nif they do not already exist.",
            "title": "keycloak_ldap_group_mapper"
        },
        {
            "location": "/resources/keycloak_ldap_group_mapper/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"test\"\n    enabled = true\n}\n\nresource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" {\n    name                    = \"openldap\"\n    realm_id                = \"${keycloak_realm.realm.id}\"\n\n    username_ldap_attribute = \"cn\"\n    rdn_ldap_attribute      = \"cn\"\n    uuid_ldap_attribute     = \"entryDN\"\n    user_object_classes     = [\n        \"simpleSecurityObject\",\n        \"organizationalRole\"\n    ]\n    connection_url          = \"ldap://openldap\"\n    users_dn                = \"dc=example,dc=org\"\n    bind_dn                 = \"cn=admin,dc=example,dc=org\"\n    bind_credential         = \"admin\"\n}\n\nresource \"keycloak_ldap_group_mapper\" \"ldap_group_mapper\" {\n    realm_id                       = \"${keycloak_realm.realm.id}\"\n    ldap_user_federation_id        = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\"\n    name                           = \"group-mapper\"\n\n    ldap_groups_dn                 = \"dc=example,dc=org\"\n    group_name_ldap_attribute      = \"cn\"\n    group_object_classes           = [\n        \"groupOfNames\"\n    ]\n    membership_attribute_type      = \"DN\"\n    membership_ldap_attribute      = \"member\"\n    membership_user_ldap_attribute = \"cn\"\n    memberof_ldap_attribute        = \"memberOf\"\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_ldap_group_mapper/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm that this LDAP mapper will exist in.  ldap_user_federation_id  - (Required) The ID of the LDAP user federation provider to attach this mapper to.  name  - (Required) Display name of this mapper when displayed in the console.  ldap_groups_dn  - (Required) The LDAP DN where groups can be found.  group_name_ldap_attribute  - (Required) The name of the LDAP attribute that is used in group objects for the name and RDN of the group. Typically  cn .  group_object_classes  - (Required) Array of strings representing the object classes for the group. Must contain at least one.  preserve_group_inheritance  - (Optional) When  true , group inheritance will be propagated from LDAP to Keycloak. When  false , all LDAP groups will be propagated as top level groups within Keycloak.  ignore_missing_groups  - (Optional) When  true , missing groups in the hierarchy will be ignored.  membership_ldap_attribute  - (Required) The name of the LDAP attribute that is used for membership mappings.  membership_attribute_type  - (Optional) Can be one of  DN  or  UID . Defaults to  DN .  membership_user_ldap_attribute  - (Required) The name of the LDAP attribute on a user that is used for membership mappings.  groups_ldap_filter  - (Optional) When specified, adds an additional custom filter to be used when querying for groups. Must start with  (  and end with  ) .  mode  - (Optional) Can be one of  READ_ONLY  or  LDAP_ONLY . Defaults to  READ_ONLY .  user_roles_retrieve_strategy  - (Optional) Can be one of  LOAD_GROUPS_BY_MEMBER_ATTRIBUTE ,  GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE , or  LOAD_GROUPS_BY_MEMBER_ATTRIBUTE_RECURSIVELY . Defaults to  LOAD_GROUPS_BY_MEMBER_ATTRIBUTE .  memberof_ldap_attribute  - (Optional) Specifies the name of the LDAP attribute on the LDAP user that contains the groups the user is a member of. Defaults to  memberOf .  mapped_group_attributes  - (Optional) Array of strings representing attributes on the LDAP group which will be mapped to attributes on the Keycloak group.  drop_non_existing_groups_during_sync  - (Optional) When  true , groups that no longer exist within LDAP will be dropped in Keycloak during sync. Defaults to  false .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_ldap_group_mapper/#import",
            "text": "LDAP mappers can be imported using the format  {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} .\nThe ID of the LDAP user federation provider and the mapper can be found within\nthe Keycloak GUI, and they are typically GUIDs:  $ terraform import keycloak_ldap_group_mapper.ldap_group_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_ldap_msad_user_account_control_mapper/",
            "text": "keycloak_ldap_msad_user_account_control_mapper\n\n\nAllows for creating and managing MSAD user account control mappers for Keycloak\nusers federated via LDAP.\n\n\nThe MSAD (Microsoft Active Directory) user account control mapper is specific\nto LDAP user federation providers that are pulling from AD, and it can propagate\nAD user state to Keycloak in order to enforce settings like expired passwords\nor disabled accounts.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"test\"\n    enabled = true\n}\n\nresource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" {\n    name                    = \"ad\"\n    realm_id                = \"${keycloak_realm.realm.id}\"\n\n    username_ldap_attribute = \"cn\"\n    rdn_ldap_attribute      = \"cn\"\n    uuid_ldap_attribute     = \"objectGUID\"\n    user_object_classes     = [\n        \"person\",\n        \"organizationalPerson\",\n        \"user\"\n    ]\n    connection_url          = \"ldap://my-ad-server\"\n    users_dn                = \"dc=example,dc=org\"\n    bind_dn                 = \"cn=admin,dc=example,dc=org\"\n    bind_credential         = \"admin\"\n}\n\nresource \"keycloak_ldap_msad_user_account_control_mapper\" \"msad_user_account_control_mapper\" {\n    realm_id                 = \"${keycloak_realm.realm.id}\"\n    ldap_user_federation_id  = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\"\n    name                     = \"msad-user-account-control-mapper\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm that this LDAP mapper will exist in.\n\n\nldap_user_federation_id\n - (Required) The ID of the LDAP user federation provider to attach this mapper to.\n\n\nname\n - (Required) Display name of this mapper when displayed in the console.\n\n\nldap_password_policy_hints_enabled\n - (Optional) When \ntrue\n, advanced password policies, such as password hints and previous password history will be used when writing new passwords to AD. Defaults to \nfalse\n.\n\n\n\n\nImport\n\n\nLDAP mappers can be imported using the format \n{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}\n.\nThe ID of the LDAP user federation provider and the mapper can be found within\nthe Keycloak GUI, and they are typically GUIDs:\n\n\n$ terraform import keycloak_ldap_msad_user_account_control_mapper.msad_user_account_control_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67",
            "title": "Keycloak ldap msad user account control mapper"
        },
        {
            "location": "/resources/keycloak_ldap_msad_user_account_control_mapper/#keycloak_ldap_msad_user_account_control_mapper",
            "text": "Allows for creating and managing MSAD user account control mappers for Keycloak\nusers federated via LDAP.  The MSAD (Microsoft Active Directory) user account control mapper is specific\nto LDAP user federation providers that are pulling from AD, and it can propagate\nAD user state to Keycloak in order to enforce settings like expired passwords\nor disabled accounts.",
            "title": "keycloak_ldap_msad_user_account_control_mapper"
        },
        {
            "location": "/resources/keycloak_ldap_msad_user_account_control_mapper/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"test\"\n    enabled = true\n}\n\nresource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" {\n    name                    = \"ad\"\n    realm_id                = \"${keycloak_realm.realm.id}\"\n\n    username_ldap_attribute = \"cn\"\n    rdn_ldap_attribute      = \"cn\"\n    uuid_ldap_attribute     = \"objectGUID\"\n    user_object_classes     = [\n        \"person\",\n        \"organizationalPerson\",\n        \"user\"\n    ]\n    connection_url          = \"ldap://my-ad-server\"\n    users_dn                = \"dc=example,dc=org\"\n    bind_dn                 = \"cn=admin,dc=example,dc=org\"\n    bind_credential         = \"admin\"\n}\n\nresource \"keycloak_ldap_msad_user_account_control_mapper\" \"msad_user_account_control_mapper\" {\n    realm_id                 = \"${keycloak_realm.realm.id}\"\n    ldap_user_federation_id  = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\"\n    name                     = \"msad-user-account-control-mapper\"\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_ldap_msad_user_account_control_mapper/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm that this LDAP mapper will exist in.  ldap_user_federation_id  - (Required) The ID of the LDAP user federation provider to attach this mapper to.  name  - (Required) Display name of this mapper when displayed in the console.  ldap_password_policy_hints_enabled  - (Optional) When  true , advanced password policies, such as password hints and previous password history will be used when writing new passwords to AD. Defaults to  false .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_ldap_msad_user_account_control_mapper/#import",
            "text": "LDAP mappers can be imported using the format  {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} .\nThe ID of the LDAP user federation provider and the mapper can be found within\nthe Keycloak GUI, and they are typically GUIDs:  $ terraform import keycloak_ldap_msad_user_account_control_mapper.msad_user_account_control_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_ldap_user_attribute_mapper/",
            "text": "keycloak_ldap_user_attribute_mapper\n\n\nAllows for creating and managing user attribute mappers for Keycloak users\nfederated via LDAP.\n\n\nThe LDAP user attribute mapper can be used to map a single LDAP attribute\nto an attribute on the Keycloak user model.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"test\"\n    enabled = true\n}\n\nresource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" {\n    name                    = \"openldap\"\n    realm_id                = \"${keycloak_realm.realm.id}\"\n\n    username_ldap_attribute = \"cn\"\n    rdn_ldap_attribute      = \"cn\"\n    uuid_ldap_attribute     = \"entryDN\"\n    user_object_classes     = [\n        \"simpleSecurityObject\",\n        \"organizationalRole\"\n    ]\n    connection_url          = \"ldap://openldap\"\n    users_dn                = \"dc=example,dc=org\"\n    bind_dn                 = \"cn=admin,dc=example,dc=org\"\n    bind_credential         = \"admin\"\n}\n\nresource \"keycloak_ldap_user_attribute_mapper\" \"ldap_user_attribute_mapper\" {\n    realm_id                = \"${keycloak_realm.realm.id}\"\n    ldap_user_federation_id = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\"\n    name                    = \"user-attribute-mapper\"\n\n    user_model_attribute    = \"foo\"\n    ldap_attribute          = \"bar\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm that this LDAP mapper will exist in.\n\n\nldap_user_federation_id\n - (Required) The ID of the LDAP user federation provider to attach this mapper to.\n\n\nname\n - (Required) Display name of this mapper when displayed in the console.\n\n\nuser_model_attribute\n - (Required) Name of the user property or attribute you want to map the LDAP attribute into.\n\n\nldap_attribute\n - (Required) Name of the mapped attribute on the LDAP object.\n\n\nread_only\n - (Optional) When \ntrue\n, this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to \nfalse\n.\n\n\nalways_read_value_from_ldap\n - (Optional) When \ntrue\n, the value fetched from LDAP will override the value stored in Keycloak. Defaults to \nfalse\n.\n\n\nis_mandatory_in_ldap\n - (Optional) When \ntrue\n, this attribute must exist in LDAP. Defaults to \nfalse\n.\n\n\n\n\nImport\n\n\nLDAP mappers can be imported using the format \n{{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}}\n.\nThe ID of the LDAP user federation provider and the mapper can be found within\nthe Keycloak GUI, and they are typically GUIDs:\n\n\n$ terraform import keycloak_ldap_user_attribute_mapper.ldap_user_attribute_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67",
            "title": "Keycloak ldap user attribute mapper"
        },
        {
            "location": "/resources/keycloak_ldap_user_attribute_mapper/#keycloak_ldap_user_attribute_mapper",
            "text": "Allows for creating and managing user attribute mappers for Keycloak users\nfederated via LDAP.  The LDAP user attribute mapper can be used to map a single LDAP attribute\nto an attribute on the Keycloak user model.",
            "title": "keycloak_ldap_user_attribute_mapper"
        },
        {
            "location": "/resources/keycloak_ldap_user_attribute_mapper/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"test\"\n    enabled = true\n}\n\nresource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" {\n    name                    = \"openldap\"\n    realm_id                = \"${keycloak_realm.realm.id}\"\n\n    username_ldap_attribute = \"cn\"\n    rdn_ldap_attribute      = \"cn\"\n    uuid_ldap_attribute     = \"entryDN\"\n    user_object_classes     = [\n        \"simpleSecurityObject\",\n        \"organizationalRole\"\n    ]\n    connection_url          = \"ldap://openldap\"\n    users_dn                = \"dc=example,dc=org\"\n    bind_dn                 = \"cn=admin,dc=example,dc=org\"\n    bind_credential         = \"admin\"\n}\n\nresource \"keycloak_ldap_user_attribute_mapper\" \"ldap_user_attribute_mapper\" {\n    realm_id                = \"${keycloak_realm.realm.id}\"\n    ldap_user_federation_id = \"${keycloak_ldap_user_federation.ldap_user_federation.id}\"\n    name                    = \"user-attribute-mapper\"\n\n    user_model_attribute    = \"foo\"\n    ldap_attribute          = \"bar\"\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_ldap_user_attribute_mapper/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm that this LDAP mapper will exist in.  ldap_user_federation_id  - (Required) The ID of the LDAP user federation provider to attach this mapper to.  name  - (Required) Display name of this mapper when displayed in the console.  user_model_attribute  - (Required) Name of the user property or attribute you want to map the LDAP attribute into.  ldap_attribute  - (Required) Name of the mapped attribute on the LDAP object.  read_only  - (Optional) When  true , this attribute is not saved back to LDAP when the user attribute is updated in Keycloak. Defaults to  false .  always_read_value_from_ldap  - (Optional) When  true , the value fetched from LDAP will override the value stored in Keycloak. Defaults to  false .  is_mandatory_in_ldap  - (Optional) When  true , this attribute must exist in LDAP. Defaults to  false .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_ldap_user_attribute_mapper/#import",
            "text": "LDAP mappers can be imported using the format  {{realm_id}}/{{ldap_user_federation_id}}/{{ldap_mapper_id}} .\nThe ID of the LDAP user federation provider and the mapper can be found within\nthe Keycloak GUI, and they are typically GUIDs:  $ terraform import keycloak_ldap_user_attribute_mapper.ldap_user_attribute_mapper my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860/3d923ece-1a91-4bf7-adaf-3b82f2a12b67",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_ldap_user_federation/",
            "text": "keycloak_ldap_user_federation\n\n\nAllows for creating and managing LDAP user federation providers within Keycloak.\n\n\nKeycloak can use an LDAP user federation provider to federate users to Keycloak\nfrom a directory system such as LDAP or Active Directory. Federated users\nwill exist within the realm and will be able to log in to clients. Federated\nusers can have their attributes defined using mappers.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"test\"\n    enabled = true\n}\n\nresource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" {\n    name                    = \"openldap\"\n    realm_id                = \"${keycloak_realm.realm.id}\"\n\n    enabled                 = true\n\n    username_ldap_attribute = \"cn\"\n    rdn_ldap_attribute      = \"cn\"\n    uuid_ldap_attribute     = \"entryDN\"\n    user_object_classes     = [\n        \"simpleSecurityObject\",\n        \"organizationalRole\"\n    ]\n    connection_url          = \"ldap://openldap\"\n    users_dn                = \"dc=example,dc=org\"\n    bind_dn                 = \"cn=admin,dc=example,dc=org\"\n    bind_credential         = \"admin\"\n\n    connection_timeout      = \"5s\"\n    read_timeout            = \"10s\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm that this provider will provide user federation for.\n\n\nname\n - (Required) Display name of the provider when displayed in the console.\n\n\nenabled\n - (Optional) When \nfalse\n, this provider will not be used when performing queries for users. Defaults to \ntrue\n.\n\n\npriority\n - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to \n0\n.\n\n\nimport_enabled\n - (Optional) When \ntrue\n, LDAP users will be imported into the Keycloak database. Defaults to \ntrue\n.\n\n\nedit_mode\n - (Optional) Can be one of \nREAD_ONLY\n, \nWRITABLE\n, or \nUNSYNCED\n. \nUNSYNCED\n allows user data to be imported but not synced back to LDAP. Defaults to \nREAD_ONLY\n.\n\n\nsync_registrations\n - (Optional) When \ntrue\n, newly created users will be synced back to LDAP. Defaults to \nfalse\n.\n\n\nvendor\n - (Optional) Can be one of \nOTHER\n, \nEDIRECTORY\n, \nAD\n, \nRHDS\n, or \nTIVOLI\n. When this is selected in the GUI, it provides reasonable defaults for other fields. When used with the Keycloak API, this attribute does nothing, but is still required. Defaults to \nOPTIONAL\n.\n\n\nusername_ldap_attribute\n - (Required) Name of the LDAP attribute to use as the Keycloak username.\n\n\nrdn_ldap_attribute\n - (Required) Name of the LDAP attribute to use as the relative distinguished name.\n\n\nuuid_ldap_attribute\n - (Required) Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.\n\n\nuser_object_classes\n - (Required) Array of all values of LDAP objectClass attribute for users in LDAP. Must contain at least one.\n\n\nconnection_url\n - (Required) Connection URL to the LDAP server.\n\n\nusers_dn\n - (Required) Full DN of LDAP tree where your users are.\n\n\nbind_dn\n - (Optional) DN of LDAP admin, which will be used by Keycloak to access LDAP server. This attribute must be set if \nbind_credential\n is set.\n\n\nbind_credential\n - (Optional) Password of LDAP admin. This attribute must be set if \nbind_dn\n is set.\n\n\ncustom_user_search_filter\n - (Optional) Additional LDAP filter for filtering searched users. Must begin with \n(\n and end with \n)\n.\n\n\nsearch_scope\n - (Optional) Can be one of \nONE_LEVEL\n or \nSUBTREE\n:\n\n\nONE_LEVEL\n: Only search for users in the DN specified by \nuser_dn\n.\n\n\nSUBTREE\n: Search entire LDAP subtree.\n\n\nvalidate_password_policy\n - (Optional) When \ntrue\n, Keycloak will validate passwords using the realm policy before updating it.\n\n\nuse_truststore_spi\n - (Optional) Can be one of \nALWAYS\n, \nONLY_FOR_LDAPS\n, or \nNEVER\n:\n\n\nALWAYS\n - Always use the truststore SPI for LDAP connections.\n\n\nNEVER\n - Never use the truststore SPI for LDAP connections.\n\n\nONLY_FOR_LDAPS\n - Only use the truststore SPI if your LDAP connection uses the ldaps protocol.\n\n\nconnection_timeout\n - (Optional) LDAP connection timeout in the format of a \nGo duration string\n.\n\n\nread_timeout\n - (Optional) LDAP read timeout in the format of a \nGo duration string\n.\n\n\npagination\n - (Optional) When true, Keycloak assumes the LDAP server supports pagination. Defaults to \ntrue\n.\n\n\nbatch_size_for_sync\n - (Optional) The number of users to sync within a single transaction. Defaults to \n1000\n.\n\n\nfull_sync_period\n - (Optional) How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync.\n\n\nchanged_sync_period\n - (Optional) How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed users sync.\n\n\ncache_policy\n - (Optional) Can be one of \nDEFAULT\n, \nEVICT_DAILY\n, \nEVICT_WEEKLY\n, \nMAX_LIFESPAN\n, or \nNO_CACHE\n. Defaults to \nDEFAULT\n.\n\n\n\n\nImport\n\n\nLDAP user federation providers can be imported using the format \n{{realm_id}}/{{ldap_user_federation_id}}\n.\nThe ID of the LDAP user federation provider can be found within the Keycloak GUI and is typically a GUID:\n\n\n$ terraform import keycloak_ldap_user_federation.ldap_user_federation my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860",
            "title": "Keycloak ldap user federation"
        },
        {
            "location": "/resources/keycloak_ldap_user_federation/#keycloak_ldap_user_federation",
            "text": "Allows for creating and managing LDAP user federation providers within Keycloak.  Keycloak can use an LDAP user federation provider to federate users to Keycloak\nfrom a directory system such as LDAP or Active Directory. Federated users\nwill exist within the realm and will be able to log in to clients. Federated\nusers can have their attributes defined using mappers.",
            "title": "keycloak_ldap_user_federation"
        },
        {
            "location": "/resources/keycloak_ldap_user_federation/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"test\"\n    enabled = true\n}\n\nresource \"keycloak_ldap_user_federation\" \"ldap_user_federation\" {\n    name                    = \"openldap\"\n    realm_id                = \"${keycloak_realm.realm.id}\"\n\n    enabled                 = true\n\n    username_ldap_attribute = \"cn\"\n    rdn_ldap_attribute      = \"cn\"\n    uuid_ldap_attribute     = \"entryDN\"\n    user_object_classes     = [\n        \"simpleSecurityObject\",\n        \"organizationalRole\"\n    ]\n    connection_url          = \"ldap://openldap\"\n    users_dn                = \"dc=example,dc=org\"\n    bind_dn                 = \"cn=admin,dc=example,dc=org\"\n    bind_credential         = \"admin\"\n\n    connection_timeout      = \"5s\"\n    read_timeout            = \"10s\"\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_ldap_user_federation/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm that this provider will provide user federation for.  name  - (Required) Display name of the provider when displayed in the console.  enabled  - (Optional) When  false , this provider will not be used when performing queries for users. Defaults to  true .  priority  - (Optional) Priority of this provider when looking up users. Lower values are first. Defaults to  0 .  import_enabled  - (Optional) When  true , LDAP users will be imported into the Keycloak database. Defaults to  true .  edit_mode  - (Optional) Can be one of  READ_ONLY ,  WRITABLE , or  UNSYNCED .  UNSYNCED  allows user data to be imported but not synced back to LDAP. Defaults to  READ_ONLY .  sync_registrations  - (Optional) When  true , newly created users will be synced back to LDAP. Defaults to  false .  vendor  - (Optional) Can be one of  OTHER ,  EDIRECTORY ,  AD ,  RHDS , or  TIVOLI . When this is selected in the GUI, it provides reasonable defaults for other fields. When used with the Keycloak API, this attribute does nothing, but is still required. Defaults to  OPTIONAL .  username_ldap_attribute  - (Required) Name of the LDAP attribute to use as the Keycloak username.  rdn_ldap_attribute  - (Required) Name of the LDAP attribute to use as the relative distinguished name.  uuid_ldap_attribute  - (Required) Name of the LDAP attribute to use as a unique object identifier for objects in LDAP.  user_object_classes  - (Required) Array of all values of LDAP objectClass attribute for users in LDAP. Must contain at least one.  connection_url  - (Required) Connection URL to the LDAP server.  users_dn  - (Required) Full DN of LDAP tree where your users are.  bind_dn  - (Optional) DN of LDAP admin, which will be used by Keycloak to access LDAP server. This attribute must be set if  bind_credential  is set.  bind_credential  - (Optional) Password of LDAP admin. This attribute must be set if  bind_dn  is set.  custom_user_search_filter  - (Optional) Additional LDAP filter for filtering searched users. Must begin with  (  and end with  ) .  search_scope  - (Optional) Can be one of  ONE_LEVEL  or  SUBTREE :  ONE_LEVEL : Only search for users in the DN specified by  user_dn .  SUBTREE : Search entire LDAP subtree.  validate_password_policy  - (Optional) When  true , Keycloak will validate passwords using the realm policy before updating it.  use_truststore_spi  - (Optional) Can be one of  ALWAYS ,  ONLY_FOR_LDAPS , or  NEVER :  ALWAYS  - Always use the truststore SPI for LDAP connections.  NEVER  - Never use the truststore SPI for LDAP connections.  ONLY_FOR_LDAPS  - Only use the truststore SPI if your LDAP connection uses the ldaps protocol.  connection_timeout  - (Optional) LDAP connection timeout in the format of a  Go duration string .  read_timeout  - (Optional) LDAP read timeout in the format of a  Go duration string .  pagination  - (Optional) When true, Keycloak assumes the LDAP server supports pagination. Defaults to  true .  batch_size_for_sync  - (Optional) The number of users to sync within a single transaction. Defaults to  1000 .  full_sync_period  - (Optional) How frequently Keycloak should sync all LDAP users, in seconds. Omit this property to disable periodic full sync.  changed_sync_period  - (Optional) How frequently Keycloak should sync changed LDAP users, in seconds. Omit this property to disable periodic changed users sync.  cache_policy  - (Optional) Can be one of  DEFAULT ,  EVICT_DAILY ,  EVICT_WEEKLY ,  MAX_LIFESPAN , or  NO_CACHE . Defaults to  DEFAULT .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_ldap_user_federation/#import",
            "text": "LDAP user federation providers can be imported using the format  {{realm_id}}/{{ldap_user_federation_id}} .\nThe ID of the LDAP user federation provider can be found within the Keycloak GUI and is typically a GUID:  $ terraform import keycloak_ldap_user_federation.ldap_user_federation my-realm/af2a6ca3-e4d7-49c3-b08b-1b3c70b4b860",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_openid_audience_protocol_mapper/",
            "text": "keycloak_openid_audience_protocol_mapper\n\n\nAllows for creating and managing audience protocol mappers within\nKeycloak. This mapper was added in Keycloak v4.6.0.Final.\n\n\nAudience protocol mappers allow you add audiences to the \naud\n claim\nwithin issued tokens. The audience can be a custom string, or it can be\nmapped to the ID of a pre-existing client.\n\n\nExample Usage (Client)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\nresource \"keycloak_openid_audience_protocol_mapper\" \"audience_mapper\" {\n    realm_id                 = \"${keycloak_realm.realm.id}\"\n    client_id                = \"${keycloak_openid_client.openid_client.id}\"\n    name                     = \"audience-mapper\"\n\n    included_custom_audience = \"foo\"\n}\n\n\n\n\nExample Usage (Client Scope)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_audience_protocol_mapper\" \"audience_mapper\" {\n    realm_id                 = \"${keycloak_realm.realm.id}\"\n    client_scope_id          = \"${keycloak_openid_client_scope.client_scope.id}\"\n    name                     = \"audience-mapper\"\n\n    included_custom_audience = \"foo\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this protocol mapper exists within.\n\n\nclient_id\n - (Required if \nclient_scope_id\n is not specified) The client this protocol mapper is attached to.\n\n\nclient_scope_id\n - (Required if \nclient_id\n is not specified) The client scope this protocol mapper is attached to.\n\n\nname\n - (Required) The display name of this protocol mapper in the GUI.\n\n\nincluded_client_audience\n - (Required if \nincluded_custom_audience\n is not specified) A client ID to include within the token's \naud\n claim.\n\n\nincluded_custom_audience\n - (Required if \nincluded_client_audience\n is not specified) A custom audience to include within the token's \naud\n claim.\n\n\nadd_to_id_token\n - (Optional) Indicates if the audience should be included in the \naud\n claim for the id token. Defaults to \ntrue\n.\n\n\nadd_to_access_token\n - (Optional) Indicates if the audience should be included in the \naud\n claim for the id token. Defaults to \ntrue\n.\n\n\n\n\nImport\n\n\nProtocol mappers can be imported using one of the following formats:\n- Client: \n{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}\n\n- Client Scope: \n{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}\n\n\nExample:\n\n\n$ terraform import keycloak_openid_audience_protocol_mapper.audience_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_openid_audience_protocol_mapper.audience_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Keycloak openid audience protocol mapper"
        },
        {
            "location": "/resources/keycloak_openid_audience_protocol_mapper/#keycloak_openid_audience_protocol_mapper",
            "text": "Allows for creating and managing audience protocol mappers within\nKeycloak. This mapper was added in Keycloak v4.6.0.Final.  Audience protocol mappers allow you add audiences to the  aud  claim\nwithin issued tokens. The audience can be a custom string, or it can be\nmapped to the ID of a pre-existing client.",
            "title": "keycloak_openid_audience_protocol_mapper"
        },
        {
            "location": "/resources/keycloak_openid_audience_protocol_mapper/#example-usage-client",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\nresource \"keycloak_openid_audience_protocol_mapper\" \"audience_mapper\" {\n    realm_id                 = \"${keycloak_realm.realm.id}\"\n    client_id                = \"${keycloak_openid_client.openid_client.id}\"\n    name                     = \"audience-mapper\"\n\n    included_custom_audience = \"foo\"\n}",
            "title": "Example Usage (Client)"
        },
        {
            "location": "/resources/keycloak_openid_audience_protocol_mapper/#example-usage-client-scope",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_audience_protocol_mapper\" \"audience_mapper\" {\n    realm_id                 = \"${keycloak_realm.realm.id}\"\n    client_scope_id          = \"${keycloak_openid_client_scope.client_scope.id}\"\n    name                     = \"audience-mapper\"\n\n    included_custom_audience = \"foo\"\n}",
            "title": "Example Usage (Client Scope)"
        },
        {
            "location": "/resources/keycloak_openid_audience_protocol_mapper/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this protocol mapper exists within.  client_id  - (Required if  client_scope_id  is not specified) The client this protocol mapper is attached to.  client_scope_id  - (Required if  client_id  is not specified) The client scope this protocol mapper is attached to.  name  - (Required) The display name of this protocol mapper in the GUI.  included_client_audience  - (Required if  included_custom_audience  is not specified) A client ID to include within the token's  aud  claim.  included_custom_audience  - (Required if  included_client_audience  is not specified) A custom audience to include within the token's  aud  claim.  add_to_id_token  - (Optional) Indicates if the audience should be included in the  aud  claim for the id token. Defaults to  true .  add_to_access_token  - (Optional) Indicates if the audience should be included in the  aud  claim for the id token. Defaults to  true .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_openid_audience_protocol_mapper/#import",
            "text": "Protocol mappers can be imported using one of the following formats:\n- Client:  {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} \n- Client Scope:  {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}  Example:  $ terraform import keycloak_openid_audience_protocol_mapper.audience_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_openid_audience_protocol_mapper.audience_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_openid_client/",
            "text": "keycloak_openid_client\n\n\nAllows for creating and managing Keycloak clients that use the OpenID Connect protocol.\n\n\nClients are entities that can use Keycloak for user authentication. Typically,\nclients are applications that redirect users to Keycloak for authentication\nin order to take advantage of Keycloak's user sessions for SSO.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this client is attached to.\n\n\nclient_id\n - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens.\n\n\nname\n - (Optional) The display name of this client in the GUI.\n\n\nenabled\n - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to \ntrue\n.\n\n\ndescription\n - (Optional) The description of this client in the GUI.\n\n\naccess_type\n - (Required) Specifies the type of client, which can be one of the following:\n\n\nCONFIDENTIAL\n - Used for server-side clients that require both client ID and secret when authenticating.\nThis client should be used for applications using the Authorization Code or Client Credentials grant flows.\n\n\nPUBLIC\n - Used for browser-only applications that do not require a client secret, and instead rely only on authorized redirect\nURIs for security. This client should be used for applications using the Implicit grant flow.\n\n\nBEARER-ONLY\n - Used for services that never initiate a login. This client will only allow bearer token requests.\n\n\n\n\n\n\nclient_secret\n - (Optional) The secret for clients with an \naccess_type\n of \nCONFIDENTIAL\n or \nBEARER-ONLY\n. This value is sensitive and\nshould be treated with the same care as a password. If omitted, Keycloak will generate a GUID for this attribute.\n\n\nstandard_flow_enabled\n - (Optional) When \ntrue\n, the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to \nfalse\n.\n\n\nimplicit_flow_enabled\n - (Optional) When \ntrue\n, the OAuth2 Implicit Grant will be enabled for this client. Defaults to \nfalse\n.\n\n\ndirect_access_grants_enabled\n - (Optional) When \ntrue\n, the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to \nfalse\n.\n\n\nservice_accounts_enabled\n - (Optional) When \ntrue\n, the OAuth2 Client Credentials grant will be enabled for this client. Defaults to \nfalse\n.\n\n\nvalid_redirect_uris\n - (Optional) A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple\nwildcards in the form of an asterisk can be used here. This attribute must be set if either \nstandard_flow_enabled\n or \nimplicit_flow_enabled\n\nis set to \ntrue\n.\n\n\nweb_origins\n - (Optional) A list of allowed CORS origins. \n+\n can be used to permit all valid redirect URIs, and \n*\n can be used to permit all origins.\n\n\n\n\nImport\n\n\nClients can be imported using the format \n{{realm_id}}/{{client_keycloak_id}}\n, where \nclient_keycloak_id\n is the unique ID that Keycloak\nassigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID.\n\n\nExample:\n\n\n$ terraform import keycloak_openid_client.openid_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352",
            "title": "Keycloak openid client"
        },
        {
            "location": "/resources/keycloak_openid_client/#keycloak_openid_client",
            "text": "Allows for creating and managing Keycloak clients that use the OpenID Connect protocol.  Clients are entities that can use Keycloak for user authentication. Typically,\nclients are applications that redirect users to Keycloak for authentication\nin order to take advantage of Keycloak's user sessions for SSO.",
            "title": "keycloak_openid_client"
        },
        {
            "location": "/resources/keycloak_openid_client/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_openid_client/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this client is attached to.  client_id  - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens.  name  - (Optional) The display name of this client in the GUI.  enabled  - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to  true .  description  - (Optional) The description of this client in the GUI.  access_type  - (Required) Specifies the type of client, which can be one of the following:  CONFIDENTIAL  - Used for server-side clients that require both client ID and secret when authenticating.\nThis client should be used for applications using the Authorization Code or Client Credentials grant flows.  PUBLIC  - Used for browser-only applications that do not require a client secret, and instead rely only on authorized redirect\nURIs for security. This client should be used for applications using the Implicit grant flow.  BEARER-ONLY  - Used for services that never initiate a login. This client will only allow bearer token requests.    client_secret  - (Optional) The secret for clients with an  access_type  of  CONFIDENTIAL  or  BEARER-ONLY . This value is sensitive and\nshould be treated with the same care as a password. If omitted, Keycloak will generate a GUID for this attribute.  standard_flow_enabled  - (Optional) When  true , the OAuth2 Authorization Code Grant will be enabled for this client. Defaults to  false .  implicit_flow_enabled  - (Optional) When  true , the OAuth2 Implicit Grant will be enabled for this client. Defaults to  false .  direct_access_grants_enabled  - (Optional) When  true , the OAuth2 Resource Owner Password Grant will be enabled for this client. Defaults to  false .  service_accounts_enabled  - (Optional) When  true , the OAuth2 Client Credentials grant will be enabled for this client. Defaults to  false .  valid_redirect_uris  - (Optional) A list of valid URIs a browser is permitted to redirect to after a successful login or logout. Simple\nwildcards in the form of an asterisk can be used here. This attribute must be set if either  standard_flow_enabled  or  implicit_flow_enabled \nis set to  true .  web_origins  - (Optional) A list of allowed CORS origins.  +  can be used to permit all valid redirect URIs, and  *  can be used to permit all origins.",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_openid_client/#import",
            "text": "Clients can be imported using the format  {{realm_id}}/{{client_keycloak_id}} , where  client_keycloak_id  is the unique ID that Keycloak\nassigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID.  Example:  $ terraform import keycloak_openid_client.openid_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_openid_client_default_scopes/",
            "text": "keycloak_openid_client_default_scopes\n\n\nAllows for managing a Keycloak client's default client scopes. A default\nscope that is attached to a client using the OpenID Connect protocol will\nautomatically use the protocol mappers defined within that scope to build\nclaims for this client regardless of the provided OAuth2.0 \nscope\n parameter.\n\n\nNote that this resource attempts to be an \nauthoritative\n source over\ndefault scopes for a Keycloak client using the OpenID Connect protocol.\nThis means that once Terraform controls a particular client's default scopes,\nit will attempt to remove any default scopes that were attached manually,\nand it will attempt to add any default scopes that were detached manually.\n\n\nBy default, Keycloak sets the \nprofile\n, \nemail\n, \nroles\n, and \nweb-origins\n\nscopes as default scopes for every newly created client. If you create this\nresource for the first time and do not include these scopes, a following run\nof \nterraform plan\n will result in changes.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"client\" {\n    realm_id    = \"${keycloak_realm.realm.id}\"\n    client_id   = \"test-client\"\n\n    access_type = \"CONFIDENTIAL\"\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_client_default_scopes\" \"client_default_scopes\" {\n    realm_id       = \"${keycloak_realm.realm.id}\"\n    client_id      = \"${keycloak_openid_client.client.id}\"\n\n    default_scopes = [\n        \"profile\",\n        \"email\",\n        \"roles\",\n        \"web-origins\",\n        \"${keycloak_openid_client_scope.client_scope.name}\"\n    ]\n}\n\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this client and scopes exists in.\n\n\nclient_id\n - (Required) The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.\n\n\ndefault_scopes\n - (Required) An array of client scope names to attach to this client.\n\n\n\n\nImport\n\n\nThis resource does not support import. Instead of importing, feel free to create this resource\nas if it did not already exist on the server.",
            "title": "Keycloak openid client default scopes"
        },
        {
            "location": "/resources/keycloak_openid_client_default_scopes/#keycloak_openid_client_default_scopes",
            "text": "Allows for managing a Keycloak client's default client scopes. A default\nscope that is attached to a client using the OpenID Connect protocol will\nautomatically use the protocol mappers defined within that scope to build\nclaims for this client regardless of the provided OAuth2.0  scope  parameter.  Note that this resource attempts to be an  authoritative  source over\ndefault scopes for a Keycloak client using the OpenID Connect protocol.\nThis means that once Terraform controls a particular client's default scopes,\nit will attempt to remove any default scopes that were attached manually,\nand it will attempt to add any default scopes that were detached manually.  By default, Keycloak sets the  profile ,  email ,  roles , and  web-origins \nscopes as default scopes for every newly created client. If you create this\nresource for the first time and do not include these scopes, a following run\nof  terraform plan  will result in changes.",
            "title": "keycloak_openid_client_default_scopes"
        },
        {
            "location": "/resources/keycloak_openid_client_default_scopes/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"client\" {\n    realm_id    = \"${keycloak_realm.realm.id}\"\n    client_id   = \"test-client\"\n\n    access_type = \"CONFIDENTIAL\"\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_client_default_scopes\" \"client_default_scopes\" {\n    realm_id       = \"${keycloak_realm.realm.id}\"\n    client_id      = \"${keycloak_openid_client.client.id}\"\n\n    default_scopes = [\n        \"profile\",\n        \"email\",\n        \"roles\",\n        \"web-origins\",\n        \"${keycloak_openid_client_scope.client_scope.name}\"\n    ]\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_openid_client_default_scopes/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this client and scopes exists in.  client_id  - (Required) The ID of the client to attach default scopes to. Note that this is the unique ID of the client generated by Keycloak.  default_scopes  - (Required) An array of client scope names to attach to this client.",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_openid_client_default_scopes/#import",
            "text": "This resource does not support import. Instead of importing, feel free to create this resource\nas if it did not already exist on the server.",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_openid_client_optional_scopes/",
            "text": "keycloak_openid_client_optional_scopes\n\n\nAllows for managing a Keycloak client's optional client scopes. An optional\nscope that is attached to a client using the OpenID Connect protocol will\nallow a client to request it using the OAuth 2.0 \nscope\n parameter. When\nrequested, the scope's protocol mappers defined within that scope will be\nused to build claims for this client.\n\n\nNote that this resource attempts to be an \nauthoritative\n source over\noptional scopes for a Keycloak client using the OpenID Connect protocol.\nThis means that once Terraform controls a particular client's optional scopes,\nit will attempt to remove any optional scopes that were attached manually,\nand it will attempt to add any optional scopes that were detached manually.\n\n\nBy default, Keycloak sets the \naddress\n, \nphone\n and \noffline_access\n scopes as\noptional scopes for every newly created client. If you create this resource for\nthe first time and do not include these scopes, a following run of \nterraform plan\n\nwill result in changes.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"client\" {\n    realm_id    = \"${keycloak_realm.realm.id}\"\n    client_id   = \"test-client\"\n\n    access_type = \"CONFIDENTIAL\"\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_client_optional_scopes\" \"client_optional_scopes\" {\n    realm_id       = \"${keycloak_realm.realm.id}\"\n    client_id      = \"${keycloak_openid_client.client.id}\"\n\n    optional_scopes = [\n        \"address\",\n        \"phone\",\n        \"offline_access\",\n        \"${keycloak_openid_client_scope.client_scope.name}\"\n    ]\n}\n\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this client and scopes exists in.\n\n\nclient_id\n - (Required) The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.\n\n\noptional_scopes\n - (Required) An array of client scope names to attach to this client as optional scopes.\n\n\n\n\nImport\n\n\nThis resource does not support import. Instead of importing, feel free to create this resource\nas if it did not already exist on the server.",
            "title": "Keycloak openid client optional scopes"
        },
        {
            "location": "/resources/keycloak_openid_client_optional_scopes/#keycloak_openid_client_optional_scopes",
            "text": "Allows for managing a Keycloak client's optional client scopes. An optional\nscope that is attached to a client using the OpenID Connect protocol will\nallow a client to request it using the OAuth 2.0  scope  parameter. When\nrequested, the scope's protocol mappers defined within that scope will be\nused to build claims for this client.  Note that this resource attempts to be an  authoritative  source over\noptional scopes for a Keycloak client using the OpenID Connect protocol.\nThis means that once Terraform controls a particular client's optional scopes,\nit will attempt to remove any optional scopes that were attached manually,\nand it will attempt to add any optional scopes that were detached manually.  By default, Keycloak sets the  address ,  phone  and  offline_access  scopes as\noptional scopes for every newly created client. If you create this resource for\nthe first time and do not include these scopes, a following run of  terraform plan \nwill result in changes.",
            "title": "keycloak_openid_client_optional_scopes"
        },
        {
            "location": "/resources/keycloak_openid_client_optional_scopes/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"client\" {\n    realm_id    = \"${keycloak_realm.realm.id}\"\n    client_id   = \"test-client\"\n\n    access_type = \"CONFIDENTIAL\"\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_client_optional_scopes\" \"client_optional_scopes\" {\n    realm_id       = \"${keycloak_realm.realm.id}\"\n    client_id      = \"${keycloak_openid_client.client.id}\"\n\n    optional_scopes = [\n        \"address\",\n        \"phone\",\n        \"offline_access\",\n        \"${keycloak_openid_client_scope.client_scope.name}\"\n    ]\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_openid_client_optional_scopes/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this client and scopes exists in.  client_id  - (Required) The ID of the client to attach optional scopes to. Note that this is the unique ID of the client generated by Keycloak.  optional_scopes  - (Required) An array of client scope names to attach to this client as optional scopes.",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_openid_client_optional_scopes/#import",
            "text": "This resource does not support import. Instead of importing, feel free to create this resource\nas if it did not already exist on the server.",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_openid_client_scope/",
            "text": "keycloak_openid_client_scope\n\n\nAllows for creating and managing Keycloak client scopes that can be attached to\nclients that use the OpenID Connect protocol.\n\n\nClient Scopes can be used to share common protocol and role mappings between multiple\nclients within a realm. They can also be used by clients to conditionally request\nclaims or roles for a user based on the OAuth 2.0 \nscope\n parameter.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"openid_client_scope\" {\n    realm_id    = \"${keycloak_realm.realm.id}\"\n    name        = \"groups\"\n    description = \"When requested, this scope will map a user's group memberships to a claim\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this client scope belongs to.\n\n\nname\n - (Required) The display name of this client scope in the GUI.\n\n\ndescription\n - (Optional) The description of this client scope in the GUI.\n\n\nconsent_screen_text\n - (Optional) When set, a consent screen will be displayed to users\nauthenticating to clients with this scope attached. The consent screen will display the string\nvalue of this attribute.\n\n\n\n\nImport\n\n\nClient scopes can be imported using the format \n{{realm_id}}/{{client_scope_id}}\n, where \nclient_scope_id\n is the unique ID that Keycloak\nassigns to the client scope upon creation. This value can be found in the URI when editing this client scope in the GUI, and is typically a GUID.\n\n\nExample:\n\n\n$ terraform import keycloak_openid_client_scope.openid_client_scope my-realm/8e8f7fe1-df9b-40ed-bed3-4597aa0dac52",
            "title": "Keycloak openid client scope"
        },
        {
            "location": "/resources/keycloak_openid_client_scope/#keycloak_openid_client_scope",
            "text": "Allows for creating and managing Keycloak client scopes that can be attached to\nclients that use the OpenID Connect protocol.  Client Scopes can be used to share common protocol and role mappings between multiple\nclients within a realm. They can also be used by clients to conditionally request\nclaims or roles for a user based on the OAuth 2.0  scope  parameter.",
            "title": "keycloak_openid_client_scope"
        },
        {
            "location": "/resources/keycloak_openid_client_scope/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"openid_client_scope\" {\n    realm_id    = \"${keycloak_realm.realm.id}\"\n    name        = \"groups\"\n    description = \"When requested, this scope will map a user's group memberships to a claim\"\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_openid_client_scope/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this client scope belongs to.  name  - (Required) The display name of this client scope in the GUI.  description  - (Optional) The description of this client scope in the GUI.  consent_screen_text  - (Optional) When set, a consent screen will be displayed to users\nauthenticating to clients with this scope attached. The consent screen will display the string\nvalue of this attribute.",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_openid_client_scope/#import",
            "text": "Client scopes can be imported using the format  {{realm_id}}/{{client_scope_id}} , where  client_scope_id  is the unique ID that Keycloak\nassigns to the client scope upon creation. This value can be found in the URI when editing this client scope in the GUI, and is typically a GUID.  Example:  $ terraform import keycloak_openid_client_scope.openid_client_scope my-realm/8e8f7fe1-df9b-40ed-bed3-4597aa0dac52",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_openid_full_name_protocol_mapper/",
            "text": "keycloak_openid_full_name_protocol_mapper\n\n\nAllows for creating and managing full name protocol mappers within\nKeycloak.\n\n\nFull name protocol mappers allow you to map a user's first and last name\nto the OpenID Connect \nname\n claim in a token. Protocol mappers can be defined\nfor a single client, or they can be defined for a client scope which can\nbe shared between multiple different clients.\n\n\nExample Usage (Client)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\nresource \"keycloak_openid_full_name_protocol_mapper\" \"full_name_mapper\" {\n    realm_id       = \"${keycloak_realm.realm.id}\"\n    client_id      = \"${keycloak_openid_client.openid_client.id}\"\n    name           = \"full-name-mapper\"\n}\n\n\n\n\nExample Usage (Client Scope)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_full_name_protocol_mapper\" \"full_name_mapper\" {\n    realm_id        = \"${keycloak_realm.realm.id}\"\n    client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\"\n    name            = \"full-name-mapper\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this protocol mapper exists within.\n\n\nclient_id\n - (Required if \nclient_scope_id\n is not specified) The client this protocol mapper is attached to.\n\n\nclient_scope_id\n - (Required if \nclient_id\n is not specified) The client scope this protocol mapper is attached to.\n\n\nname\n - (Required) The display name of this protocol mapper in the GUI.\n\n\nadd_to_id_token\n - (Optional) Indicates if the user's full name should be added as a claim to the id token. Defaults to \ntrue\n.\n\n\nadd_to_access_token\n - (Optional) Indicates if the user's full name should be added as a claim to the access token. Defaults to \ntrue\n.\n\n\nadd_to_userinfo\n - (Optional) Indicates if the user's full name should be added as a claim to the UserInfo response body. Defaults to \ntrue\n.\n\n\n\n\nImport\n\n\nProtocol mappers can be imported using one of the following formats:\n- Client: \n{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}\n\n- Client Scope: \n{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}\n\n\nExample:\n\n\n$ terraform import keycloak_openid_full_name_protocol_mapper.full_name_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_openid_full_name_protocol_mapper.full_name_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Keycloak openid full name protocol mapper"
        },
        {
            "location": "/resources/keycloak_openid_full_name_protocol_mapper/#keycloak_openid_full_name_protocol_mapper",
            "text": "Allows for creating and managing full name protocol mappers within\nKeycloak.  Full name protocol mappers allow you to map a user's first and last name\nto the OpenID Connect  name  claim in a token. Protocol mappers can be defined\nfor a single client, or they can be defined for a client scope which can\nbe shared between multiple different clients.",
            "title": "keycloak_openid_full_name_protocol_mapper"
        },
        {
            "location": "/resources/keycloak_openid_full_name_protocol_mapper/#example-usage-client",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\nresource \"keycloak_openid_full_name_protocol_mapper\" \"full_name_mapper\" {\n    realm_id       = \"${keycloak_realm.realm.id}\"\n    client_id      = \"${keycloak_openid_client.openid_client.id}\"\n    name           = \"full-name-mapper\"\n}",
            "title": "Example Usage (Client)"
        },
        {
            "location": "/resources/keycloak_openid_full_name_protocol_mapper/#example-usage-client-scope",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_full_name_protocol_mapper\" \"full_name_mapper\" {\n    realm_id        = \"${keycloak_realm.realm.id}\"\n    client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\"\n    name            = \"full-name-mapper\"\n}",
            "title": "Example Usage (Client Scope)"
        },
        {
            "location": "/resources/keycloak_openid_full_name_protocol_mapper/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this protocol mapper exists within.  client_id  - (Required if  client_scope_id  is not specified) The client this protocol mapper is attached to.  client_scope_id  - (Required if  client_id  is not specified) The client scope this protocol mapper is attached to.  name  - (Required) The display name of this protocol mapper in the GUI.  add_to_id_token  - (Optional) Indicates if the user's full name should be added as a claim to the id token. Defaults to  true .  add_to_access_token  - (Optional) Indicates if the user's full name should be added as a claim to the access token. Defaults to  true .  add_to_userinfo  - (Optional) Indicates if the user's full name should be added as a claim to the UserInfo response body. Defaults to  true .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_openid_full_name_protocol_mapper/#import",
            "text": "Protocol mappers can be imported using one of the following formats:\n- Client:  {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} \n- Client Scope:  {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}  Example:  $ terraform import keycloak_openid_full_name_protocol_mapper.full_name_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_openid_full_name_protocol_mapper.full_name_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_openid_group_membership_protocol_mapper/",
            "text": "keycloak_openid_group_membership_protocol_mapper\n\n\nAllows for creating and managing group membership protocol mappers within\nKeycloak.\n\n\nGroup membership protocol mappers allow you to map a user's group memberships\nto a claim in a token. Protocol mappers can be defined for a single client,\nor they can be defined for a client scope which can be shared between multiple\ndifferent clients.\n\n\nExample Usage (Client)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\nresource \"keycloak_openid_group_membership_protocol_mapper\" \"group_membership_mapper\" {\n    realm_id       = \"${keycloak_realm.realm.id}\"\n    client_id      = \"${keycloak_openid_client.openid_client.id}\"\n    name           = \"group-membership-mapper\"\n\n    claim_name     = \"groups\"\n}\n\n\n\n\nExample Usage (Client Scope)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_group_membership_protocol_mapper\" \"group_membership_mapper\" {\n    realm_id        = \"${keycloak_realm.realm.id}\"\n    client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\"\n    name            = \"group-membership-mapper\"\n\n    claim_name      = \"groups\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this protocol mapper exists within.\n\n\nclient_id\n - (Required if \nclient_scope_id\n is not specified) The client this protocol mapper is attached to.\n\n\nclient_scope_id\n - (Required if \nclient_id\n is not specified) The client scope this protocol mapper is attached to.\n\n\nname\n - (Required) The display name of this protocol mapper in the GUI.\n\n\nclaim_name\n - (Required) The name of the claim to insert into a token.\n\n\nfull_path\n - (Optional) Indicates whether the full path of the group including its parents will be used. Defaults to \ntrue\n.\n\n\nadd_to_id_token\n - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to \ntrue\n.\n\n\nadd_to_access_token\n - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to \ntrue\n.\n\n\nadd_to_userinfo\n - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to \ntrue\n.\n\n\n\n\nImport\n\n\nProtocol mappers can be imported using one of the following formats:\n- Client: \n{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}\n\n- Client Scope: \n{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}\n\n\nExample:\n\n\n$ terraform import keycloak_openid_group_membership_protocol_mapper.group_membership_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_openid_group_membership_protocol_mapper.group_membership_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Keycloak openid group membership protocol mapper"
        },
        {
            "location": "/resources/keycloak_openid_group_membership_protocol_mapper/#keycloak_openid_group_membership_protocol_mapper",
            "text": "Allows for creating and managing group membership protocol mappers within\nKeycloak.  Group membership protocol mappers allow you to map a user's group memberships\nto a claim in a token. Protocol mappers can be defined for a single client,\nor they can be defined for a client scope which can be shared between multiple\ndifferent clients.",
            "title": "keycloak_openid_group_membership_protocol_mapper"
        },
        {
            "location": "/resources/keycloak_openid_group_membership_protocol_mapper/#example-usage-client",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\nresource \"keycloak_openid_group_membership_protocol_mapper\" \"group_membership_mapper\" {\n    realm_id       = \"${keycloak_realm.realm.id}\"\n    client_id      = \"${keycloak_openid_client.openid_client.id}\"\n    name           = \"group-membership-mapper\"\n\n    claim_name     = \"groups\"\n}",
            "title": "Example Usage (Client)"
        },
        {
            "location": "/resources/keycloak_openid_group_membership_protocol_mapper/#example-usage-client-scope",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_group_membership_protocol_mapper\" \"group_membership_mapper\" {\n    realm_id        = \"${keycloak_realm.realm.id}\"\n    client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\"\n    name            = \"group-membership-mapper\"\n\n    claim_name      = \"groups\"\n}",
            "title": "Example Usage (Client Scope)"
        },
        {
            "location": "/resources/keycloak_openid_group_membership_protocol_mapper/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this protocol mapper exists within.  client_id  - (Required if  client_scope_id  is not specified) The client this protocol mapper is attached to.  client_scope_id  - (Required if  client_id  is not specified) The client scope this protocol mapper is attached to.  name  - (Required) The display name of this protocol mapper in the GUI.  claim_name  - (Required) The name of the claim to insert into a token.  full_path  - (Optional) Indicates whether the full path of the group including its parents will be used. Defaults to  true .  add_to_id_token  - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to  true .  add_to_access_token  - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to  true .  add_to_userinfo  - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to  true .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_openid_group_membership_protocol_mapper/#import",
            "text": "Protocol mappers can be imported using one of the following formats:\n- Client:  {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} \n- Client Scope:  {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}  Example:  $ terraform import keycloak_openid_group_membership_protocol_mapper.group_membership_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_openid_group_membership_protocol_mapper.group_membership_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_openid_hardcoded_claim_protocol_mapper/",
            "text": "keycloak_openid_hardcoded_claim_protocol_mapper\n\n\nAllows for creating and managing hardcoded claim protocol mappers within\nKeycloak.\n\n\nHardcoded claim protocol mappers allow you to define a claim with a hardcoded\nvalue. Protocol mappers can be defined for a single client, or they can\nbe defined for a client scope which can be shared between multiple different\nclients.\n\n\nExample Usage (Client)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\nresource \"keycloak_openid_hardcoded_claim_protocol_mapper\" \"hardcoded_claim_mapper\" {\n    realm_id    = \"${keycloak_realm.realm.id}\"\n    client_id   = \"${keycloak_openid_client.openid_client.id}\"\n    name        = \"hardcoded-claim-mapper\"\n\n    claim_name  = \"foo\"\n    claim_value = \"bar\"\n}\n\n\n\n\nExample Usage (Client Scope)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_hardcoded_claim_protocol_mapper\" \"hardcoded_claim_mapper\" {\n    realm_id        = \"${keycloak_realm.realm.id}\"\n    client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\"\n    name            = \"hardcoded-claim-mapper\"\n\n    claim_name      = \"foo\"\n    claim_value     = \"bar\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this protocol mapper exists within.\n\n\nclient_id\n - (Required if \nclient_scope_id\n is not specified) The client this protocol mapper is attached to.\n\n\nclient_scope_id\n - (Required if \nclient_id\n is not specified) The client scope this protocol mapper is attached to.\n\n\nname\n - (Required) The display name of this protocol mapper in the GUI.\n\n\nclaim_name\n - (Required) The name of the claim to insert into a token.\n\n\nclaim_value\n - (Required) The hardcoded value of the claim.\n\n\nclaim_value_type\n - (Optional) The claim type used when serializing JSON tokens. Can be one of \nString\n, \nlong\n, \nint\n, or \nboolean\n. Defaults to \nString\n.\n\n\nadd_to_id_token\n - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to \ntrue\n.\n\n\nadd_to_access_token\n - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to \ntrue\n.\n\n\nadd_to_userinfo\n - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to \ntrue\n.\n\n\n\n\nImport\n\n\nProtocol mappers can be imported using one of the following formats:\n- Client: \n{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}\n\n- Client Scope: \n{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}\n\n\nExample:\n\n\n$ terraform import keycloak_openid_hardcoded_claim_protocol_mapper.hardcoded_claim_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_openid_hardcoded_claim_protocol_mapper.hardcoded_claim_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Keycloak openid hardcoded claim protocol mapper"
        },
        {
            "location": "/resources/keycloak_openid_hardcoded_claim_protocol_mapper/#keycloak_openid_hardcoded_claim_protocol_mapper",
            "text": "Allows for creating and managing hardcoded claim protocol mappers within\nKeycloak.  Hardcoded claim protocol mappers allow you to define a claim with a hardcoded\nvalue. Protocol mappers can be defined for a single client, or they can\nbe defined for a client scope which can be shared between multiple different\nclients.",
            "title": "keycloak_openid_hardcoded_claim_protocol_mapper"
        },
        {
            "location": "/resources/keycloak_openid_hardcoded_claim_protocol_mapper/#example-usage-client",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\nresource \"keycloak_openid_hardcoded_claim_protocol_mapper\" \"hardcoded_claim_mapper\" {\n    realm_id    = \"${keycloak_realm.realm.id}\"\n    client_id   = \"${keycloak_openid_client.openid_client.id}\"\n    name        = \"hardcoded-claim-mapper\"\n\n    claim_name  = \"foo\"\n    claim_value = \"bar\"\n}",
            "title": "Example Usage (Client)"
        },
        {
            "location": "/resources/keycloak_openid_hardcoded_claim_protocol_mapper/#example-usage-client-scope",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_hardcoded_claim_protocol_mapper\" \"hardcoded_claim_mapper\" {\n    realm_id        = \"${keycloak_realm.realm.id}\"\n    client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\"\n    name            = \"hardcoded-claim-mapper\"\n\n    claim_name      = \"foo\"\n    claim_value     = \"bar\"\n}",
            "title": "Example Usage (Client Scope)"
        },
        {
            "location": "/resources/keycloak_openid_hardcoded_claim_protocol_mapper/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this protocol mapper exists within.  client_id  - (Required if  client_scope_id  is not specified) The client this protocol mapper is attached to.  client_scope_id  - (Required if  client_id  is not specified) The client scope this protocol mapper is attached to.  name  - (Required) The display name of this protocol mapper in the GUI.  claim_name  - (Required) The name of the claim to insert into a token.  claim_value  - (Required) The hardcoded value of the claim.  claim_value_type  - (Optional) The claim type used when serializing JSON tokens. Can be one of  String ,  long ,  int , or  boolean . Defaults to  String .  add_to_id_token  - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to  true .  add_to_access_token  - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to  true .  add_to_userinfo  - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to  true .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_openid_hardcoded_claim_protocol_mapper/#import",
            "text": "Protocol mappers can be imported using one of the following formats:\n- Client:  {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} \n- Client Scope:  {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}  Example:  $ terraform import keycloak_openid_hardcoded_claim_protocol_mapper.hardcoded_claim_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_openid_hardcoded_claim_protocol_mapper.hardcoded_claim_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_openid_user_attribute_protocol_mapper/",
            "text": "keycloak_openid_user_attribute_protocol_mapper\n\n\nAllows for creating and managing user attribute protocol mappers within\nKeycloak.\n\n\nUser attribute protocol mappers allow you to map custom attributes defined\nfor a user within Keycloak to a claim in a token. Protocol mappers can be\ndefined for a single client, or they can be defined for a client scope which\ncan be shared between multiple different clients.\n\n\nExample Usage (Client)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\nresource \"keycloak_openid_user_attribute_protocol_mapper\" \"user_attribute_mapper\" {\n    realm_id       = \"${keycloak_realm.realm.id}\"\n    client_id      = \"${keycloak_openid_client.openid_client.id}\"\n    name           = \"test-mapper\"\n\n    user_attribute = \"foo\"\n    claim_name     = \"bar\"\n}\n\n\n\n\nExample Usage (Client Scope)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_user_attribute_protocol_mapper\" \"user_attribute_mapper\" {\n    realm_id        = \"${keycloak_realm.realm.id}\"\n    client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\"\n    name            = \"test-mapper\"\n\n    user_attribute  = \"foo\"\n    claim_name      = \"bar\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this protocol mapper exists within.\n\n\nclient_id\n - (Required if \nclient_scope_id\n is not specified) The client this protocol mapper is attached to.\n\n\nclient_scope_id\n - (Required if \nclient_id\n is not specified) The client scope this protocol mapper is attached to.\n\n\nname\n - (Required) The display name of this protocol mapper in the GUI.\n\n\nuser_attribute\n - (Required) The custom user attribute to map a claim for.\n\n\nclaim_name\n - (Required) The name of the claim to insert into a token.\n\n\nclaim_value_type\n - (Optional) The claim type used when serializing JSON tokens. Can be one of \nString\n, \nlong\n, \nint\n, or \nboolean\n. Defaults to \nString\n.\n\n\nmultivalued\n - (Optional) Indicates whether this attribute is a single value or an array of values. Defaults to \nfalse\n.\n\n\nadd_to_id_token\n - (Optional) Indicates if the attribute should be added as a claim to the id token. Defaults to \ntrue\n.\n\n\nadd_to_access_token\n - (Optional) Indicates if the attribute should be added as a claim to the access token. Defaults to \ntrue\n.\n\n\nadd_to_userinfo\n - (Optional) Indicates if the attribute should be added as a claim to the UserInfo response body. Defaults to \ntrue\n.\n\n\n\n\nImport\n\n\nProtocol mappers can be imported using one of the following formats:\n- Client: \n{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}\n\n- Client Scope: \n{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}\n\n\nExample:\n\n\n$ terraform import keycloak_openid_user_attribute_protocol_mapper.user_attribute_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_openid_user_attribute_protocol_mapper.user_attribute_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Keycloak openid user attribute protocol mapper"
        },
        {
            "location": "/resources/keycloak_openid_user_attribute_protocol_mapper/#keycloak_openid_user_attribute_protocol_mapper",
            "text": "Allows for creating and managing user attribute protocol mappers within\nKeycloak.  User attribute protocol mappers allow you to map custom attributes defined\nfor a user within Keycloak to a claim in a token. Protocol mappers can be\ndefined for a single client, or they can be defined for a client scope which\ncan be shared between multiple different clients.",
            "title": "keycloak_openid_user_attribute_protocol_mapper"
        },
        {
            "location": "/resources/keycloak_openid_user_attribute_protocol_mapper/#example-usage-client",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\nresource \"keycloak_openid_user_attribute_protocol_mapper\" \"user_attribute_mapper\" {\n    realm_id       = \"${keycloak_realm.realm.id}\"\n    client_id      = \"${keycloak_openid_client.openid_client.id}\"\n    name           = \"test-mapper\"\n\n    user_attribute = \"foo\"\n    claim_name     = \"bar\"\n}",
            "title": "Example Usage (Client)"
        },
        {
            "location": "/resources/keycloak_openid_user_attribute_protocol_mapper/#example-usage-client-scope",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_user_attribute_protocol_mapper\" \"user_attribute_mapper\" {\n    realm_id        = \"${keycloak_realm.realm.id}\"\n    client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\"\n    name            = \"test-mapper\"\n\n    user_attribute  = \"foo\"\n    claim_name      = \"bar\"\n}",
            "title": "Example Usage (Client Scope)"
        },
        {
            "location": "/resources/keycloak_openid_user_attribute_protocol_mapper/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this protocol mapper exists within.  client_id  - (Required if  client_scope_id  is not specified) The client this protocol mapper is attached to.  client_scope_id  - (Required if  client_id  is not specified) The client scope this protocol mapper is attached to.  name  - (Required) The display name of this protocol mapper in the GUI.  user_attribute  - (Required) The custom user attribute to map a claim for.  claim_name  - (Required) The name of the claim to insert into a token.  claim_value_type  - (Optional) The claim type used when serializing JSON tokens. Can be one of  String ,  long ,  int , or  boolean . Defaults to  String .  multivalued  - (Optional) Indicates whether this attribute is a single value or an array of values. Defaults to  false .  add_to_id_token  - (Optional) Indicates if the attribute should be added as a claim to the id token. Defaults to  true .  add_to_access_token  - (Optional) Indicates if the attribute should be added as a claim to the access token. Defaults to  true .  add_to_userinfo  - (Optional) Indicates if the attribute should be added as a claim to the UserInfo response body. Defaults to  true .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_openid_user_attribute_protocol_mapper/#import",
            "text": "Protocol mappers can be imported using one of the following formats:\n- Client:  {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} \n- Client Scope:  {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}  Example:  $ terraform import keycloak_openid_user_attribute_protocol_mapper.user_attribute_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_openid_user_attribute_protocol_mapper.user_attribute_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_openid_user_property_protocol_mapper/",
            "text": "keycloak_openid_user_property_protocol_mapper\n\n\nAllows for creating and managing user property protocol mappers within\nKeycloak.\n\n\nUser property protocol mappers allow you to map built in properties defined\non the Keycloak user interface to a claim in a token. Protocol mappers can be\ndefined for a single client, or they can be defined for a client scope which\ncan be shared between multiple different clients.\n\n\nExample Usage (Client)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\nresource \"keycloak_openid_user_property_protocol_mapper\" \"user_property_mapper\" {\n    realm_id       = \"${keycloak_realm.realm.id}\"\n    client_id      = \"${keycloak_openid_client.openid_client.id}\"\n    name           = \"test-mapper\"\n\n    user_property  = \"email\"\n    claim_name     = \"email\"\n}\n\n\n\n\nExample Usage (Client Scope)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_user_property_protocol_mapper\" \"user_property_mapper\" {\n    realm_id        = \"${keycloak_realm.realm.id}\"\n    client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\"\n    name            = \"test-mapper\"\n\n    user_property   = \"email\"\n    claim_name      = \"email\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this protocol mapper exists within.\n\n\nclient_id\n - (Required if \nclient_scope_id\n is not specified) The client this protocol mapper is attached to.\n\n\nclient_scope_id\n - (Required if \nclient_id\n is not specified) The client scope this protocol mapper is attached to.\n\n\nname\n - (Required) The display name of this protocol mapper in the GUI.\n\n\nuser_property\n - (Required) The built in user property (such as email) to map a claim for.\n\n\nclaim_name\n - (Required) The name of the claim to insert into a token.\n\n\nclaim_value_type\n - (Optional) The claim type used when serializing JSON tokens. Can be one of \nString\n, \nlong\n, \nint\n, or \nboolean\n. Defaults to \nString\n.\n\n\nadd_to_id_token\n - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to \ntrue\n.\n\n\nadd_to_access_token\n - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to \ntrue\n.\n\n\nadd_to_userinfo\n - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to \ntrue\n.\n\n\n\n\nImport\n\n\nProtocol mappers can be imported using one of the following formats:\n- Client: \n{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}\n\n- Client Scope: \n{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}\n\n\nExample:\n\n\n$ terraform import keycloak_openid_user_property_protocol_mapper.user_property_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_openid_user_property_protocol_mapper.user_property_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Keycloak openid user property protocol mapper"
        },
        {
            "location": "/resources/keycloak_openid_user_property_protocol_mapper/#keycloak_openid_user_property_protocol_mapper",
            "text": "Allows for creating and managing user property protocol mappers within\nKeycloak.  User property protocol mappers allow you to map built in properties defined\non the Keycloak user interface to a claim in a token. Protocol mappers can be\ndefined for a single client, or they can be defined for a client scope which\ncan be shared between multiple different clients.",
            "title": "keycloak_openid_user_property_protocol_mapper"
        },
        {
            "location": "/resources/keycloak_openid_user_property_protocol_mapper/#example-usage-client",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client\" \"openid_client\" {\n    realm_id            = \"${keycloak_realm.realm.id}\"\n    client_id           = \"test-client\"\n\n    name                = \"test client\"\n    enabled             = true\n\n    access_type         = \"CONFIDENTIAL\"\n    valid_redirect_uris = [\n        \"http://localhost:8080/openid-callback\"\n    ]\n}\n\nresource \"keycloak_openid_user_property_protocol_mapper\" \"user_property_mapper\" {\n    realm_id       = \"${keycloak_realm.realm.id}\"\n    client_id      = \"${keycloak_openid_client.openid_client.id}\"\n    name           = \"test-mapper\"\n\n    user_property  = \"email\"\n    claim_name     = \"email\"\n}",
            "title": "Example Usage (Client)"
        },
        {
            "location": "/resources/keycloak_openid_user_property_protocol_mapper/#example-usage-client-scope",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_openid_client_scope\" \"client_scope\" {\n    realm_id = \"${keycloak_realm.realm.id}\"\n    name     = \"test-client-scope\"\n}\n\nresource \"keycloak_openid_user_property_protocol_mapper\" \"user_property_mapper\" {\n    realm_id        = \"${keycloak_realm.realm.id}\"\n    client_scope_id = \"${keycloak_openid_client_scope.client_scope.id}\"\n    name            = \"test-mapper\"\n\n    user_property   = \"email\"\n    claim_name      = \"email\"\n}",
            "title": "Example Usage (Client Scope)"
        },
        {
            "location": "/resources/keycloak_openid_user_property_protocol_mapper/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this protocol mapper exists within.  client_id  - (Required if  client_scope_id  is not specified) The client this protocol mapper is attached to.  client_scope_id  - (Required if  client_id  is not specified) The client scope this protocol mapper is attached to.  name  - (Required) The display name of this protocol mapper in the GUI.  user_property  - (Required) The built in user property (such as email) to map a claim for.  claim_name  - (Required) The name of the claim to insert into a token.  claim_value_type  - (Optional) The claim type used when serializing JSON tokens. Can be one of  String ,  long ,  int , or  boolean . Defaults to  String .  add_to_id_token  - (Optional) Indicates if the property should be added as a claim to the id token. Defaults to  true .  add_to_access_token  - (Optional) Indicates if the property should be added as a claim to the access token. Defaults to  true .  add_to_userinfo  - (Optional) Indicates if the property should be added as a claim to the UserInfo response body. Defaults to  true .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_openid_user_property_protocol_mapper/#import",
            "text": "Protocol mappers can be imported using one of the following formats:\n- Client:  {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} \n- Client Scope:  {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}  Example:  $ terraform import keycloak_openid_user_property_protocol_mapper.user_property_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_openid_user_property_protocol_mapper.user_property_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_realm/",
            "text": "keycloak_realm\n\n\nAllows for creating and managing Realms within Keycloak.\n\n\nA realm manages a logical collection of users, credentials, roles, and groups.\nUsers log in to realms and can be federated from multiple sources.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm                = \"test\"\n    enabled              = true\n    display_name         = \"test realm\"\n\n    login_theme          = \"base\"\n\n    access_code_lifespan = \"1h\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm\n - (Required) The name of the realm. This is unique across Keycloak.\n\n\nenabled\n - (Optional) When false, users and clients will not be able to access this realm. Defaults to \ntrue\n.\n\n\ndisplay_name\n - (Optional) The display name for the realm that is shown when logging in to the admin console.\n\n\n\n\nLogin Settings\n\n\nThe following attributes are all booleans, and can be found in the \"Login\" tab within the realm settings.\nIf any of these attributes are not specified, they will default to Keycloak's default settings.\n\n\n\n\nregistration_allowed\n - (Optional) When true, user registration will be enabled, and a link for registration will be displayed on the login page.\n\n\nregistration_email_as_username\n - (Optional) When true, the user's email will be used as their username during registration.\n\n\nedit_username_allowed\n - (Optional) When true, the username field is editable.\n\n\nreset_password_allowed\n - (Optional) When true, a \"forgot password\" link will be displayed on the login page.\n\n\nremember_me\n - (Optional) When true, a \"remember me\" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts.\n\n\nverify_email\n - (Optional) When true, users are required to verify their email address after registration and after email address changes.\n\n\nlogin_with_email_allowed\n - (Optional) When true, users may log in with their email address.\n\n\nduplicate_emails_allowed\n - (Optional) When true, multiple users will be allowed to have the same email address. This attribute must be set to \nfalse\n if \nlogin_with_email_allowed\n is set to \ntrue\n.\n\n\n\n\nThemes\n\n\nThe following attributes can be used to configure themes for the realm. Custom themes can be specified here.\nIf any of these attributes are not specified, they will default to Keycloak's default settings. Typically the \nkeycloak\n theme is used by default.\n\n\n\n\nlogin_theme\n - (Optional) Used for the login, forgot password, and registration pages.\n\n\naccount_theme\n - (Optional) Used for account management pages.\n\n\nadmin_theme\n - (Optional) Used for the admin console.\n\n\nemail_theme\n - (Optional) Used for emails that are sent by Keycloak.\n\n\n\n\nTokens\n\n\nThe following attributes can be found in the \"Tokens\" tab within the realm settings.\n\n\n\n\nrefresh_token_max_reuse\n - (Optional) Maximum number of times a refresh token can be reused before they are revoked. If unspecified, refresh tokens will only be revoked when a different token is used.\n\n\n\n\nThe attributes below should be specified as \nGo duration strings\n. They will default to Keycloak's default settings.\n\n\n\n\nsso_session_idle_timeout\n - (Optional) The amount of time a session can be idle before it expires.\n\n\nsso_session_max_lifespan\n - (Optional) The maximum amount of time before a session expires regardless of activity.\n\n\noffline_session_idle_timeout\n - (Optional) The amount of time an offline session can be idle before it expires.\n\n\noffline_session_max_lifespan\n - (Optional) The maximum amount of time before an offline session expires regardless of activity.\n\n\naccess_token_lifespan\n - (Optional) The amount of time an access token can be used before it expires.\n\n\naccess_token_lifespan_for_implicit_flow\n - (Optional) The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires.\n\n\naccess_code_lifespan\n - (Optional) The maximum amount of time a client has to finish the authorization code flow.\n\n\naccess_code_lifespan_login\n - (Optional) The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted.\n\n\naccess_code_lifespan_user_action\n - (Optional) The maximum amount of time a user has to complete login related actions, such as updating a password.\n\n\naction_token_generated_by_user_lifespan\n - (Optional) The maximum time a user has to use a user-generated permit before it expires.\n\n\naction_token_generated_by_admin_lifespan\n - (Optional) The maximum time a user has to use an admin-generated permit before it expires.\n\n\n\n\nImport\n\n\nRealms can be imported using their name:\n\n\n$ terraform import keycloak_realm.realm test",
            "title": "Keycloak realm"
        },
        {
            "location": "/resources/keycloak_realm/#keycloak_realm",
            "text": "Allows for creating and managing Realms within Keycloak.  A realm manages a logical collection of users, credentials, roles, and groups.\nUsers log in to realms and can be federated from multiple sources.",
            "title": "keycloak_realm"
        },
        {
            "location": "/resources/keycloak_realm/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm                = \"test\"\n    enabled              = true\n    display_name         = \"test realm\"\n\n    login_theme          = \"base\"\n\n    access_code_lifespan = \"1h\"\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_realm/#argument-reference",
            "text": "The following arguments are supported:   realm  - (Required) The name of the realm. This is unique across Keycloak.  enabled  - (Optional) When false, users and clients will not be able to access this realm. Defaults to  true .  display_name  - (Optional) The display name for the realm that is shown when logging in to the admin console.",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_realm/#login-settings",
            "text": "The following attributes are all booleans, and can be found in the \"Login\" tab within the realm settings.\nIf any of these attributes are not specified, they will default to Keycloak's default settings.   registration_allowed  - (Optional) When true, user registration will be enabled, and a link for registration will be displayed on the login page.  registration_email_as_username  - (Optional) When true, the user's email will be used as their username during registration.  edit_username_allowed  - (Optional) When true, the username field is editable.  reset_password_allowed  - (Optional) When true, a \"forgot password\" link will be displayed on the login page.  remember_me  - (Optional) When true, a \"remember me\" checkbox will be displayed on the login page, and the user's session will not expire between browser restarts.  verify_email  - (Optional) When true, users are required to verify their email address after registration and after email address changes.  login_with_email_allowed  - (Optional) When true, users may log in with their email address.  duplicate_emails_allowed  - (Optional) When true, multiple users will be allowed to have the same email address. This attribute must be set to  false  if  login_with_email_allowed  is set to  true .",
            "title": "Login Settings"
        },
        {
            "location": "/resources/keycloak_realm/#themes",
            "text": "The following attributes can be used to configure themes for the realm. Custom themes can be specified here.\nIf any of these attributes are not specified, they will default to Keycloak's default settings. Typically the  keycloak  theme is used by default.   login_theme  - (Optional) Used for the login, forgot password, and registration pages.  account_theme  - (Optional) Used for account management pages.  admin_theme  - (Optional) Used for the admin console.  email_theme  - (Optional) Used for emails that are sent by Keycloak.",
            "title": "Themes"
        },
        {
            "location": "/resources/keycloak_realm/#tokens",
            "text": "The following attributes can be found in the \"Tokens\" tab within the realm settings.   refresh_token_max_reuse  - (Optional) Maximum number of times a refresh token can be reused before they are revoked. If unspecified, refresh tokens will only be revoked when a different token is used.   The attributes below should be specified as  Go duration strings . They will default to Keycloak's default settings.   sso_session_idle_timeout  - (Optional) The amount of time a session can be idle before it expires.  sso_session_max_lifespan  - (Optional) The maximum amount of time before a session expires regardless of activity.  offline_session_idle_timeout  - (Optional) The amount of time an offline session can be idle before it expires.  offline_session_max_lifespan  - (Optional) The maximum amount of time before an offline session expires regardless of activity.  access_token_lifespan  - (Optional) The amount of time an access token can be used before it expires.  access_token_lifespan_for_implicit_flow  - (Optional) The amount of time an access token issued with the OpenID Connect Implicit Flow can be used before it expires.  access_code_lifespan  - (Optional) The maximum amount of time a client has to finish the authorization code flow.  access_code_lifespan_login  - (Optional) The maximum amount of time a user is permitted to stay on the login page before the authentication process must be restarted.  access_code_lifespan_user_action  - (Optional) The maximum amount of time a user has to complete login related actions, such as updating a password.  action_token_generated_by_user_lifespan  - (Optional) The maximum time a user has to use a user-generated permit before it expires.  action_token_generated_by_admin_lifespan  - (Optional) The maximum time a user has to use an admin-generated permit before it expires.",
            "title": "Tokens"
        },
        {
            "location": "/resources/keycloak_realm/#import",
            "text": "Realms can be imported using their name:  $ terraform import keycloak_realm.realm test",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_saml_client/",
            "text": "keycloak_saml_client\n\n\nAllows for creating and managing Keycloak clients that use the SAML protocol.\n\n\nClients are entities that can use Keycloak for user authentication. Typically,\nclients are applications that redirect users to Keycloak for authentication\nin order to take advantage of Keycloak's user sessions for SSO.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_saml_client\" \"saml_client\" {\n    realm_id                = \"${keycloak_realm.realm.id}\"\n    client_id               = \"test-saml-client\"\n    name                    = \"test-saml-client\"\n\n    sign_documents          = false\n    sign_assertions         = true\n    include_authn_statement = true\n\n    signing_certificate = \"${file(\"saml-cert.pem\")}\"\n    signing_private_key = \"${file(\"saml-key.pem\")}\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this client is attached to.\n\n\nclient_id\n - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens.\n\n\nname\n - (Optional) The display name of this client in the GUI.\n\n\nenabled\n - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to \ntrue\n.\n\n\ndescription\n - (Optional) The description of this client in the GUI.\n\n\ninclude_authn_statement\n - (Optional) When \ntrue\n, an \nAuthnStatement\n will be included in the SAML response.\n\n\nsign_documents\n - (Optional) When \ntrue\n, the SAML document will be signed by Keycloak using the realm's private key.\n\n\nsign_assertions\n - (Optional) When \ntrue\n, the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response.\n\n\nclient_signature_required\n - (Optional) When \ntrue\n, Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via \nsigning_certificate\n and \nsigning_private_key\n.\n\n\nforce_post_binding\n - (Optional) When \ntrue\n, Keycloak will always respond to an authentication request via the SAML POST Binding.\n\n\nfront_channel_logout\n - (Optional) When \ntrue\n, this client will require a browser redirect in order to perform a logout.\n\n\nname_id_format\n - (Optional) Sets the Name ID format for the subject.\n\n\nroot_url\n - (Optional) When specified, this value is prepended to all relative URLs.\n\n\nvalid_redirect_uris\n - (Optional) When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.\n\n\nbase_url\n - (Optional) When specified, this URL will be used whenever Keycloak needs to link to this client.\n\n\nmaster_saml_processing_url\n - (Optional) When specified, this URL will be used for all SAML requests.\n\n\nsigning_certificate\n - (Optional) If documents or assertions from the client are signed, this certificate will be used to verify the signature.\n\n\nsigning_private_key\n - (Optional) If documents or assertions from the client are signed, this private key will be used to verify the signature.\n\n\n\n\nImport\n\n\nClients can be imported using the format \n{{realm_id}}/{{client_keycloak_id}}\n, where \nclient_keycloak_id\n is the unique ID that Keycloak\nassigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID.\n\n\nExample:\n\n\n$ terraform import keycloak_saml_client.saml_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352",
            "title": "Keycloak saml client"
        },
        {
            "location": "/resources/keycloak_saml_client/#keycloak_saml_client",
            "text": "Allows for creating and managing Keycloak clients that use the SAML protocol.  Clients are entities that can use Keycloak for user authentication. Typically,\nclients are applications that redirect users to Keycloak for authentication\nin order to take advantage of Keycloak's user sessions for SSO.",
            "title": "keycloak_saml_client"
        },
        {
            "location": "/resources/keycloak_saml_client/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_saml_client\" \"saml_client\" {\n    realm_id                = \"${keycloak_realm.realm.id}\"\n    client_id               = \"test-saml-client\"\n    name                    = \"test-saml-client\"\n\n    sign_documents          = false\n    sign_assertions         = true\n    include_authn_statement = true\n\n    signing_certificate = \"${file(\"saml-cert.pem\")}\"\n    signing_private_key = \"${file(\"saml-key.pem\")}\"\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_saml_client/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this client is attached to.  client_id  - (Required) The unique ID of this client, referenced in the URI during authentication and in issued tokens.  name  - (Optional) The display name of this client in the GUI.  enabled  - (Optional) When false, this client will not be able to initiate a login or obtain access tokens. Defaults to  true .  description  - (Optional) The description of this client in the GUI.  include_authn_statement  - (Optional) When  true , an  AuthnStatement  will be included in the SAML response.  sign_documents  - (Optional) When  true , the SAML document will be signed by Keycloak using the realm's private key.  sign_assertions  - (Optional) When  true , the SAML assertions will be signed by Keycloak using the realm's private key, and embedded within the SAML XML Auth response.  client_signature_required  - (Optional) When  true , Keycloak will expect that documents originating from a client will be signed using the certificate and/or key configured via  signing_certificate  and  signing_private_key .  force_post_binding  - (Optional) When  true , Keycloak will always respond to an authentication request via the SAML POST Binding.  front_channel_logout  - (Optional) When  true , this client will require a browser redirect in order to perform a logout.  name_id_format  - (Optional) Sets the Name ID format for the subject.  root_url  - (Optional) When specified, this value is prepended to all relative URLs.  valid_redirect_uris  - (Optional) When specified, Keycloak will use this list to validate given Assertion Consumer URLs specified in the authentication request.  base_url  - (Optional) When specified, this URL will be used whenever Keycloak needs to link to this client.  master_saml_processing_url  - (Optional) When specified, this URL will be used for all SAML requests.  signing_certificate  - (Optional) If documents or assertions from the client are signed, this certificate will be used to verify the signature.  signing_private_key  - (Optional) If documents or assertions from the client are signed, this private key will be used to verify the signature.",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_saml_client/#import",
            "text": "Clients can be imported using the format  {{realm_id}}/{{client_keycloak_id}} , where  client_keycloak_id  is the unique ID that Keycloak\nassigns to the client upon creation. This value can be found in the URI when editing this client in the GUI, and is typically a GUID.  Example:  $ terraform import keycloak_saml_client.saml_client my-realm/dcbc4c73-e478-4928-ae2e-d5e420223352",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_saml_user_attribute_protocol_mapper/",
            "text": "keycloak_saml_user_attribute_protocol_mapper\n\n\nAllows for creating and managing user attribute protocol mappers for\nSAML clients within Keycloak.\n\n\nSAML user attribute protocol mappers allow you to map custom attributes defined\nfor a user within Keycloak to an attribute in a SAML assertion. Protocol mappers\ncan be defined for a single client, or they can be defined for a client scope which\ncan be shared between multiple different clients.\n\n\nExample Usage (Client)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_saml_client\" \"saml_client\" {\n    realm_id  = \"${keycloak_realm.test.id}\"\n    client_id = \"test-saml-client\"\n    name      = \"test-saml-client\"\n}\n\nresource \"keycloak_saml_user_attribute_protocol_mapper\" \"saml_user_attribute_mapper\" {\n    realm_id                   = \"${keycloak_realm.test.id}\"\n    client_id                  = \"${keycloak_saml_client.saml_client.id}\"\n    name                       = \"displayname-user-attribute-mapper\"\n\n    user_attribute             = \"displayName\"\n    saml_attribute_name        = \"displayName\"\n    saml_attribute_name_format = \"Unspecified\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this protocol mapper exists within.\n\n\nclient_id\n - (Required if \nclient_scope_id\n is not specified) The SAML client this protocol mapper is attached to.\n\n\nclient_scope_id\n - (Required if \nclient_id\n is not specified) The SAML client scope this protocol mapper is attached to.\n\n\nname\n - (Required) The display name of this protocol mapper in the GUI.\n\n\nuser_attribute\n - (Required) The custom user attribute to map.\n\n\nfriendly_name\n - (Optional) An optional human-friendly name for this attribute.\n\n\nsaml_attribute_name\n - (Required) The name of the SAML attribute.\n\n\nsaml_attribute_name_format\n - (Required) The SAML attribute Name Format. Can be one of \nUnspecified\n, \nBasic\n, or \nURI Reference\n.\n\n\n\n\nImport\n\n\nProtocol mappers can be imported using one of the following formats:\n- Client: \n{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}\n\n- Client Scope: \n{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}\n\n\nExample:\n\n\n$ terraform import keycloak_saml_user_attribute_protocol_mapper.saml_user_attribute_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_saml_user_attribute_protocol_mapper.saml_user_attribute_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Keycloak saml user attribute protocol mapper"
        },
        {
            "location": "/resources/keycloak_saml_user_attribute_protocol_mapper/#keycloak_saml_user_attribute_protocol_mapper",
            "text": "Allows for creating and managing user attribute protocol mappers for\nSAML clients within Keycloak.  SAML user attribute protocol mappers allow you to map custom attributes defined\nfor a user within Keycloak to an attribute in a SAML assertion. Protocol mappers\ncan be defined for a single client, or they can be defined for a client scope which\ncan be shared between multiple different clients.",
            "title": "keycloak_saml_user_attribute_protocol_mapper"
        },
        {
            "location": "/resources/keycloak_saml_user_attribute_protocol_mapper/#example-usage-client",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_saml_client\" \"saml_client\" {\n    realm_id  = \"${keycloak_realm.test.id}\"\n    client_id = \"test-saml-client\"\n    name      = \"test-saml-client\"\n}\n\nresource \"keycloak_saml_user_attribute_protocol_mapper\" \"saml_user_attribute_mapper\" {\n    realm_id                   = \"${keycloak_realm.test.id}\"\n    client_id                  = \"${keycloak_saml_client.saml_client.id}\"\n    name                       = \"displayname-user-attribute-mapper\"\n\n    user_attribute             = \"displayName\"\n    saml_attribute_name        = \"displayName\"\n    saml_attribute_name_format = \"Unspecified\"\n}",
            "title": "Example Usage (Client)"
        },
        {
            "location": "/resources/keycloak_saml_user_attribute_protocol_mapper/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this protocol mapper exists within.  client_id  - (Required if  client_scope_id  is not specified) The SAML client this protocol mapper is attached to.  client_scope_id  - (Required if  client_id  is not specified) The SAML client scope this protocol mapper is attached to.  name  - (Required) The display name of this protocol mapper in the GUI.  user_attribute  - (Required) The custom user attribute to map.  friendly_name  - (Optional) An optional human-friendly name for this attribute.  saml_attribute_name  - (Required) The name of the SAML attribute.  saml_attribute_name_format  - (Required) The SAML attribute Name Format. Can be one of  Unspecified ,  Basic , or  URI Reference .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_saml_user_attribute_protocol_mapper/#import",
            "text": "Protocol mappers can be imported using one of the following formats:\n- Client:  {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} \n- Client Scope:  {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}  Example:  $ terraform import keycloak_saml_user_attribute_protocol_mapper.saml_user_attribute_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_saml_user_attribute_protocol_mapper.saml_user_attribute_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_saml_user_property_protocol_mapper/",
            "text": "keycloak_saml_user_property_protocol_mapper\n\n\nAllows for creating and managing user property protocol mappers for\nSAML clients within Keycloak.\n\n\nSAML user property protocol mappers allow you to map properties of the Keycloak\nuser model to an attribute in a SAML assertion. Protocol mappers\ncan be defined for a single client, or they can be defined for a client scope which\ncan be shared between multiple different clients.\n\n\nExample Usage (Client)\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_saml_client\" \"saml_client\" {\n    realm_id  = \"${keycloak_realm.test.id}\"\n    client_id = \"test-saml-client\"\n    name      = \"test-saml-client\"\n}\n\nresource \"keycloak_saml_user_property_protocol_mapper\" \"saml_user_property_mapper\" {\n    realm_id                   = \"${keycloak_realm.test.id}\"\n    client_id                  = \"${keycloak_saml_client.saml_client.id}\"\n    name                       = \"email-user-property-mapper\"\n\n    user_property              = \"email\"\n    saml_attribute_name        = \"email\"\n    saml_attribute_name_format = \"Unspecified\"\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this protocol mapper exists within.\n\n\nclient_id\n - (Required if \nclient_scope_id\n is not specified) The SAML client this protocol mapper is attached to.\n\n\nclient_scope_id\n - (Required if \nclient_id\n is not specified) The SAML client scope this protocol mapper is attached to.\n\n\nname\n - (Required) The display name of this protocol mapper in the GUI.\n\n\nuser_property\n - (Required) The property of the Keycloak user model to map.\n\n\nfriendly_name\n - (Optional) An optional human-friendly name for this attribute.\n\n\nsaml_attribute_name\n - (Required) The name of the SAML attribute.\n\n\nsaml_attribute_name_format\n - (Required) The SAML attribute Name Format. Can be one of \nUnspecified\n, \nBasic\n, or \nURI Reference\n.\n\n\n\n\nImport\n\n\nProtocol mappers can be imported using one of the following formats:\n- Client: \n{{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}}\n\n- Client Scope: \n{{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}\n\n\nExample:\n\n\n$ terraform import keycloak_saml_user_property_protocol_mapper.saml_user_property_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_saml_user_property_protocol_mapper.saml_user_property_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Keycloak saml user property protocol mapper"
        },
        {
            "location": "/resources/keycloak_saml_user_property_protocol_mapper/#keycloak_saml_user_property_protocol_mapper",
            "text": "Allows for creating and managing user property protocol mappers for\nSAML clients within Keycloak.  SAML user property protocol mappers allow you to map properties of the Keycloak\nuser model to an attribute in a SAML assertion. Protocol mappers\ncan be defined for a single client, or they can be defined for a client scope which\ncan be shared between multiple different clients.",
            "title": "keycloak_saml_user_property_protocol_mapper"
        },
        {
            "location": "/resources/keycloak_saml_user_property_protocol_mapper/#example-usage-client",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_saml_client\" \"saml_client\" {\n    realm_id  = \"${keycloak_realm.test.id}\"\n    client_id = \"test-saml-client\"\n    name      = \"test-saml-client\"\n}\n\nresource \"keycloak_saml_user_property_protocol_mapper\" \"saml_user_property_mapper\" {\n    realm_id                   = \"${keycloak_realm.test.id}\"\n    client_id                  = \"${keycloak_saml_client.saml_client.id}\"\n    name                       = \"email-user-property-mapper\"\n\n    user_property              = \"email\"\n    saml_attribute_name        = \"email\"\n    saml_attribute_name_format = \"Unspecified\"\n}",
            "title": "Example Usage (Client)"
        },
        {
            "location": "/resources/keycloak_saml_user_property_protocol_mapper/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this protocol mapper exists within.  client_id  - (Required if  client_scope_id  is not specified) The SAML client this protocol mapper is attached to.  client_scope_id  - (Required if  client_id  is not specified) The SAML client scope this protocol mapper is attached to.  name  - (Required) The display name of this protocol mapper in the GUI.  user_property  - (Required) The property of the Keycloak user model to map.  friendly_name  - (Optional) An optional human-friendly name for this attribute.  saml_attribute_name  - (Required) The name of the SAML attribute.  saml_attribute_name_format  - (Required) The SAML attribute Name Format. Can be one of  Unspecified ,  Basic , or  URI Reference .",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_saml_user_property_protocol_mapper/#import",
            "text": "Protocol mappers can be imported using one of the following formats:\n- Client:  {{realm_id}}/client/{{client_keycloak_id}}/{{protocol_mapper_id}} \n- Client Scope:  {{realm_id}}/client-scope/{{client_scope_keycloak_id}}/{{protocol_mapper_id}}  Example:  $ terraform import keycloak_saml_user_property_protocol_mapper.saml_user_property_mapper my-realm/client/a7202154-8793-4656-b655-1dd18c181e14/71602afa-f7d1-4788-8c49-ef8fd00af0f4\n$ terraform import keycloak_saml_user_property_protocol_mapper.saml_user_property_mapper my-realm/client-scope/b799ea7e-73ee-4a73-990a-1eafebe8e20a/71602afa-f7d1-4788-8c49-ef8fd00af0f4",
            "title": "Import"
        },
        {
            "location": "/resources/keycloak_user/",
            "text": "keycloak_user\n\n\nAllows for creating and managing Users within Keycloak.\n\n\nThis resource was created primarily to enable the acceptance tests for the \nkeycloak_group\n resource.\nCreating users within Keycloak is not recommended. Instead, users should be federated from external sources\nby configuring user federation providers or identity providers.\n\n\nExample Usage\n\n\nresource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_user\" \"user\" {\n    realm_id   = \"${keycloak_realm.realm.id}\"\n    username   = \"bob\"\n    enabled    = true\n\n    email      = \"bob@domain.com\"\n    first_name = \"Bob\"\n    last_name  = \"Bobson\"\n}\n\nresource \"keycloak_user\" \"user_with_initial_password\" {\n    realm_id   = \"${keycloak_realm.realm.id}\"\n    username   = \"alice\"\n    enabled    = true\n\n    email      = \"alice@domain.com\"\n    first_name = \"Alice\"\n    last_name  = \"Aliceberg\"\n\n    initial_password {\n      value     = \"some password\"\n      temporary = true\n    }\n}\n\n\n\n\nArgument Reference\n\n\nThe following arguments are supported:\n\n\n\n\nrealm_id\n - (Required) The realm this user belongs to.\n\n\nusername\n - (Required) The unique username of this user.\n\n\ninitial_password\n (Optional) When given, the user's initial password will be set.\n   This attribute is only respected during initial user creation.\n\n\nvalue\n (Required) The initial password.\n\n\ntemporary\n (Optional) If set to \ntrue\n, the initial password is set up for renewal on first use. Default to \nfalse\n.\n\n\nenabled\n - (Optional) When false, this user cannot log in. Defaults to \ntrue\n.\n\n\nemail\n - (Optional) The user's email.\n\n\nfirst_name\n - (Optional) The user's first name.\n\n\nlast_name\n - (Optional) The user's last name.\n\n\n\n\nImport\n\n\nUsers can be imported using the format \n{{realm_id}}/{{user_id}}\n, where \nuser_id\n is the unique ID that Keycloak\nassigns to the user upon creation. This value can be found in the GUI when editing the user.\n\n\nExample:\n\n\n$ terraform import keycloak_user.user my-realm/60c3f971-b1d3-4b3a-9035-d16d7540a5e4",
            "title": "Keycloak user"
        },
        {
            "location": "/resources/keycloak_user/#keycloak_user",
            "text": "Allows for creating and managing Users within Keycloak.  This resource was created primarily to enable the acceptance tests for the  keycloak_group  resource.\nCreating users within Keycloak is not recommended. Instead, users should be federated from external sources\nby configuring user federation providers or identity providers.",
            "title": "keycloak_user"
        },
        {
            "location": "/resources/keycloak_user/#example-usage",
            "text": "resource \"keycloak_realm\" \"realm\" {\n    realm   = \"my-realm\"\n    enabled = true\n}\n\nresource \"keycloak_user\" \"user\" {\n    realm_id   = \"${keycloak_realm.realm.id}\"\n    username   = \"bob\"\n    enabled    = true\n\n    email      = \"bob@domain.com\"\n    first_name = \"Bob\"\n    last_name  = \"Bobson\"\n}\n\nresource \"keycloak_user\" \"user_with_initial_password\" {\n    realm_id   = \"${keycloak_realm.realm.id}\"\n    username   = \"alice\"\n    enabled    = true\n\n    email      = \"alice@domain.com\"\n    first_name = \"Alice\"\n    last_name  = \"Aliceberg\"\n\n    initial_password {\n      value     = \"some password\"\n      temporary = true\n    }\n}",
            "title": "Example Usage"
        },
        {
            "location": "/resources/keycloak_user/#argument-reference",
            "text": "The following arguments are supported:   realm_id  - (Required) The realm this user belongs to.  username  - (Required) The unique username of this user.  initial_password  (Optional) When given, the user's initial password will be set.\n   This attribute is only respected during initial user creation.  value  (Required) The initial password.  temporary  (Optional) If set to  true , the initial password is set up for renewal on first use. Default to  false .  enabled  - (Optional) When false, this user cannot log in. Defaults to  true .  email  - (Optional) The user's email.  first_name  - (Optional) The user's first name.  last_name  - (Optional) The user's last name.",
            "title": "Argument Reference"
        },
        {
            "location": "/resources/keycloak_user/#import",
            "text": "Users can be imported using the format  {{realm_id}}/{{user_id}} , where  user_id  is the unique ID that Keycloak\nassigns to the user upon creation. This value can be found in the GUI when editing the user.  Example:  $ terraform import keycloak_user.user my-realm/60c3f971-b1d3-4b3a-9035-d16d7540a5e4",
            "title": "Import"
        }
    ]
}